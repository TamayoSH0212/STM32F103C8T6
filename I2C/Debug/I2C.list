
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080060b8  080060b8  000160b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006474  08006474  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006474  08006474  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800647c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  08006650  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08006650  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085a1  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e56  00000000  00000000  000287e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  0002af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018977  00000000  00000000  0002b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c784  00000000  00000000  00044003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088ee3  00000000  00000000  00050787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000361c  00000000  00000000  000d966c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000dcc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080060a0 	.word	0x080060a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080060a0 	.word	0x080060a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <LCD_I2C_WriteCommand>:
/* Exported macros -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
static void LCD_I2C_WriteCommand(uint8_t command){//Enviar un byte de comando al controlador hitachi HD44780
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    uint8_t highnibble,lownibble,datos[4];

    highnibble = (command & 0xF0);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f023 030f 	bic.w	r3, r3, #15
 8000c24:	73fb      	strb	r3, [r7, #15]
    lownibble  = (uint8_t)((command & 0x0F)<<4);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	73bb      	strb	r3, [r7, #14]

    datos[0] = highnibble | BACKLIGHT | PIN_EN; //backlight ON,    habilito EN (EN=1, RS=0)
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	f043 030c 	orr.w	r3, r3, #12
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	723b      	strb	r3, [r7, #8]
    datos[1] = highnibble | BACKLIGHT;          //backlight ON, deshabilito EN (EN=0, RS=0)
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	727b      	strb	r3, [r7, #9]
    datos[2] = lownibble  | BACKLIGHT | PIN_EN; //backlight ON,    habilito EN (EN=1, RS=0)
 8000c40:	7bbb      	ldrb	r3, [r7, #14]
 8000c42:	f043 030c 	orr.w	r3, r3, #12
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	72bb      	strb	r3, [r7, #10]
    datos[3] = lownibble  | BACKLIGHT;		    //backlight ON, deshabilito EN (EN=0, RS=0)
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, (uint8_t *)datos, 4, 100);
 8000c54:	f107 0208 	add.w	r2, r7, #8
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	214e      	movs	r1, #78	; 0x4e
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <LCD_I2C_WriteCommand+0x5c>)
 8000c62:	f001 fba7 	bl	80023b4 <HAL_I2C_Master_Transmit>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000220 	.word	0x20000220

08000c74 <LCD_I2C_WriteData>:


static void LCD_I2C_WriteData(uint8_t data){//Enviar un byte de datos al controlador hitachi HD44780
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t highnibble,lownibble,datos[4];

    highnibble = (data & 0xF0);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f023 030f 	bic.w	r3, r3, #15
 8000c84:	73fb      	strb	r3, [r7, #15]
    lownibble  = (uint8_t)((data & 0x0F)<<4);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	73bb      	strb	r3, [r7, #14]

    datos[0] = highnibble | BACKLIGHT | PIN_EN | PIN_RS; //backlight ON,    habilito EN (EN=1, RS=1)
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f043 030d 	orr.w	r3, r3, #13
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	723b      	strb	r3, [r7, #8]
    datos[1] = highnibble | BACKLIGHT | PIN_RS;          //backlight ON, deshabilito EN (EN=0, RS=1)
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f043 0309 	orr.w	r3, r3, #9
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	727b      	strb	r3, [r7, #9]
    datos[2] = lownibble  | BACKLIGHT | PIN_EN | PIN_RS; //backlight ON,    habilito EN (EN=1, RS=1)
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	f043 030d 	orr.w	r3, r3, #13
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	72bb      	strb	r3, [r7, #10]
    datos[3] = lownibble  | BACKLIGHT | PIN_RS;          //backlight ON, deshabilito EN (EN=0, RS=1)
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	f043 0309 	orr.w	r3, r3, #9
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, (uint8_t *)datos, 4, 100);
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	214e      	movs	r1, #78	; 0x4e
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <LCD_I2C_WriteData+0x5c>)
 8000cc2:	f001 fb77 	bl	80023b4 <HAL_I2C_Master_Transmit>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000220 	.word	0x20000220

08000cd4 <LCD_I2C_Init>:

/* Exported functions --------------------------------------------------------*/
void LCD_I2C_Init(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af02      	add	r7, sp, #8
	HAL_Delay(1000);                     //tiempo necesario para no obtener caracteres erroneos al energizar el lcd
 8000cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cde:	f000 fc5b 	bl	8001598 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, 0, 1, 100); //mando un "0" (backlight apagado)
 8000ce2:	2364      	movs	r3, #100	; 0x64
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	214e      	movs	r1, #78	; 0x4e
 8000cec:	4820      	ldr	r0, [pc, #128]	; (8000d70 <LCD_I2C_Init+0x9c>)
 8000cee:	f001 fb61 	bl	80023b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);                      // esperar un tiempo mayor  a 100ms para VDD estable
 8000cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf6:	f000 fc4f 	bl	8001598 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode
 8000cfa:	202c      	movs	r0, #44	; 0x2c
 8000cfc:	f7ff ff8a 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fc49 	bl	8001598 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 8000d06:	202c      	movs	r0, #44	; 0x2c
 8000d08:	f7ff ff84 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f000 fc43 	bl	8001598 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 8000d12:	202c      	movs	r0, #44	; 0x2c
 8000d14:	f7ff ff7e 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f000 fc3d 	bl	8001598 <HAL_Delay>

    LCD_I2C_WriteCommand(0b00100000);    // mando el valor que me indica en la incializacion
 8000d1e:	2020      	movs	r0, #32
 8000d20:	f7ff ff78 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 fc37 	bl	8001598 <HAL_Delay>

    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 8000d2a:	202c      	movs	r0, #44	; 0x2c
 8000d2c:	f7ff ff72 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000d30:	2001      	movs	r0, #1
 8000d32:	f000 fc31 	bl	8001598 <HAL_Delay>

    LCD_I2C_WriteCommand(DISPLAY_ON);    // display control on, cursor off, blink off
 8000d36:	200c      	movs	r0, #12
 8000d38:	f7ff ff6c 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 fc2b 	bl	8001598 <HAL_Delay>

    LCD_I2C_WriteCommand(DISPLAY_CLEAR); // display control on, cursor off, blink off
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ff66 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >3mS
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 fc25 	bl	8001598 <HAL_Delay>

    LCD_I2C_WriteCommand(ENTRY_MODE_SET);// cursor se mueve hacia la derecha, el contador de direcciones DDRAM (AC) más 1
 8000d4e:	2006      	movs	r0, #6
 8000d50:	f7ff ff60 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS, fin de la inicializacion
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fc1f 	bl	8001598 <HAL_Delay>

    LCD_I2C_WriteCommand(0b00001100);    // mando el valor que me indica en la incializacion
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f7ff ff5a 	bl	8000c14 <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000d60:	2001      	movs	r0, #1
 8000d62:	f000 fc19 	bl	8001598 <HAL_Delay>

    LCD_I2C_ClearText();
 8000d66:	f000 f805 	bl	8000d74 <LCD_I2C_ClearText>
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000220 	.word	0x20000220

08000d74 <LCD_I2C_ClearText>:

void LCD_I2C_ClearText(){// Limpiar el texto de la pantalla
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  LCD_I2C_WriteCommand(DISPLAY_CLEAR);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ff4b 	bl	8000c14 <LCD_I2C_WriteCommand>
  HAL_Delay(5);
 8000d7e:	2005      	movs	r0, #5
 8000d80:	f000 fc0a 	bl	8001598 <HAL_Delay>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <LCD_I2C_WriteText>:
		case 0: LCD_I2C_NoBlink();break;
		case 1: LCD_I2C_Blink()  ;break;
    }
}

void LCD_I2C_WriteText(uint8_t row, uint8_t col, char* string){//Escribir en la pantalla
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	603a      	str	r2, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	460b      	mov	r3, r1
 8000d96:	71bb      	strb	r3, [r7, #6]
	row = row - 1;//para empezar desde la fila    1 y no desde la fila    0
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
	col = col - 1;//para empezar desde la columna 1 y no desde la columna 0
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	71bb      	strb	r3, [r7, #6]
	//row -> 1,2,3,4        col -> 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
    switch (row) {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d81a      	bhi.n	8000de0 <LCD_I2C_WriteText+0x58>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <LCD_I2C_WriteText+0x28>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dc9 	.word	0x08000dc9
 8000db8:	08000dd1 	.word	0x08000dd1
 8000dbc:	08000dd9 	.word	0x08000dd9
        case 0: col = col + 0x80;break; // operacion para agregar ala fila 0 su columna "x"
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	3b80      	subs	r3, #128	; 0x80
 8000dc4:	71bb      	strb	r3, [r7, #6]
 8000dc6:	e00f      	b.n	8000de8 <LCD_I2C_WriteText+0x60>
        case 1: col = col + 0xC0;break; // operacion para agregar ala fila 1 su columna "x"
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	3b40      	subs	r3, #64	; 0x40
 8000dcc:	71bb      	strb	r3, [r7, #6]
 8000dce:	e00b      	b.n	8000de8 <LCD_I2C_WriteText+0x60>
        case 2: col = col + 0x94;break; // operacion para agregar ala fila 2 su columna "x"
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	3b6c      	subs	r3, #108	; 0x6c
 8000dd4:	71bb      	strb	r3, [r7, #6]
 8000dd6:	e007      	b.n	8000de8 <LCD_I2C_WriteText+0x60>
        case 3: col = col + 0xD4;break; // operacion para agregar ala fila 3 su columna "x"
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	3b2c      	subs	r3, #44	; 0x2c
 8000ddc:	71bb      	strb	r3, [r7, #6]
 8000dde:	e003      	b.n	8000de8 <LCD_I2C_WriteText+0x60>
        default:col = col + 0x80;break; // fila 0 si ingresa un valor que no es del 0 al 3
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	3b80      	subs	r3, #128	; 0x80
 8000de4:	71bb      	strb	r3, [r7, #6]
 8000de6:	bf00      	nop
    }

    LCD_I2C_WriteCommand(col);
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff12 	bl	8000c14 <LCD_I2C_WriteCommand>
    //Funcion para mandar strings sin saber el tamaño de la cadena
    //while(*string != '\0')
    while (*string)
 8000df0:	e006      	b.n	8000e00 <LCD_I2C_WriteText+0x78>
        LCD_I2C_WriteData(*string++);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	603a      	str	r2, [r7, #0]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff3a 	bl	8000c74 <LCD_I2C_WriteData>
    while (*string)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f4      	bne.n	8000df2 <LCD_I2C_WriteText+0x6a>
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop

08000e14 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <MX_ADC1_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e52:	f000 fbc5 	bl	80015e0 <HAL_ADC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e5c:	f000 f9ef 	bl	800123e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_ADC1_Init+0x74>)
 8000e72:	f000 fd47 	bl	8001904 <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e7c:	f000 f9df 	bl	800123e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001f0 	.word	0x200001f0
 8000e8c:	40012400 	.word	0x40012400

08000e90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_ADC_MspInit+0x6c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d121      	bne.n	8000ef4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_ADC_MspInit+0x70>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0x70>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_ADC_MspInit+0x70>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_ADC_MspInit+0x70>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0x70>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_ADC_MspInit+0x70>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_ADC_MspInit+0x74>)
 8000ef0:	f000 ff80 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40012400 	.word	0x40012400
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010800 	.word	0x40010800

08000f08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_GPIO_Init+0x90>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_GPIO_Init+0x94>)
 8000f6c:	f001 f8c6 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_GPIO_Init+0x94>)
 8000f8a:	f000 ff33 	bl	8001df4 <HAL_GPIO_Init>

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <MX_I2C1_Init+0x54>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x58>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fde:	f001 f8a5 	bl	800212c <HAL_I2C_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe8:	f000 f929 	bl	800123e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	000186a0 	.word	0x000186a0

08000ffc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_I2C_MspInit+0x90>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d132      	bne.n	8001082 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_I2C_MspInit+0x94>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_I2C_MspInit+0x94>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0x94>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001034:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <HAL_I2C_MspInit+0x98>)
 800104a:	f000 fed3 	bl	8001df4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_I2C_MspInit+0x9c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_I2C_MspInit+0x9c>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_I2C_MspInit+0x94>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0x94>)
 8001070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_I2C_MspInit+0x94>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005400 	.word	0x40005400
 8001090:	40021000 	.word	0x40021000
 8001094:	40010c00 	.word	0x40010c00
 8001098:	40010000 	.word	0x40010000
 800109c:	00000000 	.word	0x00000000

080010a0 <main>:
char buff_lcd[18];

void SystemClock_Config(void);

int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  HAL_Init();
 80010a6:	f000 fa15 	bl	80014d4 <HAL_Init>
  SystemClock_Config();
 80010aa:	f000 f86d 	bl	8001188 <SystemClock_Config>
  MX_GPIO_Init();
 80010ae:	f7ff ff2b 	bl	8000f08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010b2:	f7ff ff75 	bl	8000fa0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80010b6:	f7ff fead 	bl	8000e14 <MX_ADC1_Init>
  LCD_I2C_Init();//inicialización de LCD
 80010ba:	f7ff fe0b 	bl	8000cd4 <LCD_I2C_Init>

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80010be:	482c      	ldr	r0, [pc, #176]	; (8001170 <main+0xd0>)
 80010c0:	f000 fb66 	bl	8001790 <HAL_ADC_Start>
	  int valor_adc = HAL_ADC_GetValue(&hadc1);
 80010c4:	482a      	ldr	r0, [pc, #168]	; (8001170 <main+0xd0>)
 80010c6:	f000 fc11 	bl	80018ec <HAL_ADC_GetValue>
 80010ca:	4603      	mov	r3, r0
 80010cc:	607b      	str	r3, [r7, #4]
	  float voltaje = (float)((valor_adc*3.3)/4095.0);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f998 	bl	8000404 <__aeabi_i2d>
 80010d4:	a322      	add	r3, pc, #136	; (adr r3, 8001160 <main+0xc0>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff f9fd 	bl	80004d8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	a320      	add	r3, pc, #128	; (adr r3, 8001168 <main+0xc8>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fb1e 	bl	800072c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fcc6 	bl	8000a88 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	603b      	str	r3, [r7, #0]

	  if (voltaje > 2.5){
 8001100:	491c      	ldr	r1, [pc, #112]	; (8001174 <main+0xd4>)
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f7ff fd7c 	bl	8000c00 <__aeabi_fcmpgt>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <main+0x7c>
		  HAL_GPIO_WritePin(GPIOB, Led_Pin,GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001114:	4818      	ldr	r0, [pc, #96]	; (8001178 <main+0xd8>)
 8001116:	f000 fff1 	bl	80020fc <HAL_GPIO_WritePin>
 800111a:	e005      	b.n	8001128 <main+0x88>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOB, Led_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <main+0xd8>)
 8001124:	f000 ffea 	bl	80020fc <HAL_GPIO_WritePin>
	  }

	  sprintf(buff_lcd,"ADC: %u ",valor_adc);
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4914      	ldr	r1, [pc, #80]	; (800117c <main+0xdc>)
 800112c:	4814      	ldr	r0, [pc, #80]	; (8001180 <main+0xe0>)
 800112e:	f002 fda9 	bl	8003c84 <siprintf>
	  LCD_I2C_WriteText(1,1,buff_lcd);
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <main+0xe0>)
 8001134:	2101      	movs	r1, #1
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff fe26 	bl	8000d88 <LCD_I2C_WriteText>

	  sprintf(buff_lcd,"Voltaje: %.2f ",voltaje);
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f7ff f973 	bl	8000428 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	490f      	ldr	r1, [pc, #60]	; (8001184 <main+0xe4>)
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <main+0xe0>)
 800114a:	f002 fd9b 	bl	8003c84 <siprintf>
	  LCD_I2C_WriteText(2,1,buff_lcd);
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <main+0xe0>)
 8001150:	2101      	movs	r1, #1
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff fe18 	bl	8000d88 <LCD_I2C_WriteText>
  {
 8001158:	e7b1      	b.n	80010be <main+0x1e>
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	66666666 	.word	0x66666666
 8001164:	400a6666 	.word	0x400a6666
 8001168:	00000000 	.word	0x00000000
 800116c:	40affe00 	.word	0x40affe00
 8001170:	200001f0 	.word	0x200001f0
 8001174:	40200000 	.word	0x40200000
 8001178:	40010c00 	.word	0x40010c00
 800117c:	080060b8 	.word	0x080060b8
 8001180:	20000274 	.word	0x20000274
 8001184:	080060c4 	.word	0x080060c4

08001188 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	2228      	movs	r2, #40	; 0x28
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fe56 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fc40 	bl	8002a64 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ea:	f000 f828 	bl	800123e <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f001 feac 	bl	8002f68 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001216:	f000 f812 	bl	800123e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800121a:	2302      	movs	r3, #2
 800121c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800121e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001222:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f002 f818 	bl	800325c <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001232:	f000 f804 	bl	800123e <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <Error_Handler>:

void Error_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001242:	b672      	cpsid	i
}
 8001244:	bf00      	nop
  __disable_irq();
  while (1)
 8001246:	e7fe      	b.n	8001246 <Error_Handler+0x8>

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_MspInit+0x5c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_MspInit+0x5c>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x5c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x5c>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_MspInit+0x60>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_MspInit+0x60>)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010000 	.word	0x40010000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f935 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <_kill>:

int _kill(int pid, int sig)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001312:	f002 fda5 	bl	8003e60 <__errno>
 8001316:	4603      	mov	r3, r0
 8001318:	2216      	movs	r2, #22
 800131a:	601a      	str	r2, [r3, #0]
  return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_exit>:

void _exit (int status)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffe7 	bl	8001308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800133a:	e7fe      	b.n	800133a <_exit+0x12>

0800133c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134e:	f3af 8000 	nop.w
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf0      	blt.n	800134e <_read+0x12>
  }

  return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
  }
  return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d4:	605a      	str	r2, [r3, #4]
  return 0;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <_isatty>:

int _isatty(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f002 fd0e 	bl	8003e60 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20005000 	.word	0x20005000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000288 	.word	0x20000288
 8001478:	200003e0 	.word	0x200003e0

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff fff8 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800148e:	490c      	ldr	r1, [pc, #48]	; (80014c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a4:	4c09      	ldr	r4, [pc, #36]	; (80014cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f002 fcdb 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7ff fdf3 	bl	80010a0 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014c4:	0800647c 	.word	0x0800647c
  ldr r2, =_sbss
 80014c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014cc:	200003dc 	.word	0x200003dc

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 fc51 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff feaa 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fc5b 	bl	8001dda <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153c:	f000 fc31 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000008 	.word	0x20000008
 8001580:	2000028c 	.word	0x2000028c

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	2000028c 	.word	0x2000028c

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0be      	b.n	8001780 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fc36 	bl	8000e90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fabf 	bl	8001ba8 <ADC_ConversionStop_Disable>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8099 	bne.w	800176e <HAL_ADC_Init+0x18e>
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8095 	bne.w	800176e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001660:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7b1b      	ldrb	r3, [r3, #12]
 8001666:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001668:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4313      	orrs	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d003      	beq.n	8001682 <HAL_ADC_Init+0xa2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d102      	bne.n	8001688 <HAL_ADC_Init+0xa8>
 8001682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001686:	e000      	b.n	800168a <HAL_ADC_Init+0xaa>
 8001688:	2300      	movs	r3, #0
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7d1b      	ldrb	r3, [r3, #20]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d119      	bne.n	80016cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	035a      	lsls	r2, r3, #13
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	e00b      	b.n	80016cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f043 0220 	orr.w	r2, r3, #32
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_ADC_Init+0x1a8>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016fc:	d003      	beq.n	8001706 <HAL_ADC_Init+0x126>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d104      	bne.n	8001710 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	3b01      	subs	r3, #1
 800170c:	051b      	lsls	r3, r3, #20
 800170e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	430a      	orrs	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ADC_Init+0x1ac>)
 800172c:	4013      	ands	r3, r2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d10b      	bne.n	800174c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800174a:	e018      	b.n	800177e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f023 0312 	bic.w	r3, r3, #18
 8001754:	f043 0210 	orr.w	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	ffe1f7fd 	.word	0xffe1f7fd
 800178c:	ff1f0efe 	.word	0xff1f0efe

08001790 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_Start+0x1a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e098      	b.n	80018dc <HAL_ADC_Start+0x14c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f99e 	bl	8001af4 <ADC_Enable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 8087 	bne.w	80018d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <HAL_ADC_Start+0x154>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_Start+0x5e>
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_ADC_Start+0x158>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d026      	beq.n	8001856 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001810:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001818:	e01d      	b.n	8001856 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <HAL_ADC_Start+0x158>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d004      	beq.n	800183a <HAL_ADC_Start+0xaa>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <HAL_ADC_Start+0x154>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10d      	bne.n	8001856 <HAL_ADC_Start+0xc6>
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_ADC_Start+0x158>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800184e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f023 0206 	bic.w	r2, r3, #6
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
 800186e:	e002      	b.n	8001876 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f06f 0202 	mvn.w	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001892:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001896:	d113      	bne.n	80018c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_ADC_Start+0x154>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d105      	bne.n	80018ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_ADC_Start+0x158>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d108      	bne.n	80018c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e00c      	b.n	80018da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	e003      	b.n	80018da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40012800 	.word	0x40012800
 80018e8:	40012400 	.word	0x40012400

080018ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x20>
 8001920:	2302      	movs	r3, #2
 8001922:	e0dc      	b.n	8001ade <HAL_ADC_ConfigChannel+0x1da>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b06      	cmp	r3, #6
 8001932:	d81c      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	3b05      	subs	r3, #5
 8001946:	221f      	movs	r2, #31
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b05      	subs	r3, #5
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	; 0x34
 800196c:	e03c      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d81c      	bhi.n	80019b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b23      	subs	r3, #35	; 0x23
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b23      	subs	r3, #35	; 0x23
 80019a2:	fa00 f203 	lsl.w	r2, r0, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
 80019ae:	e01b      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b41      	subs	r3, #65	; 0x41
 80019c2:	221f      	movs	r2, #31
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4019      	ands	r1, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b41      	subs	r3, #65	; 0x41
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d91c      	bls.n	8001a2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68d9      	ldr	r1, [r3, #12]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	3b1e      	subs	r3, #30
 8001a02:	2207      	movs	r2, #7
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4019      	ands	r1, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6898      	ldr	r0, [r3, #8]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b1e      	subs	r3, #30
 8001a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	e019      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6919      	ldr	r1, [r3, #16]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4019      	ands	r1, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6898      	ldr	r0, [r3, #8]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d003      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d132      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d125      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d126      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_ADC_ConfigChannel+0x1e8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	0c9a      	lsrs	r2, r3, #18
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f9      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ac2:	e007      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f043 0220 	orr.w	r2, r3, #32
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40012400 	.word	0x40012400
 8001aec:	20000000 	.word	0x20000000
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d040      	beq.n	8001b94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <ADC_Enable+0xac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <ADC_Enable+0xb0>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b30:	e002      	b.n	8001b38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b3e:	f7ff fd21 	bl	8001584 <HAL_GetTick>
 8001b42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b44:	e01f      	b.n	8001b86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b46:	f7ff fd1d 	bl	8001584 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d918      	bls.n	8001b86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d011      	beq.n	8001b86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e007      	b.n	8001b96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d1d8      	bne.n	8001b46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d12e      	bne.n	8001c20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff fcd7 	bl	8001584 <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd8:	e01b      	b.n	8001c12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bda:	f7ff fcd3 	bl	8001584 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d914      	bls.n	8001c12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10d      	bne.n	8001c12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f043 0210 	orr.w	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e007      	b.n	8001c22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d0dc      	beq.n	8001bda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff49 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff5e 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffb0 	bl	8001d48 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b08b      	sub	sp, #44	; 0x2c
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	e169      	b.n	80020dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f040 8158 	bne.w	80020d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a9a      	ldr	r2, [pc, #616]	; (8002094 <HAL_GPIO_Init+0x2a0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d05e      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e30:	4a98      	ldr	r2, [pc, #608]	; (8002094 <HAL_GPIO_Init+0x2a0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d875      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e36:	4a98      	ldr	r2, [pc, #608]	; (8002098 <HAL_GPIO_Init+0x2a4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d058      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e3c:	4a96      	ldr	r2, [pc, #600]	; (8002098 <HAL_GPIO_Init+0x2a4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d86f      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e42:	4a96      	ldr	r2, [pc, #600]	; (800209c <HAL_GPIO_Init+0x2a8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d052      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e48:	4a94      	ldr	r2, [pc, #592]	; (800209c <HAL_GPIO_Init+0x2a8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d869      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e4e:	4a94      	ldr	r2, [pc, #592]	; (80020a0 <HAL_GPIO_Init+0x2ac>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d04c      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e54:	4a92      	ldr	r2, [pc, #584]	; (80020a0 <HAL_GPIO_Init+0x2ac>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d863      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e5a:	4a92      	ldr	r2, [pc, #584]	; (80020a4 <HAL_GPIO_Init+0x2b0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d046      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e60:	4a90      	ldr	r2, [pc, #576]	; (80020a4 <HAL_GPIO_Init+0x2b0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d85d      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d82a      	bhi.n	8001ec0 <HAL_GPIO_Init+0xcc>
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d859      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e6e:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <HAL_GPIO_Init+0x80>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001eef 	.word	0x08001eef
 8001e78:	08001ec9 	.word	0x08001ec9
 8001e7c:	08001edb 	.word	0x08001edb
 8001e80:	08001f1d 	.word	0x08001f1d
 8001e84:	08001f23 	.word	0x08001f23
 8001e88:	08001f23 	.word	0x08001f23
 8001e8c:	08001f23 	.word	0x08001f23
 8001e90:	08001f23 	.word	0x08001f23
 8001e94:	08001f23 	.word	0x08001f23
 8001e98:	08001f23 	.word	0x08001f23
 8001e9c:	08001f23 	.word	0x08001f23
 8001ea0:	08001f23 	.word	0x08001f23
 8001ea4:	08001f23 	.word	0x08001f23
 8001ea8:	08001f23 	.word	0x08001f23
 8001eac:	08001f23 	.word	0x08001f23
 8001eb0:	08001f23 	.word	0x08001f23
 8001eb4:	08001f23 	.word	0x08001f23
 8001eb8:	08001ed1 	.word	0x08001ed1
 8001ebc:	08001ee5 	.word	0x08001ee5
 8001ec0:	4a79      	ldr	r2, [pc, #484]	; (80020a8 <HAL_GPIO_Init+0x2b4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec6:	e02c      	b.n	8001f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e029      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e024      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	3308      	adds	r3, #8
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e01f      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e01a      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e013      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f04:	2308      	movs	r3, #8
 8001f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	611a      	str	r2, [r3, #16]
          break;
 8001f0e:	e009      	b.n	8001f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	615a      	str	r2, [r3, #20]
          break;
 8001f1a:	e003      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          break;
 8001f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2bff      	cmp	r3, #255	; 0xff
 8001f28:	d801      	bhi.n	8001f2e <HAL_GPIO_Init+0x13a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	e001      	b.n	8001f32 <HAL_GPIO_Init+0x13e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3304      	adds	r3, #4
 8001f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d802      	bhi.n	8001f40 <HAL_GPIO_Init+0x14c>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0x152>
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3b08      	subs	r3, #8
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80b1 	beq.w	80020d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f74:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <HAL_GPIO_Init+0x2b8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_GPIO_Init+0x2b8>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <HAL_GPIO_Init+0x2b8>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f8c:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a40      	ldr	r2, [pc, #256]	; (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_GPIO_Init+0x1ec>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3f      	ldr	r2, [pc, #252]	; (80020b8 <HAL_GPIO_Init+0x2c4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_Init+0x1e8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3e      	ldr	r2, [pc, #248]	; (80020bc <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3d      	ldr	r2, [pc, #244]	; (80020c0 <HAL_GPIO_Init+0x2cc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_Init+0x1e0>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e006      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e004      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4093      	lsls	r3, r2
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff2:	492f      	ldr	r1, [pc, #188]	; (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	492c      	ldr	r1, [pc, #176]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4928      	ldr	r1, [pc, #160]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	491e      	ldr	r1, [pc, #120]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	4914      	ldr	r1, [pc, #80]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002074:	4013      	ands	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d021      	beq.n	80020c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e021      	b.n	80020d6 <HAL_GPIO_Init+0x2e2>
 8002092:	bf00      	nop
 8002094:	10320000 	.word	0x10320000
 8002098:	10310000 	.word	0x10310000
 800209c:	10220000 	.word	0x10220000
 80020a0:	10210000 	.word	0x10210000
 80020a4:	10120000 	.word	0x10120000
 80020a8:	10110000 	.word	0x10110000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40011400 	.word	0x40011400
 80020c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_GPIO_Init+0x304>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <HAL_GPIO_Init+0x304>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f ae8e 	bne.w	8001e08 <HAL_GPIO_Init+0x14>
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	372c      	adds	r7, #44	; 0x2c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002118:	e003      	b.n	8002122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	041a      	lsls	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e12b      	b.n	8002396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe ff52 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800218e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002190:	f001 f832 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a81      	ldr	r2, [pc, #516]	; (80023a0 <HAL_I2C_Init+0x274>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d807      	bhi.n	80021b0 <HAL_I2C_Init+0x84>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a80      	ldr	r2, [pc, #512]	; (80023a4 <HAL_I2C_Init+0x278>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	bf94      	ite	ls
 80021a8:	2301      	movls	r3, #1
 80021aa:	2300      	movhi	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e006      	b.n	80021be <HAL_I2C_Init+0x92>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a7d      	ldr	r2, [pc, #500]	; (80023a8 <HAL_I2C_Init+0x27c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0e7      	b.n	8002396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a78      	ldr	r2, [pc, #480]	; (80023ac <HAL_I2C_Init+0x280>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	; (80023a0 <HAL_I2C_Init+0x274>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d802      	bhi.n	8002200 <HAL_I2C_Init+0xd4>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	e009      	b.n	8002214 <HAL_I2C_Init+0xe8>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	4a69      	ldr	r2, [pc, #420]	; (80023b0 <HAL_I2C_Init+0x284>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	3301      	adds	r3, #1
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	495c      	ldr	r1, [pc, #368]	; (80023a0 <HAL_I2C_Init+0x274>)
 8002230:	428b      	cmp	r3, r1
 8002232:	d819      	bhi.n	8002268 <HAL_I2C_Init+0x13c>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e59      	subs	r1, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002248:	400b      	ands	r3, r1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_I2C_Init+0x138>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e59      	subs	r1, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fbb1 f3f3 	udiv	r3, r1, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002262:	e051      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 8002264:	2304      	movs	r3, #4
 8002266:	e04f      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d111      	bne.n	8002294 <HAL_I2C_Init+0x168>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e012      	b.n	80022ba <HAL_I2C_Init+0x18e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Init+0x196>
 80022be:	2301      	movs	r3, #1
 80022c0:	e022      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10e      	bne.n	80022e8 <HAL_I2C_Init+0x1bc>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e58      	subs	r0, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	440b      	add	r3, r1
 80022d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	6809      	ldr	r1, [r1, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6911      	ldr	r1, [r2, #16]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68d2      	ldr	r2, [r2, #12]
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	000186a0 	.word	0x000186a0
 80023a4:	001e847f 	.word	0x001e847f
 80023a8:	003d08ff 	.word	0x003d08ff
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	461a      	mov	r2, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	817b      	strh	r3, [r7, #10]
 80023c4:	4613      	mov	r3, r2
 80023c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff f8dc 	bl	8001584 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	f040 80e0 	bne.w	800259c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2319      	movs	r3, #25
 80023e2:	2201      	movs	r2, #1
 80023e4:	4970      	ldr	r1, [pc, #448]	; (80025a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f964 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0d3      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_I2C_Master_Transmit+0x50>
 8002400:	2302      	movs	r3, #2
 8002402:	e0cc      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d007      	beq.n	800242a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2210      	movs	r2, #16
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	893a      	ldrh	r2, [r7, #8]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_I2C_Master_Transmit+0x1f8>)
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800246c:	8979      	ldrh	r1, [r7, #10]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f89c 	bl	80025b0 <I2C_MasterRequestWrite>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e08d      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002498:	e066      	b.n	8002568 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa22 	bl	80028e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d107      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d11b      	bne.n	800253c <HAL_I2C_Master_Transmit+0x188>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	6a39      	ldr	r1, [r7, #32]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fa19 	bl	8002978 <I2C_WaitOnBTFFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002562:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e01a      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d194      	bne.n	800249a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000

080025b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d006      	beq.n	80025da <I2C_MasterRequestWrite+0x2a>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d003      	beq.n	80025da <I2C_MasterRequestWrite+0x2a>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d8:	d108      	bne.n	80025ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e00b      	b.n	8002604 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d107      	bne.n	8002604 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f84f 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262a:	d103      	bne.n	8002634 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e035      	b.n	80026a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002640:	d108      	bne.n	8002654 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	e01b      	b.n	800268c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002654:	897b      	ldrh	r3, [r7, #10]
 8002656:	11db      	asrs	r3, r3, #7
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f003 0306 	and.w	r3, r3, #6
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f063 030f 	orn	r3, r3, #15
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <I2C_MasterRequestWrite+0xfc>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f898 	bl	80027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e010      	b.n	80026a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002682:	897b      	ldrh	r3, [r7, #10]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <I2C_MasterRequestWrite+0x100>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f888 	bl	80027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	00010008 	.word	0x00010008
 80026b0:	00010002 	.word	0x00010002

080026b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c4:	e048      	b.n	8002758 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026cc:	d044      	beq.n	8002758 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe ff59 	bl	8001584 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d139      	bne.n	8002758 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10d      	bne.n	800270a <I2C_WaitOnFlagUntilTimeout+0x56>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	e00c      	b.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x70>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	43da      	mvns	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	429a      	cmp	r2, r3
 8002728:	d116      	bne.n	8002758 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e023      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10d      	bne.n	800277e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	43da      	mvns	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	e00c      	b.n	8002798 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	43da      	mvns	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	429a      	cmp	r2, r3
 800279c:	d093      	beq.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b6:	e071      	b.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	d123      	bne.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f043 0204 	orr.w	r2, r3, #4
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e067      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002816:	d041      	beq.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe feb4 	bl	8001584 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d136      	bne.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10c      	bne.n	8002852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf14      	ite	ne
 800284a:	2301      	movne	r3, #1
 800284c:	2300      	moveq	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e00b      	b.n	800286a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e021      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d10c      	bne.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e00b      	b.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4013      	ands	r3, r2
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f47f af6d 	bne.w	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f4:	e034      	b.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f886 	bl	8002a08 <I2C_IsAcknowledgeFailed>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e034      	b.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290c:	d028      	beq.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7fe fe39 	bl	8001584 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11d      	bne.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d016      	beq.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e007      	b.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d1c3      	bne.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002984:	e034      	b.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f83e 	bl	8002a08 <I2C_IsAcknowledgeFailed>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e034      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299c:	d028      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe fdf1 	bl	8001584 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11d      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d016      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d1c3      	bne.n	8002986 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d11b      	bne.n	8002a58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f043 0204 	orr.w	r2, r3, #4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e272      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8087 	beq.w	8002b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a84:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d00c      	beq.n	8002aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a90:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d112      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5e>
 8002a9c:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d06c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x12c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d168      	bne.n	8002b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e24c      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x76>
 8002acc:	4b80      	ldr	r3, [pc, #512]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a7f      	ldr	r2, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e02e      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x98>
 8002ae2:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b78      	ldr	r3, [pc, #480]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a77      	ldr	r2, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0xbc>
 8002b06:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a71      	ldr	r2, [pc, #452]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002b20:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6a      	ldr	r2, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a67      	ldr	r2, [pc, #412]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fd20 	bl	8001584 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fd1c 	bl	8001584 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e200      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0xe4>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fd0c 	bl	8001584 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fd08 	bl	8001584 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1ec      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x10c>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d063      	beq.n	8002c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9e:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002baa:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x18c>
 8002bb6:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d116      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x176>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e1c0      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4939      	ldr	r1, [pc, #228]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	e03a      	b.n	8002c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf8:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fcc1 	bl	8001584 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fe fcbd 	bl	8001584 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e1a1      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4927      	ldr	r1, [pc, #156]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fca0 	bl	8001584 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fc9c 	bl	8001584 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e180      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03a      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fc80 	bl	8001584 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe fc7c 	bl	8001584 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e160      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f000 faba 	bl	8003220 <RCC_Delay>
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fc66 	bl	8001584 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cba:	e00f      	b.n	8002cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fc62 	bl	8001584 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e146      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	42420000 	.word	0x42420000
 8002cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e9      	bne.n	8002cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a6 	beq.w	8002e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4a87      	ldr	r2, [pc, #540]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	61d3      	str	r3, [r2, #28]
 8002d12:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7e      	ldr	r2, [pc, #504]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fc23 	bl	8001584 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d42:	f7fe fc1f 	bl	8001584 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	; 0x64
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e103      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x312>
 8002d68:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	e02d      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x334>
 8002d7e:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a66      	ldr	r2, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	e01c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCC_OscConfig+0x356>
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a60      	ldr	r2, [pc, #384]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	6213      	str	r3, [r2, #32]
 8002dac:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a5d      	ldr	r2, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
 8002dba:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6213      	str	r3, [r2, #32]
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d015      	beq.n	8002e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fbd3 	bl	8001584 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fbcf 	bl	8001584 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0b1      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ee      	beq.n	8002de2 <HAL_RCC_OscConfig+0x37e>
 8002e04:	e014      	b.n	8002e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fbbd 	bl	8001584 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fbb9 	bl	8001584 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e09b      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ee      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e36:	4b3c      	ldr	r3, [pc, #240]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a3b      	ldr	r2, [pc, #236]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8087 	beq.w	8002f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d061      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d146      	bne.n	8002eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fb8d 	bl	8001584 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe fb89 	bl	8001584 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e06d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4921      	ldr	r1, [pc, #132]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a19      	ldr	r1, [r3, #32]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	491b      	ldr	r1, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fb5d 	bl	8001584 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe fb59 	bl	8001584 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e03d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x46a>
 8002eec:	e035      	b.n	8002f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fb46 	bl	8001584 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fb42 	bl	8001584 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e026      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x498>
 8002f1a:	e01e      	b.n	8002f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e019      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x500>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0d0      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d910      	bls.n	8002fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 0207 	bic.w	r2, r3, #7
 8002f92:	4965      	ldr	r1, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d040      	beq.n	8003088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d115      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e073      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06b      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4936      	ldr	r1, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe fa94 	bl	8001584 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe fa90 	bl	8001584 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e053      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d210      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	4922      	ldr	r1, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f821 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1cc>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1d0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f9f2 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	080060d4 	.word	0x080060d4
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x30>
 8003166:	2b08      	cmp	r3, #8
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x36>
 800316a:	e027      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	e027      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0c5b      	lsrs	r3, r3, #17
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800319e:	fb03 f202 	mul.w	r2, r3, r2
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e004      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	613b      	str	r3, [r7, #16]
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	613b      	str	r3, [r7, #16]
      break;
 80031c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c2:	693b      	ldr	r3, [r7, #16]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	007a1200 	.word	0x007a1200
 80031d8:	080060ec 	.word	0x080060ec
 80031dc:	080060fc 	.word	0x080060fc
 80031e0:	003d0900 	.word	0x003d0900

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000000 	.word	0x20000000

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff2 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	080060e4 	.word	0x080060e4

08003220 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <RCC_Delay+0x34>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <RCC_Delay+0x38>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0a5b      	lsrs	r3, r3, #9
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800323c:	bf00      	nop
  }
  while (Delay --);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	60fa      	str	r2, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f9      	bne.n	800323c <RCC_Delay+0x1c>
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	20000000 	.word	0x20000000
 8003258:	10624dd3 	.word	0x10624dd3

0800325c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d07d      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10d      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
 8003294:	4b49      	ldr	r3, [pc, #292]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d118      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a42      	ldr	r2, [pc, #264]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032bc:	f7fe f962 	bl	8001584 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	e008      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c4:	f7fe f95e 	bl	8001584 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e06d      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e2:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d027      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003300:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003310:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003316:	4a29      	ldr	r2, [pc, #164]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d014      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe f92d 	bl	8001584 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fe f929 	bl	8001584 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	; 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e036      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ee      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4917      	ldr	r1, [pc, #92]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	4313      	orrs	r3, r2
 8003360:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003372:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	490b      	ldr	r1, [pc, #44]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4904      	ldr	r1, [pc, #16]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
 80033c4:	42420440 	.word	0x42420440

080033c8 <__cvt>:
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ce:	461f      	mov	r7, r3
 80033d0:	bfbb      	ittet	lt
 80033d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	461f      	movlt	r7, r3
 80033d8:	2300      	movge	r3, #0
 80033da:	232d      	movlt	r3, #45	; 0x2d
 80033dc:	b088      	sub	sp, #32
 80033de:	4614      	mov	r4, r2
 80033e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80033e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80033e4:	7013      	strb	r3, [r2, #0]
 80033e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80033e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80033ec:	f023 0820 	bic.w	r8, r3, #32
 80033f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033f4:	d005      	beq.n	8003402 <__cvt+0x3a>
 80033f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80033fa:	d100      	bne.n	80033fe <__cvt+0x36>
 80033fc:	3501      	adds	r5, #1
 80033fe:	2302      	movs	r3, #2
 8003400:	e000      	b.n	8003404 <__cvt+0x3c>
 8003402:	2303      	movs	r3, #3
 8003404:	aa07      	add	r2, sp, #28
 8003406:	9204      	str	r2, [sp, #16]
 8003408:	aa06      	add	r2, sp, #24
 800340a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800340e:	e9cd 3500 	strd	r3, r5, [sp]
 8003412:	4622      	mov	r2, r4
 8003414:	463b      	mov	r3, r7
 8003416:	f000 fde7 	bl	8003fe8 <_dtoa_r>
 800341a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800341e:	4606      	mov	r6, r0
 8003420:	d102      	bne.n	8003428 <__cvt+0x60>
 8003422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003424:	07db      	lsls	r3, r3, #31
 8003426:	d522      	bpl.n	800346e <__cvt+0xa6>
 8003428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800342c:	eb06 0905 	add.w	r9, r6, r5
 8003430:	d110      	bne.n	8003454 <__cvt+0x8c>
 8003432:	7833      	ldrb	r3, [r6, #0]
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d10a      	bne.n	800344e <__cvt+0x86>
 8003438:	2200      	movs	r2, #0
 800343a:	2300      	movs	r3, #0
 800343c:	4620      	mov	r0, r4
 800343e:	4639      	mov	r1, r7
 8003440:	f7fd fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8003444:	b918      	cbnz	r0, 800344e <__cvt+0x86>
 8003446:	f1c5 0501 	rsb	r5, r5, #1
 800344a:	f8ca 5000 	str.w	r5, [sl]
 800344e:	f8da 3000 	ldr.w	r3, [sl]
 8003452:	4499      	add	r9, r3
 8003454:	2200      	movs	r2, #0
 8003456:	2300      	movs	r3, #0
 8003458:	4620      	mov	r0, r4
 800345a:	4639      	mov	r1, r7
 800345c:	f7fd faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8003460:	b108      	cbz	r0, 8003466 <__cvt+0x9e>
 8003462:	f8cd 901c 	str.w	r9, [sp, #28]
 8003466:	2230      	movs	r2, #48	; 0x30
 8003468:	9b07      	ldr	r3, [sp, #28]
 800346a:	454b      	cmp	r3, r9
 800346c:	d307      	bcc.n	800347e <__cvt+0xb6>
 800346e:	4630      	mov	r0, r6
 8003470:	9b07      	ldr	r3, [sp, #28]
 8003472:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003474:	1b9b      	subs	r3, r3, r6
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	b008      	add	sp, #32
 800347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347e:	1c59      	adds	r1, r3, #1
 8003480:	9107      	str	r1, [sp, #28]
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e7f0      	b.n	8003468 <__cvt+0xa0>

08003486 <__exponent>:
 8003486:	4603      	mov	r3, r0
 8003488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800348a:	2900      	cmp	r1, #0
 800348c:	f803 2b02 	strb.w	r2, [r3], #2
 8003490:	bfb6      	itet	lt
 8003492:	222d      	movlt	r2, #45	; 0x2d
 8003494:	222b      	movge	r2, #43	; 0x2b
 8003496:	4249      	neglt	r1, r1
 8003498:	2909      	cmp	r1, #9
 800349a:	7042      	strb	r2, [r0, #1]
 800349c:	dd2a      	ble.n	80034f4 <__exponent+0x6e>
 800349e:	f10d 0207 	add.w	r2, sp, #7
 80034a2:	4617      	mov	r7, r2
 80034a4:	260a      	movs	r6, #10
 80034a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80034aa:	4694      	mov	ip, r2
 80034ac:	fb06 1415 	mls	r4, r6, r5, r1
 80034b0:	3430      	adds	r4, #48	; 0x30
 80034b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80034b6:	460c      	mov	r4, r1
 80034b8:	2c63      	cmp	r4, #99	; 0x63
 80034ba:	4629      	mov	r1, r5
 80034bc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80034c0:	dcf1      	bgt.n	80034a6 <__exponent+0x20>
 80034c2:	3130      	adds	r1, #48	; 0x30
 80034c4:	f1ac 0402 	sub.w	r4, ip, #2
 80034c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80034cc:	4622      	mov	r2, r4
 80034ce:	1c41      	adds	r1, r0, #1
 80034d0:	42ba      	cmp	r2, r7
 80034d2:	d30a      	bcc.n	80034ea <__exponent+0x64>
 80034d4:	f10d 0209 	add.w	r2, sp, #9
 80034d8:	eba2 020c 	sub.w	r2, r2, ip
 80034dc:	42bc      	cmp	r4, r7
 80034de:	bf88      	it	hi
 80034e0:	2200      	movhi	r2, #0
 80034e2:	4413      	add	r3, r2
 80034e4:	1a18      	subs	r0, r3, r0
 80034e6:	b003      	add	sp, #12
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80034ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80034f2:	e7ed      	b.n	80034d0 <__exponent+0x4a>
 80034f4:	2330      	movs	r3, #48	; 0x30
 80034f6:	3130      	adds	r1, #48	; 0x30
 80034f8:	7083      	strb	r3, [r0, #2]
 80034fa:	70c1      	strb	r1, [r0, #3]
 80034fc:	1d03      	adds	r3, r0, #4
 80034fe:	e7f1      	b.n	80034e4 <__exponent+0x5e>

08003500 <_printf_float>:
 8003500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003504:	b091      	sub	sp, #68	; 0x44
 8003506:	460c      	mov	r4, r1
 8003508:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800350c:	4616      	mov	r6, r2
 800350e:	461f      	mov	r7, r3
 8003510:	4605      	mov	r5, r0
 8003512:	f000 fca1 	bl	8003e58 <_localeconv_r>
 8003516:	6803      	ldr	r3, [r0, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	9309      	str	r3, [sp, #36]	; 0x24
 800351c:	f7fc fe18 	bl	8000150 <strlen>
 8003520:	2300      	movs	r3, #0
 8003522:	930e      	str	r3, [sp, #56]	; 0x38
 8003524:	f8d8 3000 	ldr.w	r3, [r8]
 8003528:	900a      	str	r0, [sp, #40]	; 0x28
 800352a:	3307      	adds	r3, #7
 800352c:	f023 0307 	bic.w	r3, r3, #7
 8003530:	f103 0208 	add.w	r2, r3, #8
 8003534:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003538:	f8d4 b000 	ldr.w	fp, [r4]
 800353c:	f8c8 2000 	str.w	r2, [r8]
 8003540:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003544:	4652      	mov	r2, sl
 8003546:	4643      	mov	r3, r8
 8003548:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800354c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003550:	930b      	str	r3, [sp, #44]	; 0x2c
 8003552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003556:	4650      	mov	r0, sl
 8003558:	4b9c      	ldr	r3, [pc, #624]	; (80037cc <_printf_float+0x2cc>)
 800355a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800355c:	f7fd fa56 	bl	8000a0c <__aeabi_dcmpun>
 8003560:	bb70      	cbnz	r0, 80035c0 <_printf_float+0xc0>
 8003562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003566:	4650      	mov	r0, sl
 8003568:	4b98      	ldr	r3, [pc, #608]	; (80037cc <_printf_float+0x2cc>)
 800356a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800356c:	f7fd fa30 	bl	80009d0 <__aeabi_dcmple>
 8003570:	bb30      	cbnz	r0, 80035c0 <_printf_float+0xc0>
 8003572:	2200      	movs	r2, #0
 8003574:	2300      	movs	r3, #0
 8003576:	4650      	mov	r0, sl
 8003578:	4641      	mov	r1, r8
 800357a:	f7fd fa1f 	bl	80009bc <__aeabi_dcmplt>
 800357e:	b110      	cbz	r0, 8003586 <_printf_float+0x86>
 8003580:	232d      	movs	r3, #45	; 0x2d
 8003582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003586:	4a92      	ldr	r2, [pc, #584]	; (80037d0 <_printf_float+0x2d0>)
 8003588:	4b92      	ldr	r3, [pc, #584]	; (80037d4 <_printf_float+0x2d4>)
 800358a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800358e:	bf94      	ite	ls
 8003590:	4690      	movls	r8, r2
 8003592:	4698      	movhi	r8, r3
 8003594:	2303      	movs	r3, #3
 8003596:	f04f 0a00 	mov.w	sl, #0
 800359a:	6123      	str	r3, [r4, #16]
 800359c:	f02b 0304 	bic.w	r3, fp, #4
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	4633      	mov	r3, r6
 80035a4:	4621      	mov	r1, r4
 80035a6:	4628      	mov	r0, r5
 80035a8:	9700      	str	r7, [sp, #0]
 80035aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80035ac:	f000 f9d6 	bl	800395c <_printf_common>
 80035b0:	3001      	adds	r0, #1
 80035b2:	f040 8090 	bne.w	80036d6 <_printf_float+0x1d6>
 80035b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ba:	b011      	add	sp, #68	; 0x44
 80035bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c0:	4652      	mov	r2, sl
 80035c2:	4643      	mov	r3, r8
 80035c4:	4650      	mov	r0, sl
 80035c6:	4641      	mov	r1, r8
 80035c8:	f7fd fa20 	bl	8000a0c <__aeabi_dcmpun>
 80035cc:	b148      	cbz	r0, 80035e2 <_printf_float+0xe2>
 80035ce:	f1b8 0f00 	cmp.w	r8, #0
 80035d2:	bfb8      	it	lt
 80035d4:	232d      	movlt	r3, #45	; 0x2d
 80035d6:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <_printf_float+0x2d8>)
 80035d8:	bfb8      	it	lt
 80035da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80035de:	4b7f      	ldr	r3, [pc, #508]	; (80037dc <_printf_float+0x2dc>)
 80035e0:	e7d3      	b.n	800358a <_printf_float+0x8a>
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	d142      	bne.n	8003672 <_printf_float+0x172>
 80035ec:	2306      	movs	r3, #6
 80035ee:	6063      	str	r3, [r4, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	9206      	str	r2, [sp, #24]
 80035f4:	aa0e      	add	r2, sp, #56	; 0x38
 80035f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80035fa:	aa0d      	add	r2, sp, #52	; 0x34
 80035fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003600:	9203      	str	r2, [sp, #12]
 8003602:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003606:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	4652      	mov	r2, sl
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	4628      	mov	r0, r5
 8003614:	4643      	mov	r3, r8
 8003616:	910b      	str	r1, [sp, #44]	; 0x2c
 8003618:	f7ff fed6 	bl	80033c8 <__cvt>
 800361c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800361e:	4680      	mov	r8, r0
 8003620:	2947      	cmp	r1, #71	; 0x47
 8003622:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003624:	d108      	bne.n	8003638 <_printf_float+0x138>
 8003626:	1cc8      	adds	r0, r1, #3
 8003628:	db02      	blt.n	8003630 <_printf_float+0x130>
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	4299      	cmp	r1, r3
 800362e:	dd40      	ble.n	80036b2 <_printf_float+0x1b2>
 8003630:	f1a9 0902 	sub.w	r9, r9, #2
 8003634:	fa5f f989 	uxtb.w	r9, r9
 8003638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800363c:	d81f      	bhi.n	800367e <_printf_float+0x17e>
 800363e:	464a      	mov	r2, r9
 8003640:	3901      	subs	r1, #1
 8003642:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003646:	910d      	str	r1, [sp, #52]	; 0x34
 8003648:	f7ff ff1d 	bl	8003486 <__exponent>
 800364c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800364e:	4682      	mov	sl, r0
 8003650:	1813      	adds	r3, r2, r0
 8003652:	2a01      	cmp	r2, #1
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	dc02      	bgt.n	800365e <_printf_float+0x15e>
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	07d2      	lsls	r2, r2, #31
 800365c:	d501      	bpl.n	8003662 <_printf_float+0x162>
 800365e:	3301      	adds	r3, #1
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003666:	2b00      	cmp	r3, #0
 8003668:	d09b      	beq.n	80035a2 <_printf_float+0xa2>
 800366a:	232d      	movs	r3, #45	; 0x2d
 800366c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003670:	e797      	b.n	80035a2 <_printf_float+0xa2>
 8003672:	2947      	cmp	r1, #71	; 0x47
 8003674:	d1bc      	bne.n	80035f0 <_printf_float+0xf0>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ba      	bne.n	80035f0 <_printf_float+0xf0>
 800367a:	2301      	movs	r3, #1
 800367c:	e7b7      	b.n	80035ee <_printf_float+0xee>
 800367e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003682:	d118      	bne.n	80036b6 <_printf_float+0x1b6>
 8003684:	2900      	cmp	r1, #0
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	dd0b      	ble.n	80036a2 <_printf_float+0x1a2>
 800368a:	6121      	str	r1, [r4, #16]
 800368c:	b913      	cbnz	r3, 8003694 <_printf_float+0x194>
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	07d0      	lsls	r0, r2, #31
 8003692:	d502      	bpl.n	800369a <_printf_float+0x19a>
 8003694:	3301      	adds	r3, #1
 8003696:	440b      	add	r3, r1
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	f04f 0a00 	mov.w	sl, #0
 800369e:	65a1      	str	r1, [r4, #88]	; 0x58
 80036a0:	e7df      	b.n	8003662 <_printf_float+0x162>
 80036a2:	b913      	cbnz	r3, 80036aa <_printf_float+0x1aa>
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	07d2      	lsls	r2, r2, #31
 80036a8:	d501      	bpl.n	80036ae <_printf_float+0x1ae>
 80036aa:	3302      	adds	r3, #2
 80036ac:	e7f4      	b.n	8003698 <_printf_float+0x198>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e7f2      	b.n	8003698 <_printf_float+0x198>
 80036b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80036b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036b8:	4299      	cmp	r1, r3
 80036ba:	db05      	blt.n	80036c8 <_printf_float+0x1c8>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	6121      	str	r1, [r4, #16]
 80036c0:	07d8      	lsls	r0, r3, #31
 80036c2:	d5ea      	bpl.n	800369a <_printf_float+0x19a>
 80036c4:	1c4b      	adds	r3, r1, #1
 80036c6:	e7e7      	b.n	8003698 <_printf_float+0x198>
 80036c8:	2900      	cmp	r1, #0
 80036ca:	bfcc      	ite	gt
 80036cc:	2201      	movgt	r2, #1
 80036ce:	f1c1 0202 	rsble	r2, r1, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	e7e0      	b.n	8003698 <_printf_float+0x198>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	055a      	lsls	r2, r3, #21
 80036da:	d407      	bmi.n	80036ec <_printf_float+0x1ec>
 80036dc:	6923      	ldr	r3, [r4, #16]
 80036de:	4642      	mov	r2, r8
 80036e0:	4631      	mov	r1, r6
 80036e2:	4628      	mov	r0, r5
 80036e4:	47b8      	blx	r7
 80036e6:	3001      	adds	r0, #1
 80036e8:	d12b      	bne.n	8003742 <_printf_float+0x242>
 80036ea:	e764      	b.n	80035b6 <_printf_float+0xb6>
 80036ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80036f0:	f240 80dd 	bls.w	80038ae <_printf_float+0x3ae>
 80036f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036f8:	2200      	movs	r2, #0
 80036fa:	2300      	movs	r3, #0
 80036fc:	f7fd f954 	bl	80009a8 <__aeabi_dcmpeq>
 8003700:	2800      	cmp	r0, #0
 8003702:	d033      	beq.n	800376c <_printf_float+0x26c>
 8003704:	2301      	movs	r3, #1
 8003706:	4631      	mov	r1, r6
 8003708:	4628      	mov	r0, r5
 800370a:	4a35      	ldr	r2, [pc, #212]	; (80037e0 <_printf_float+0x2e0>)
 800370c:	47b8      	blx	r7
 800370e:	3001      	adds	r0, #1
 8003710:	f43f af51 	beq.w	80035b6 <_printf_float+0xb6>
 8003714:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003718:	429a      	cmp	r2, r3
 800371a:	db02      	blt.n	8003722 <_printf_float+0x222>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	07d8      	lsls	r0, r3, #31
 8003720:	d50f      	bpl.n	8003742 <_printf_float+0x242>
 8003722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	47b8      	blx	r7
 800372c:	3001      	adds	r0, #1
 800372e:	f43f af42 	beq.w	80035b6 <_printf_float+0xb6>
 8003732:	f04f 0800 	mov.w	r8, #0
 8003736:	f104 091a 	add.w	r9, r4, #26
 800373a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800373c:	3b01      	subs	r3, #1
 800373e:	4543      	cmp	r3, r8
 8003740:	dc09      	bgt.n	8003756 <_printf_float+0x256>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	079b      	lsls	r3, r3, #30
 8003746:	f100 8104 	bmi.w	8003952 <_printf_float+0x452>
 800374a:	68e0      	ldr	r0, [r4, #12]
 800374c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800374e:	4298      	cmp	r0, r3
 8003750:	bfb8      	it	lt
 8003752:	4618      	movlt	r0, r3
 8003754:	e731      	b.n	80035ba <_printf_float+0xba>
 8003756:	2301      	movs	r3, #1
 8003758:	464a      	mov	r2, r9
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	f43f af28 	beq.w	80035b6 <_printf_float+0xb6>
 8003766:	f108 0801 	add.w	r8, r8, #1
 800376a:	e7e6      	b.n	800373a <_printf_float+0x23a>
 800376c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800376e:	2b00      	cmp	r3, #0
 8003770:	dc38      	bgt.n	80037e4 <_printf_float+0x2e4>
 8003772:	2301      	movs	r3, #1
 8003774:	4631      	mov	r1, r6
 8003776:	4628      	mov	r0, r5
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <_printf_float+0x2e0>)
 800377a:	47b8      	blx	r7
 800377c:	3001      	adds	r0, #1
 800377e:	f43f af1a 	beq.w	80035b6 <_printf_float+0xb6>
 8003782:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003786:	4313      	orrs	r3, r2
 8003788:	d102      	bne.n	8003790 <_printf_float+0x290>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	07d9      	lsls	r1, r3, #31
 800378e:	d5d8      	bpl.n	8003742 <_printf_float+0x242>
 8003790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	47b8      	blx	r7
 800379a:	3001      	adds	r0, #1
 800379c:	f43f af0b 	beq.w	80035b6 <_printf_float+0xb6>
 80037a0:	f04f 0900 	mov.w	r9, #0
 80037a4:	f104 0a1a 	add.w	sl, r4, #26
 80037a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037aa:	425b      	negs	r3, r3
 80037ac:	454b      	cmp	r3, r9
 80037ae:	dc01      	bgt.n	80037b4 <_printf_float+0x2b4>
 80037b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037b2:	e794      	b.n	80036de <_printf_float+0x1de>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4652      	mov	r2, sl
 80037b8:	4631      	mov	r1, r6
 80037ba:	4628      	mov	r0, r5
 80037bc:	47b8      	blx	r7
 80037be:	3001      	adds	r0, #1
 80037c0:	f43f aef9 	beq.w	80035b6 <_printf_float+0xb6>
 80037c4:	f109 0901 	add.w	r9, r9, #1
 80037c8:	e7ee      	b.n	80037a8 <_printf_float+0x2a8>
 80037ca:	bf00      	nop
 80037cc:	7fefffff 	.word	0x7fefffff
 80037d0:	080060fe 	.word	0x080060fe
 80037d4:	08006102 	.word	0x08006102
 80037d8:	08006106 	.word	0x08006106
 80037dc:	0800610a 	.word	0x0800610a
 80037e0:	0800610e 	.word	0x0800610e
 80037e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037e8:	429a      	cmp	r2, r3
 80037ea:	bfa8      	it	ge
 80037ec:	461a      	movge	r2, r3
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	4691      	mov	r9, r2
 80037f2:	dc37      	bgt.n	8003864 <_printf_float+0x364>
 80037f4:	f04f 0b00 	mov.w	fp, #0
 80037f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037fc:	f104 021a 	add.w	r2, r4, #26
 8003800:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003804:	ebaa 0309 	sub.w	r3, sl, r9
 8003808:	455b      	cmp	r3, fp
 800380a:	dc33      	bgt.n	8003874 <_printf_float+0x374>
 800380c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003810:	429a      	cmp	r2, r3
 8003812:	db3b      	blt.n	800388c <_printf_float+0x38c>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	07da      	lsls	r2, r3, #31
 8003818:	d438      	bmi.n	800388c <_printf_float+0x38c>
 800381a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800381e:	eba2 0903 	sub.w	r9, r2, r3
 8003822:	eba2 020a 	sub.w	r2, r2, sl
 8003826:	4591      	cmp	r9, r2
 8003828:	bfa8      	it	ge
 800382a:	4691      	movge	r9, r2
 800382c:	f1b9 0f00 	cmp.w	r9, #0
 8003830:	dc34      	bgt.n	800389c <_printf_float+0x39c>
 8003832:	f04f 0800 	mov.w	r8, #0
 8003836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800383a:	f104 0a1a 	add.w	sl, r4, #26
 800383e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	eba3 0309 	sub.w	r3, r3, r9
 8003848:	4543      	cmp	r3, r8
 800384a:	f77f af7a 	ble.w	8003742 <_printf_float+0x242>
 800384e:	2301      	movs	r3, #1
 8003850:	4652      	mov	r2, sl
 8003852:	4631      	mov	r1, r6
 8003854:	4628      	mov	r0, r5
 8003856:	47b8      	blx	r7
 8003858:	3001      	adds	r0, #1
 800385a:	f43f aeac 	beq.w	80035b6 <_printf_float+0xb6>
 800385e:	f108 0801 	add.w	r8, r8, #1
 8003862:	e7ec      	b.n	800383e <_printf_float+0x33e>
 8003864:	4613      	mov	r3, r2
 8003866:	4631      	mov	r1, r6
 8003868:	4642      	mov	r2, r8
 800386a:	4628      	mov	r0, r5
 800386c:	47b8      	blx	r7
 800386e:	3001      	adds	r0, #1
 8003870:	d1c0      	bne.n	80037f4 <_printf_float+0x2f4>
 8003872:	e6a0      	b.n	80035b6 <_printf_float+0xb6>
 8003874:	2301      	movs	r3, #1
 8003876:	4631      	mov	r1, r6
 8003878:	4628      	mov	r0, r5
 800387a:	920b      	str	r2, [sp, #44]	; 0x2c
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	f43f ae99 	beq.w	80035b6 <_printf_float+0xb6>
 8003884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003886:	f10b 0b01 	add.w	fp, fp, #1
 800388a:	e7b9      	b.n	8003800 <_printf_float+0x300>
 800388c:	4631      	mov	r1, r6
 800388e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003892:	4628      	mov	r0, r5
 8003894:	47b8      	blx	r7
 8003896:	3001      	adds	r0, #1
 8003898:	d1bf      	bne.n	800381a <_printf_float+0x31a>
 800389a:	e68c      	b.n	80035b6 <_printf_float+0xb6>
 800389c:	464b      	mov	r3, r9
 800389e:	4631      	mov	r1, r6
 80038a0:	4628      	mov	r0, r5
 80038a2:	eb08 020a 	add.w	r2, r8, sl
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	d1c2      	bne.n	8003832 <_printf_float+0x332>
 80038ac:	e683      	b.n	80035b6 <_printf_float+0xb6>
 80038ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	dc01      	bgt.n	80038b8 <_printf_float+0x3b8>
 80038b4:	07db      	lsls	r3, r3, #31
 80038b6:	d539      	bpl.n	800392c <_printf_float+0x42c>
 80038b8:	2301      	movs	r3, #1
 80038ba:	4642      	mov	r2, r8
 80038bc:	4631      	mov	r1, r6
 80038be:	4628      	mov	r0, r5
 80038c0:	47b8      	blx	r7
 80038c2:	3001      	adds	r0, #1
 80038c4:	f43f ae77 	beq.w	80035b6 <_printf_float+0xb6>
 80038c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b8      	blx	r7
 80038d2:	3001      	adds	r0, #1
 80038d4:	f43f ae6f 	beq.w	80035b6 <_printf_float+0xb6>
 80038d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038dc:	2200      	movs	r2, #0
 80038de:	2300      	movs	r3, #0
 80038e0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80038e4:	f7fd f860 	bl	80009a8 <__aeabi_dcmpeq>
 80038e8:	b9d8      	cbnz	r0, 8003922 <_printf_float+0x422>
 80038ea:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80038ee:	f108 0201 	add.w	r2, r8, #1
 80038f2:	4631      	mov	r1, r6
 80038f4:	4628      	mov	r0, r5
 80038f6:	47b8      	blx	r7
 80038f8:	3001      	adds	r0, #1
 80038fa:	d10e      	bne.n	800391a <_printf_float+0x41a>
 80038fc:	e65b      	b.n	80035b6 <_printf_float+0xb6>
 80038fe:	2301      	movs	r3, #1
 8003900:	464a      	mov	r2, r9
 8003902:	4631      	mov	r1, r6
 8003904:	4628      	mov	r0, r5
 8003906:	47b8      	blx	r7
 8003908:	3001      	adds	r0, #1
 800390a:	f43f ae54 	beq.w	80035b6 <_printf_float+0xb6>
 800390e:	f108 0801 	add.w	r8, r8, #1
 8003912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003914:	3b01      	subs	r3, #1
 8003916:	4543      	cmp	r3, r8
 8003918:	dcf1      	bgt.n	80038fe <_printf_float+0x3fe>
 800391a:	4653      	mov	r3, sl
 800391c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003920:	e6de      	b.n	80036e0 <_printf_float+0x1e0>
 8003922:	f04f 0800 	mov.w	r8, #0
 8003926:	f104 091a 	add.w	r9, r4, #26
 800392a:	e7f2      	b.n	8003912 <_printf_float+0x412>
 800392c:	2301      	movs	r3, #1
 800392e:	4642      	mov	r2, r8
 8003930:	e7df      	b.n	80038f2 <_printf_float+0x3f2>
 8003932:	2301      	movs	r3, #1
 8003934:	464a      	mov	r2, r9
 8003936:	4631      	mov	r1, r6
 8003938:	4628      	mov	r0, r5
 800393a:	47b8      	blx	r7
 800393c:	3001      	adds	r0, #1
 800393e:	f43f ae3a 	beq.w	80035b6 <_printf_float+0xb6>
 8003942:	f108 0801 	add.w	r8, r8, #1
 8003946:	68e3      	ldr	r3, [r4, #12]
 8003948:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800394a:	1a5b      	subs	r3, r3, r1
 800394c:	4543      	cmp	r3, r8
 800394e:	dcf0      	bgt.n	8003932 <_printf_float+0x432>
 8003950:	e6fb      	b.n	800374a <_printf_float+0x24a>
 8003952:	f04f 0800 	mov.w	r8, #0
 8003956:	f104 0919 	add.w	r9, r4, #25
 800395a:	e7f4      	b.n	8003946 <_printf_float+0x446>

0800395c <_printf_common>:
 800395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	4616      	mov	r6, r2
 8003962:	4699      	mov	r9, r3
 8003964:	688a      	ldr	r2, [r1, #8]
 8003966:	690b      	ldr	r3, [r1, #16]
 8003968:	4607      	mov	r7, r0
 800396a:	4293      	cmp	r3, r2
 800396c:	bfb8      	it	lt
 800396e:	4613      	movlt	r3, r2
 8003970:	6033      	str	r3, [r6, #0]
 8003972:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003976:	460c      	mov	r4, r1
 8003978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800397c:	b10a      	cbz	r2, 8003982 <_printf_common+0x26>
 800397e:	3301      	adds	r3, #1
 8003980:	6033      	str	r3, [r6, #0]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	0699      	lsls	r1, r3, #26
 8003986:	bf42      	ittt	mi
 8003988:	6833      	ldrmi	r3, [r6, #0]
 800398a:	3302      	addmi	r3, #2
 800398c:	6033      	strmi	r3, [r6, #0]
 800398e:	6825      	ldr	r5, [r4, #0]
 8003990:	f015 0506 	ands.w	r5, r5, #6
 8003994:	d106      	bne.n	80039a4 <_printf_common+0x48>
 8003996:	f104 0a19 	add.w	sl, r4, #25
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	6832      	ldr	r2, [r6, #0]
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dc2b      	bgt.n	80039fc <_printf_common+0xa0>
 80039a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039a8:	1e13      	subs	r3, r2, #0
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	bf18      	it	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	0692      	lsls	r2, r2, #26
 80039b2:	d430      	bmi.n	8003a16 <_printf_common+0xba>
 80039b4:	4649      	mov	r1, r9
 80039b6:	4638      	mov	r0, r7
 80039b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039bc:	47c0      	blx	r8
 80039be:	3001      	adds	r0, #1
 80039c0:	d023      	beq.n	8003a0a <_printf_common+0xae>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	6922      	ldr	r2, [r4, #16]
 80039c6:	f003 0306 	and.w	r3, r3, #6
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf14      	ite	ne
 80039ce:	2500      	movne	r5, #0
 80039d0:	6833      	ldreq	r3, [r6, #0]
 80039d2:	f04f 0600 	mov.w	r6, #0
 80039d6:	bf08      	it	eq
 80039d8:	68e5      	ldreq	r5, [r4, #12]
 80039da:	f104 041a 	add.w	r4, r4, #26
 80039de:	bf08      	it	eq
 80039e0:	1aed      	subeq	r5, r5, r3
 80039e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039e6:	bf08      	it	eq
 80039e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bfc4      	itt	gt
 80039f0:	1a9b      	subgt	r3, r3, r2
 80039f2:	18ed      	addgt	r5, r5, r3
 80039f4:	42b5      	cmp	r5, r6
 80039f6:	d11a      	bne.n	8003a2e <_printf_common+0xd2>
 80039f8:	2000      	movs	r0, #0
 80039fa:	e008      	b.n	8003a0e <_printf_common+0xb2>
 80039fc:	2301      	movs	r3, #1
 80039fe:	4652      	mov	r2, sl
 8003a00:	4649      	mov	r1, r9
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c0      	blx	r8
 8003a06:	3001      	adds	r0, #1
 8003a08:	d103      	bne.n	8003a12 <_printf_common+0xb6>
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a12:	3501      	adds	r5, #1
 8003a14:	e7c1      	b.n	800399a <_printf_common+0x3e>
 8003a16:	2030      	movs	r0, #48	; 0x30
 8003a18:	18e1      	adds	r1, r4, r3
 8003a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a24:	4422      	add	r2, r4
 8003a26:	3302      	adds	r3, #2
 8003a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a2c:	e7c2      	b.n	80039b4 <_printf_common+0x58>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4622      	mov	r2, r4
 8003a32:	4649      	mov	r1, r9
 8003a34:	4638      	mov	r0, r7
 8003a36:	47c0      	blx	r8
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d0e6      	beq.n	8003a0a <_printf_common+0xae>
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7d9      	b.n	80039f4 <_printf_common+0x98>

08003a40 <_printf_i>:
 8003a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	7e0f      	ldrb	r7, [r1, #24]
 8003a46:	4691      	mov	r9, r2
 8003a48:	2f78      	cmp	r7, #120	; 0x78
 8003a4a:	4680      	mov	r8, r0
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	469a      	mov	sl, r3
 8003a50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a56:	d807      	bhi.n	8003a68 <_printf_i+0x28>
 8003a58:	2f62      	cmp	r7, #98	; 0x62
 8003a5a:	d80a      	bhi.n	8003a72 <_printf_i+0x32>
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	f000 80d5 	beq.w	8003c0c <_printf_i+0x1cc>
 8003a62:	2f58      	cmp	r7, #88	; 0x58
 8003a64:	f000 80c1 	beq.w	8003bea <_printf_i+0x1aa>
 8003a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a70:	e03a      	b.n	8003ae8 <_printf_i+0xa8>
 8003a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a76:	2b15      	cmp	r3, #21
 8003a78:	d8f6      	bhi.n	8003a68 <_printf_i+0x28>
 8003a7a:	a101      	add	r1, pc, #4	; (adr r1, 8003a80 <_printf_i+0x40>)
 8003a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a80:	08003ad9 	.word	0x08003ad9
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003a69 	.word	0x08003a69
 8003a8c:	08003a69 	.word	0x08003a69
 8003a90:	08003a69 	.word	0x08003a69
 8003a94:	08003a69 	.word	0x08003a69
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003a69 	.word	0x08003a69
 8003aa0:	08003a69 	.word	0x08003a69
 8003aa4:	08003a69 	.word	0x08003a69
 8003aa8:	08003a69 	.word	0x08003a69
 8003aac:	08003bf3 	.word	0x08003bf3
 8003ab0:	08003b19 	.word	0x08003b19
 8003ab4:	08003bad 	.word	0x08003bad
 8003ab8:	08003a69 	.word	0x08003a69
 8003abc:	08003a69 	.word	0x08003a69
 8003ac0:	08003c15 	.word	0x08003c15
 8003ac4:	08003a69 	.word	0x08003a69
 8003ac8:	08003b19 	.word	0x08003b19
 8003acc:	08003a69 	.word	0x08003a69
 8003ad0:	08003a69 	.word	0x08003a69
 8003ad4:	08003bb5 	.word	0x08003bb5
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	602a      	str	r2, [r5, #0]
 8003ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0a0      	b.n	8003c2e <_printf_i+0x1ee>
 8003aec:	6820      	ldr	r0, [r4, #0]
 8003aee:	682b      	ldr	r3, [r5, #0]
 8003af0:	0607      	lsls	r7, r0, #24
 8003af2:	f103 0104 	add.w	r1, r3, #4
 8003af6:	6029      	str	r1, [r5, #0]
 8003af8:	d501      	bpl.n	8003afe <_printf_i+0xbe>
 8003afa:	681e      	ldr	r6, [r3, #0]
 8003afc:	e003      	b.n	8003b06 <_printf_i+0xc6>
 8003afe:	0646      	lsls	r6, r0, #25
 8003b00:	d5fb      	bpl.n	8003afa <_printf_i+0xba>
 8003b02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b06:	2e00      	cmp	r6, #0
 8003b08:	da03      	bge.n	8003b12 <_printf_i+0xd2>
 8003b0a:	232d      	movs	r3, #45	; 0x2d
 8003b0c:	4276      	negs	r6, r6
 8003b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b12:	230a      	movs	r3, #10
 8003b14:	4859      	ldr	r0, [pc, #356]	; (8003c7c <_printf_i+0x23c>)
 8003b16:	e012      	b.n	8003b3e <_printf_i+0xfe>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	1d19      	adds	r1, r3, #4
 8003b1e:	6029      	str	r1, [r5, #0]
 8003b20:	0605      	lsls	r5, r0, #24
 8003b22:	d501      	bpl.n	8003b28 <_printf_i+0xe8>
 8003b24:	681e      	ldr	r6, [r3, #0]
 8003b26:	e002      	b.n	8003b2e <_printf_i+0xee>
 8003b28:	0641      	lsls	r1, r0, #25
 8003b2a:	d5fb      	bpl.n	8003b24 <_printf_i+0xe4>
 8003b2c:	881e      	ldrh	r6, [r3, #0]
 8003b2e:	2f6f      	cmp	r7, #111	; 0x6f
 8003b30:	bf0c      	ite	eq
 8003b32:	2308      	moveq	r3, #8
 8003b34:	230a      	movne	r3, #10
 8003b36:	4851      	ldr	r0, [pc, #324]	; (8003c7c <_printf_i+0x23c>)
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b3e:	6865      	ldr	r5, [r4, #4]
 8003b40:	2d00      	cmp	r5, #0
 8003b42:	bfa8      	it	ge
 8003b44:	6821      	ldrge	r1, [r4, #0]
 8003b46:	60a5      	str	r5, [r4, #8]
 8003b48:	bfa4      	itt	ge
 8003b4a:	f021 0104 	bicge.w	r1, r1, #4
 8003b4e:	6021      	strge	r1, [r4, #0]
 8003b50:	b90e      	cbnz	r6, 8003b56 <_printf_i+0x116>
 8003b52:	2d00      	cmp	r5, #0
 8003b54:	d04b      	beq.n	8003bee <_printf_i+0x1ae>
 8003b56:	4615      	mov	r5, r2
 8003b58:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b5c:	fb03 6711 	mls	r7, r3, r1, r6
 8003b60:	5dc7      	ldrb	r7, [r0, r7]
 8003b62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b66:	4637      	mov	r7, r6
 8003b68:	42bb      	cmp	r3, r7
 8003b6a:	460e      	mov	r6, r1
 8003b6c:	d9f4      	bls.n	8003b58 <_printf_i+0x118>
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d10b      	bne.n	8003b8a <_printf_i+0x14a>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	07de      	lsls	r6, r3, #31
 8003b76:	d508      	bpl.n	8003b8a <_printf_i+0x14a>
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	6861      	ldr	r1, [r4, #4]
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	bfde      	ittt	le
 8003b80:	2330      	movle	r3, #48	; 0x30
 8003b82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b8a:	1b52      	subs	r2, r2, r5
 8003b8c:	6122      	str	r2, [r4, #16]
 8003b8e:	464b      	mov	r3, r9
 8003b90:	4621      	mov	r1, r4
 8003b92:	4640      	mov	r0, r8
 8003b94:	f8cd a000 	str.w	sl, [sp]
 8003b98:	aa03      	add	r2, sp, #12
 8003b9a:	f7ff fedf 	bl	800395c <_printf_common>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d14a      	bne.n	8003c38 <_printf_i+0x1f8>
 8003ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba6:	b004      	add	sp, #16
 8003ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	f043 0320 	orr.w	r3, r3, #32
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	2778      	movs	r7, #120	; 0x78
 8003bb6:	4832      	ldr	r0, [pc, #200]	; (8003c80 <_printf_i+0x240>)
 8003bb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	6829      	ldr	r1, [r5, #0]
 8003bc0:	061f      	lsls	r7, r3, #24
 8003bc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bc6:	d402      	bmi.n	8003bce <_printf_i+0x18e>
 8003bc8:	065f      	lsls	r7, r3, #25
 8003bca:	bf48      	it	mi
 8003bcc:	b2b6      	uxthmi	r6, r6
 8003bce:	07df      	lsls	r7, r3, #31
 8003bd0:	bf48      	it	mi
 8003bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8003bd6:	6029      	str	r1, [r5, #0]
 8003bd8:	bf48      	it	mi
 8003bda:	6023      	strmi	r3, [r4, #0]
 8003bdc:	b91e      	cbnz	r6, 8003be6 <_printf_i+0x1a6>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	f023 0320 	bic.w	r3, r3, #32
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	2310      	movs	r3, #16
 8003be8:	e7a6      	b.n	8003b38 <_printf_i+0xf8>
 8003bea:	4824      	ldr	r0, [pc, #144]	; (8003c7c <_printf_i+0x23c>)
 8003bec:	e7e4      	b.n	8003bb8 <_printf_i+0x178>
 8003bee:	4615      	mov	r5, r2
 8003bf0:	e7bd      	b.n	8003b6e <_printf_i+0x12e>
 8003bf2:	682b      	ldr	r3, [r5, #0]
 8003bf4:	6826      	ldr	r6, [r4, #0]
 8003bf6:	1d18      	adds	r0, r3, #4
 8003bf8:	6961      	ldr	r1, [r4, #20]
 8003bfa:	6028      	str	r0, [r5, #0]
 8003bfc:	0635      	lsls	r5, r6, #24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	d501      	bpl.n	8003c06 <_printf_i+0x1c6>
 8003c02:	6019      	str	r1, [r3, #0]
 8003c04:	e002      	b.n	8003c0c <_printf_i+0x1cc>
 8003c06:	0670      	lsls	r0, r6, #25
 8003c08:	d5fb      	bpl.n	8003c02 <_printf_i+0x1c2>
 8003c0a:	8019      	strh	r1, [r3, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4615      	mov	r5, r2
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	e7bc      	b.n	8003b8e <_printf_i+0x14e>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	2100      	movs	r1, #0
 8003c18:	1d1a      	adds	r2, r3, #4
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	681d      	ldr	r5, [r3, #0]
 8003c1e:	6862      	ldr	r2, [r4, #4]
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f94a 	bl	8003eba <memchr>
 8003c26:	b108      	cbz	r0, 8003c2c <_printf_i+0x1ec>
 8003c28:	1b40      	subs	r0, r0, r5
 8003c2a:	6060      	str	r0, [r4, #4]
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	2300      	movs	r3, #0
 8003c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c36:	e7aa      	b.n	8003b8e <_printf_i+0x14e>
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	47d0      	blx	sl
 8003c42:	3001      	adds	r0, #1
 8003c44:	d0ad      	beq.n	8003ba2 <_printf_i+0x162>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	079b      	lsls	r3, r3, #30
 8003c4a:	d413      	bmi.n	8003c74 <_printf_i+0x234>
 8003c4c:	68e0      	ldr	r0, [r4, #12]
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	4298      	cmp	r0, r3
 8003c52:	bfb8      	it	lt
 8003c54:	4618      	movlt	r0, r3
 8003c56:	e7a6      	b.n	8003ba6 <_printf_i+0x166>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	4640      	mov	r0, r8
 8003c60:	47d0      	blx	sl
 8003c62:	3001      	adds	r0, #1
 8003c64:	d09d      	beq.n	8003ba2 <_printf_i+0x162>
 8003c66:	3501      	adds	r5, #1
 8003c68:	68e3      	ldr	r3, [r4, #12]
 8003c6a:	9903      	ldr	r1, [sp, #12]
 8003c6c:	1a5b      	subs	r3, r3, r1
 8003c6e:	42ab      	cmp	r3, r5
 8003c70:	dcf2      	bgt.n	8003c58 <_printf_i+0x218>
 8003c72:	e7eb      	b.n	8003c4c <_printf_i+0x20c>
 8003c74:	2500      	movs	r5, #0
 8003c76:	f104 0619 	add.w	r6, r4, #25
 8003c7a:	e7f5      	b.n	8003c68 <_printf_i+0x228>
 8003c7c:	08006110 	.word	0x08006110
 8003c80:	08006121 	.word	0x08006121

08003c84 <siprintf>:
 8003c84:	b40e      	push	{r1, r2, r3}
 8003c86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c8a:	b500      	push	{lr}
 8003c8c:	b09c      	sub	sp, #112	; 0x70
 8003c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c90:	9002      	str	r0, [sp, #8]
 8003c92:	9006      	str	r0, [sp, #24]
 8003c94:	9107      	str	r1, [sp, #28]
 8003c96:	9104      	str	r1, [sp, #16]
 8003c98:	4808      	ldr	r0, [pc, #32]	; (8003cbc <siprintf+0x38>)
 8003c9a:	4909      	ldr	r1, [pc, #36]	; (8003cc0 <siprintf+0x3c>)
 8003c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca0:	9105      	str	r1, [sp, #20]
 8003ca2:	6800      	ldr	r0, [r0, #0]
 8003ca4:	a902      	add	r1, sp, #8
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	f000 ffdc 	bl	8004c64 <_svfiprintf_r>
 8003cac:	2200      	movs	r2, #0
 8003cae:	9b02      	ldr	r3, [sp, #8]
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	b01c      	add	sp, #112	; 0x70
 8003cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cb8:	b003      	add	sp, #12
 8003cba:	4770      	bx	lr
 8003cbc:	20000064 	.word	0x20000064
 8003cc0:	ffff0208 	.word	0xffff0208

08003cc4 <std>:
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	4604      	mov	r4, r0
 8003cca:	e9c0 3300 	strd	r3, r3, [r0]
 8003cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cd2:	6083      	str	r3, [r0, #8]
 8003cd4:	8181      	strh	r1, [r0, #12]
 8003cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8003cd8:	81c2      	strh	r2, [r0, #14]
 8003cda:	6183      	str	r3, [r0, #24]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	2208      	movs	r2, #8
 8003ce0:	305c      	adds	r0, #92	; 0x5c
 8003ce2:	f000 f8b1 	bl	8003e48 <memset>
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <std+0x58>)
 8003ce8:	6224      	str	r4, [r4, #32]
 8003cea:	6263      	str	r3, [r4, #36]	; 0x24
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <std+0x5c>)
 8003cee:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <std+0x60>)
 8003cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <std+0x64>)
 8003cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <std+0x68>)
 8003cfa:	429c      	cmp	r4, r3
 8003cfc:	d006      	beq.n	8003d0c <std+0x48>
 8003cfe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003d02:	4294      	cmp	r4, r2
 8003d04:	d002      	beq.n	8003d0c <std+0x48>
 8003d06:	33d0      	adds	r3, #208	; 0xd0
 8003d08:	429c      	cmp	r4, r3
 8003d0a:	d105      	bne.n	8003d18 <std+0x54>
 8003d0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d14:	f000 b8ce 	b.w	8003eb4 <__retarget_lock_init_recursive>
 8003d18:	bd10      	pop	{r4, pc}
 8003d1a:	bf00      	nop
 8003d1c:	0800580d 	.word	0x0800580d
 8003d20:	0800582f 	.word	0x0800582f
 8003d24:	08005867 	.word	0x08005867
 8003d28:	0800588b 	.word	0x0800588b
 8003d2c:	20000290 	.word	0x20000290

08003d30 <stdio_exit_handler>:
 8003d30:	4a02      	ldr	r2, [pc, #8]	; (8003d3c <stdio_exit_handler+0xc>)
 8003d32:	4903      	ldr	r1, [pc, #12]	; (8003d40 <stdio_exit_handler+0x10>)
 8003d34:	4803      	ldr	r0, [pc, #12]	; (8003d44 <stdio_exit_handler+0x14>)
 8003d36:	f000 b869 	b.w	8003e0c <_fwalk_sglue>
 8003d3a:	bf00      	nop
 8003d3c:	2000000c 	.word	0x2000000c
 8003d40:	080050b5 	.word	0x080050b5
 8003d44:	20000018 	.word	0x20000018

08003d48 <cleanup_stdio>:
 8003d48:	6841      	ldr	r1, [r0, #4]
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <cleanup_stdio+0x34>)
 8003d4c:	b510      	push	{r4, lr}
 8003d4e:	4299      	cmp	r1, r3
 8003d50:	4604      	mov	r4, r0
 8003d52:	d001      	beq.n	8003d58 <cleanup_stdio+0x10>
 8003d54:	f001 f9ae 	bl	80050b4 <_fflush_r>
 8003d58:	68a1      	ldr	r1, [r4, #8]
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <cleanup_stdio+0x38>)
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d002      	beq.n	8003d66 <cleanup_stdio+0x1e>
 8003d60:	4620      	mov	r0, r4
 8003d62:	f001 f9a7 	bl	80050b4 <_fflush_r>
 8003d66:	68e1      	ldr	r1, [r4, #12]
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <cleanup_stdio+0x3c>)
 8003d6a:	4299      	cmp	r1, r3
 8003d6c:	d004      	beq.n	8003d78 <cleanup_stdio+0x30>
 8003d6e:	4620      	mov	r0, r4
 8003d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d74:	f001 b99e 	b.w	80050b4 <_fflush_r>
 8003d78:	bd10      	pop	{r4, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000290 	.word	0x20000290
 8003d80:	200002f8 	.word	0x200002f8
 8003d84:	20000360 	.word	0x20000360

08003d88 <global_stdio_init.part.0>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <global_stdio_init.part.0+0x30>)
 8003d8c:	4c0b      	ldr	r4, [pc, #44]	; (8003dbc <global_stdio_init.part.0+0x34>)
 8003d8e:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <global_stdio_init.part.0+0x38>)
 8003d90:	4620      	mov	r0, r4
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	2104      	movs	r1, #4
 8003d96:	2200      	movs	r2, #0
 8003d98:	f7ff ff94 	bl	8003cc4 <std>
 8003d9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003da0:	2201      	movs	r2, #1
 8003da2:	2109      	movs	r1, #9
 8003da4:	f7ff ff8e 	bl	8003cc4 <std>
 8003da8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003dac:	2202      	movs	r2, #2
 8003dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db2:	2112      	movs	r1, #18
 8003db4:	f7ff bf86 	b.w	8003cc4 <std>
 8003db8:	200003c8 	.word	0x200003c8
 8003dbc:	20000290 	.word	0x20000290
 8003dc0:	08003d31 	.word	0x08003d31

08003dc4 <__sfp_lock_acquire>:
 8003dc4:	4801      	ldr	r0, [pc, #4]	; (8003dcc <__sfp_lock_acquire+0x8>)
 8003dc6:	f000 b876 	b.w	8003eb6 <__retarget_lock_acquire_recursive>
 8003dca:	bf00      	nop
 8003dcc:	200003cd 	.word	0x200003cd

08003dd0 <__sfp_lock_release>:
 8003dd0:	4801      	ldr	r0, [pc, #4]	; (8003dd8 <__sfp_lock_release+0x8>)
 8003dd2:	f000 b871 	b.w	8003eb8 <__retarget_lock_release_recursive>
 8003dd6:	bf00      	nop
 8003dd8:	200003cd 	.word	0x200003cd

08003ddc <__sinit>:
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	4604      	mov	r4, r0
 8003de0:	f7ff fff0 	bl	8003dc4 <__sfp_lock_acquire>
 8003de4:	6a23      	ldr	r3, [r4, #32]
 8003de6:	b11b      	cbz	r3, 8003df0 <__sinit+0x14>
 8003de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dec:	f7ff bff0 	b.w	8003dd0 <__sfp_lock_release>
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <__sinit+0x28>)
 8003df2:	6223      	str	r3, [r4, #32]
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <__sinit+0x2c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f5      	bne.n	8003de8 <__sinit+0xc>
 8003dfc:	f7ff ffc4 	bl	8003d88 <global_stdio_init.part.0>
 8003e00:	e7f2      	b.n	8003de8 <__sinit+0xc>
 8003e02:	bf00      	nop
 8003e04:	08003d49 	.word	0x08003d49
 8003e08:	200003c8 	.word	0x200003c8

08003e0c <_fwalk_sglue>:
 8003e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	4607      	mov	r7, r0
 8003e12:	4688      	mov	r8, r1
 8003e14:	4614      	mov	r4, r2
 8003e16:	2600      	movs	r6, #0
 8003e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e20:	d505      	bpl.n	8003e2e <_fwalk_sglue+0x22>
 8003e22:	6824      	ldr	r4, [r4, #0]
 8003e24:	2c00      	cmp	r4, #0
 8003e26:	d1f7      	bne.n	8003e18 <_fwalk_sglue+0xc>
 8003e28:	4630      	mov	r0, r6
 8003e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d907      	bls.n	8003e44 <_fwalk_sglue+0x38>
 8003e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	d003      	beq.n	8003e44 <_fwalk_sglue+0x38>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4638      	mov	r0, r7
 8003e40:	47c0      	blx	r8
 8003e42:	4306      	orrs	r6, r0
 8003e44:	3568      	adds	r5, #104	; 0x68
 8003e46:	e7e9      	b.n	8003e1c <_fwalk_sglue+0x10>

08003e48 <memset>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4402      	add	r2, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <_localeconv_r>:
 8003e58:	4800      	ldr	r0, [pc, #0]	; (8003e5c <_localeconv_r+0x4>)
 8003e5a:	4770      	bx	lr
 8003e5c:	20000158 	.word	0x20000158

08003e60 <__errno>:
 8003e60:	4b01      	ldr	r3, [pc, #4]	; (8003e68 <__errno+0x8>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000064 	.word	0x20000064

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	2600      	movs	r6, #0
 8003e70:	4d0c      	ldr	r5, [pc, #48]	; (8003ea4 <__libc_init_array+0x38>)
 8003e72:	4c0d      	ldr	r4, [pc, #52]	; (8003ea8 <__libc_init_array+0x3c>)
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	f002 f910 	bl	80060a0 <_init>
 8003e80:	2600      	movs	r6, #0
 8003e82:	4d0a      	ldr	r5, [pc, #40]	; (8003eac <__libc_init_array+0x40>)
 8003e84:	4c0a      	ldr	r4, [pc, #40]	; (8003eb0 <__libc_init_array+0x44>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08006474 	.word	0x08006474
 8003ea8:	08006474 	.word	0x08006474
 8003eac:	08006474 	.word	0x08006474
 8003eb0:	08006478 	.word	0x08006478

08003eb4 <__retarget_lock_init_recursive>:
 8003eb4:	4770      	bx	lr

08003eb6 <__retarget_lock_acquire_recursive>:
 8003eb6:	4770      	bx	lr

08003eb8 <__retarget_lock_release_recursive>:
 8003eb8:	4770      	bx	lr

08003eba <memchr>:
 8003eba:	4603      	mov	r3, r0
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	b2c9      	uxtb	r1, r1
 8003ec0:	4402      	add	r2, r0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	d101      	bne.n	8003ecc <memchr+0x12>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	e003      	b.n	8003ed4 <memchr+0x1a>
 8003ecc:	7804      	ldrb	r4, [r0, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	428c      	cmp	r4, r1
 8003ed2:	d1f6      	bne.n	8003ec2 <memchr+0x8>
 8003ed4:	bd10      	pop	{r4, pc}

08003ed6 <quorem>:
 8003ed6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eda:	6903      	ldr	r3, [r0, #16]
 8003edc:	690c      	ldr	r4, [r1, #16]
 8003ede:	4607      	mov	r7, r0
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	db7f      	blt.n	8003fe4 <quorem+0x10e>
 8003ee4:	3c01      	subs	r4, #1
 8003ee6:	f100 0514 	add.w	r5, r0, #20
 8003eea:	f101 0814 	add.w	r8, r1, #20
 8003eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003efc:	3301      	adds	r3, #1
 8003efe:	429a      	cmp	r2, r3
 8003f00:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f0c:	d331      	bcc.n	8003f72 <quorem+0x9c>
 8003f0e:	f04f 0e00 	mov.w	lr, #0
 8003f12:	4640      	mov	r0, r8
 8003f14:	46ac      	mov	ip, r5
 8003f16:	46f2      	mov	sl, lr
 8003f18:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f1c:	b293      	uxth	r3, r2
 8003f1e:	fb06 e303 	mla	r3, r6, r3, lr
 8003f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f26:	0c1a      	lsrs	r2, r3, #16
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	fb06 220e 	mla	r2, r6, lr, r2
 8003f2e:	ebaa 0303 	sub.w	r3, sl, r3
 8003f32:	f8dc a000 	ldr.w	sl, [ip]
 8003f36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f3a:	fa1f fa8a 	uxth.w	sl, sl
 8003f3e:	4453      	add	r3, sl
 8003f40:	f8dc a000 	ldr.w	sl, [ip]
 8003f44:	b292      	uxth	r2, r2
 8003f46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003f4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f54:	4581      	cmp	r9, r0
 8003f56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f5a:	f84c 3b04 	str.w	r3, [ip], #4
 8003f5e:	d2db      	bcs.n	8003f18 <quorem+0x42>
 8003f60:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f64:	b92b      	cbnz	r3, 8003f72 <quorem+0x9c>
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	3b04      	subs	r3, #4
 8003f6a:	429d      	cmp	r5, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	d32d      	bcc.n	8003fcc <quorem+0xf6>
 8003f70:	613c      	str	r4, [r7, #16]
 8003f72:	4638      	mov	r0, r7
 8003f74:	f001 fb4c 	bl	8005610 <__mcmp>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	db23      	blt.n	8003fc4 <quorem+0xee>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	2000      	movs	r0, #0
 8003f80:	3601      	adds	r6, #1
 8003f82:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f86:	f8d1 c000 	ldr.w	ip, [r1]
 8003f8a:	b293      	uxth	r3, r2
 8003f8c:	1ac3      	subs	r3, r0, r3
 8003f8e:	0c12      	lsrs	r2, r2, #16
 8003f90:	fa1f f08c 	uxth.w	r0, ip
 8003f94:	4403      	add	r3, r0
 8003f96:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003f9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fa4:	45c1      	cmp	r9, r8
 8003fa6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003faa:	f841 3b04 	str.w	r3, [r1], #4
 8003fae:	d2e8      	bcs.n	8003f82 <quorem+0xac>
 8003fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fb8:	b922      	cbnz	r2, 8003fc4 <quorem+0xee>
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	429d      	cmp	r5, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	d30a      	bcc.n	8003fd8 <quorem+0x102>
 8003fc2:	613c      	str	r4, [r7, #16]
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	b003      	add	sp, #12
 8003fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	2a00      	cmp	r2, #0
 8003fd2:	d1cd      	bne.n	8003f70 <quorem+0x9a>
 8003fd4:	3c01      	subs	r4, #1
 8003fd6:	e7c8      	b.n	8003f6a <quorem+0x94>
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	3b04      	subs	r3, #4
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	d1f0      	bne.n	8003fc2 <quorem+0xec>
 8003fe0:	3c01      	subs	r4, #1
 8003fe2:	e7eb      	b.n	8003fbc <quorem+0xe6>
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	e7ee      	b.n	8003fc6 <quorem+0xf0>

08003fe8 <_dtoa_r>:
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	4616      	mov	r6, r2
 8003fee:	461f      	mov	r7, r3
 8003ff0:	69c4      	ldr	r4, [r0, #28]
 8003ff2:	b099      	sub	sp, #100	; 0x64
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003ffa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003ffe:	b974      	cbnz	r4, 800401e <_dtoa_r+0x36>
 8004000:	2010      	movs	r0, #16
 8004002:	f000 ff2d 	bl	8004e60 <malloc>
 8004006:	4602      	mov	r2, r0
 8004008:	61e8      	str	r0, [r5, #28]
 800400a:	b920      	cbnz	r0, 8004016 <_dtoa_r+0x2e>
 800400c:	21ef      	movs	r1, #239	; 0xef
 800400e:	4bac      	ldr	r3, [pc, #688]	; (80042c0 <_dtoa_r+0x2d8>)
 8004010:	48ac      	ldr	r0, [pc, #688]	; (80042c4 <_dtoa_r+0x2dc>)
 8004012:	f001 fceb 	bl	80059ec <__assert_func>
 8004016:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800401a:	6004      	str	r4, [r0, #0]
 800401c:	60c4      	str	r4, [r0, #12]
 800401e:	69eb      	ldr	r3, [r5, #28]
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	b151      	cbz	r1, 800403a <_dtoa_r+0x52>
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	2301      	movs	r3, #1
 8004028:	4093      	lsls	r3, r2
 800402a:	604a      	str	r2, [r1, #4]
 800402c:	608b      	str	r3, [r1, #8]
 800402e:	4628      	mov	r0, r5
 8004030:	f001 f8b4 	bl	800519c <_Bfree>
 8004034:	2200      	movs	r2, #0
 8004036:	69eb      	ldr	r3, [r5, #28]
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	1e3b      	subs	r3, r7, #0
 800403c:	bfaf      	iteee	ge
 800403e:	2300      	movge	r3, #0
 8004040:	2201      	movlt	r2, #1
 8004042:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004046:	9305      	strlt	r3, [sp, #20]
 8004048:	bfa8      	it	ge
 800404a:	f8c8 3000 	strge.w	r3, [r8]
 800404e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004052:	4b9d      	ldr	r3, [pc, #628]	; (80042c8 <_dtoa_r+0x2e0>)
 8004054:	bfb8      	it	lt
 8004056:	f8c8 2000 	strlt.w	r2, [r8]
 800405a:	ea33 0309 	bics.w	r3, r3, r9
 800405e:	d119      	bne.n	8004094 <_dtoa_r+0xac>
 8004060:	f242 730f 	movw	r3, #9999	; 0x270f
 8004064:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800406c:	4333      	orrs	r3, r6
 800406e:	f000 8589 	beq.w	8004b84 <_dtoa_r+0xb9c>
 8004072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004074:	b953      	cbnz	r3, 800408c <_dtoa_r+0xa4>
 8004076:	4b95      	ldr	r3, [pc, #596]	; (80042cc <_dtoa_r+0x2e4>)
 8004078:	e023      	b.n	80040c2 <_dtoa_r+0xda>
 800407a:	4b95      	ldr	r3, [pc, #596]	; (80042d0 <_dtoa_r+0x2e8>)
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	9803      	ldr	r0, [sp, #12]
 8004086:	b019      	add	sp, #100	; 0x64
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	4b8f      	ldr	r3, [pc, #572]	; (80042cc <_dtoa_r+0x2e4>)
 800408e:	9303      	str	r3, [sp, #12]
 8004090:	3303      	adds	r3, #3
 8004092:	e7f5      	b.n	8004080 <_dtoa_r+0x98>
 8004094:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004098:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800409c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	2300      	movs	r3, #0
 80040a4:	f7fc fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80040a8:	4680      	mov	r8, r0
 80040aa:	b160      	cbz	r0, 80040c6 <_dtoa_r+0xde>
 80040ac:	2301      	movs	r3, #1
 80040ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8562 	beq.w	8004b7e <_dtoa_r+0xb96>
 80040ba:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <_dtoa_r+0x2ec>)
 80040bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	e7de      	b.n	8004084 <_dtoa_r+0x9c>
 80040c6:	ab16      	add	r3, sp, #88	; 0x58
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	ab17      	add	r3, sp, #92	; 0x5c
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4628      	mov	r0, r5
 80040d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80040d4:	f001 fb44 	bl	8005760 <__d2b>
 80040d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80040dc:	4682      	mov	sl, r0
 80040de:	2c00      	cmp	r4, #0
 80040e0:	d07e      	beq.n	80041e0 <_dtoa_r+0x1f8>
 80040e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80040ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80040f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80040f8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80040fc:	4619      	mov	r1, r3
 80040fe:	2200      	movs	r2, #0
 8004100:	4b75      	ldr	r3, [pc, #468]	; (80042d8 <_dtoa_r+0x2f0>)
 8004102:	f7fc f831 	bl	8000168 <__aeabi_dsub>
 8004106:	a368      	add	r3, pc, #416	; (adr r3, 80042a8 <_dtoa_r+0x2c0>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f9e4 	bl	80004d8 <__aeabi_dmul>
 8004110:	a367      	add	r3, pc, #412	; (adr r3, 80042b0 <_dtoa_r+0x2c8>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc f829 	bl	800016c <__adddf3>
 800411a:	4606      	mov	r6, r0
 800411c:	4620      	mov	r0, r4
 800411e:	460f      	mov	r7, r1
 8004120:	f7fc f970 	bl	8000404 <__aeabi_i2d>
 8004124:	a364      	add	r3, pc, #400	; (adr r3, 80042b8 <_dtoa_r+0x2d0>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f7fc f9d5 	bl	80004d8 <__aeabi_dmul>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4630      	mov	r0, r6
 8004134:	4639      	mov	r1, r7
 8004136:	f7fc f819 	bl	800016c <__adddf3>
 800413a:	4606      	mov	r6, r0
 800413c:	460f      	mov	r7, r1
 800413e:	f7fc fc7b 	bl	8000a38 <__aeabi_d2iz>
 8004142:	2200      	movs	r2, #0
 8004144:	4683      	mov	fp, r0
 8004146:	2300      	movs	r3, #0
 8004148:	4630      	mov	r0, r6
 800414a:	4639      	mov	r1, r7
 800414c:	f7fc fc36 	bl	80009bc <__aeabi_dcmplt>
 8004150:	b148      	cbz	r0, 8004166 <_dtoa_r+0x17e>
 8004152:	4658      	mov	r0, fp
 8004154:	f7fc f956 	bl	8000404 <__aeabi_i2d>
 8004158:	4632      	mov	r2, r6
 800415a:	463b      	mov	r3, r7
 800415c:	f7fc fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8004160:	b908      	cbnz	r0, 8004166 <_dtoa_r+0x17e>
 8004162:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004166:	f1bb 0f16 	cmp.w	fp, #22
 800416a:	d857      	bhi.n	800421c <_dtoa_r+0x234>
 800416c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004170:	4b5a      	ldr	r3, [pc, #360]	; (80042dc <_dtoa_r+0x2f4>)
 8004172:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc fc1f 	bl	80009bc <__aeabi_dcmplt>
 800417e:	2800      	cmp	r0, #0
 8004180:	d04e      	beq.n	8004220 <_dtoa_r+0x238>
 8004182:	2300      	movs	r3, #0
 8004184:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004188:	930f      	str	r3, [sp, #60]	; 0x3c
 800418a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800418c:	1b1b      	subs	r3, r3, r4
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	bf46      	itte	mi
 8004192:	f1c3 0901 	rsbmi	r9, r3, #1
 8004196:	2300      	movmi	r3, #0
 8004198:	f04f 0900 	movpl.w	r9, #0
 800419c:	9209      	str	r2, [sp, #36]	; 0x24
 800419e:	bf48      	it	mi
 80041a0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80041a2:	f1bb 0f00 	cmp.w	fp, #0
 80041a6:	db3d      	blt.n	8004224 <_dtoa_r+0x23c>
 80041a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041aa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80041ae:	445b      	add	r3, fp
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	2300      	movs	r3, #0
 80041b4:	930a      	str	r3, [sp, #40]	; 0x28
 80041b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041b8:	2b09      	cmp	r3, #9
 80041ba:	d867      	bhi.n	800428c <_dtoa_r+0x2a4>
 80041bc:	2b05      	cmp	r3, #5
 80041be:	bfc4      	itt	gt
 80041c0:	3b04      	subgt	r3, #4
 80041c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80041c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041c6:	bfc8      	it	gt
 80041c8:	2400      	movgt	r4, #0
 80041ca:	f1a3 0302 	sub.w	r3, r3, #2
 80041ce:	bfd8      	it	le
 80041d0:	2401      	movle	r4, #1
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f200 8086 	bhi.w	80042e4 <_dtoa_r+0x2fc>
 80041d8:	e8df f003 	tbb	[pc, r3]
 80041dc:	5637392c 	.word	0x5637392c
 80041e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80041e4:	441c      	add	r4, r3
 80041e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	bfc1      	itttt	gt
 80041ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041f2:	fa09 f903 	lslgt.w	r9, r9, r3
 80041f6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80041fa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80041fe:	bfd6      	itet	le
 8004200:	f1c3 0320 	rsble	r3, r3, #32
 8004204:	ea49 0003 	orrgt.w	r0, r9, r3
 8004208:	fa06 f003 	lslle.w	r0, r6, r3
 800420c:	f7fc f8ea 	bl	80003e4 <__aeabi_ui2d>
 8004210:	2201      	movs	r2, #1
 8004212:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004216:	3c01      	subs	r4, #1
 8004218:	9213      	str	r2, [sp, #76]	; 0x4c
 800421a:	e76f      	b.n	80040fc <_dtoa_r+0x114>
 800421c:	2301      	movs	r3, #1
 800421e:	e7b3      	b.n	8004188 <_dtoa_r+0x1a0>
 8004220:	900f      	str	r0, [sp, #60]	; 0x3c
 8004222:	e7b2      	b.n	800418a <_dtoa_r+0x1a2>
 8004224:	f1cb 0300 	rsb	r3, fp, #0
 8004228:	930a      	str	r3, [sp, #40]	; 0x28
 800422a:	2300      	movs	r3, #0
 800422c:	eba9 090b 	sub.w	r9, r9, fp
 8004230:	930e      	str	r3, [sp, #56]	; 0x38
 8004232:	e7c0      	b.n	80041b6 <_dtoa_r+0x1ce>
 8004234:	2300      	movs	r3, #0
 8004236:	930b      	str	r3, [sp, #44]	; 0x2c
 8004238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800423a:	2b00      	cmp	r3, #0
 800423c:	dc55      	bgt.n	80042ea <_dtoa_r+0x302>
 800423e:	2301      	movs	r3, #1
 8004240:	461a      	mov	r2, r3
 8004242:	9306      	str	r3, [sp, #24]
 8004244:	9308      	str	r3, [sp, #32]
 8004246:	9223      	str	r2, [sp, #140]	; 0x8c
 8004248:	e00b      	b.n	8004262 <_dtoa_r+0x27a>
 800424a:	2301      	movs	r3, #1
 800424c:	e7f3      	b.n	8004236 <_dtoa_r+0x24e>
 800424e:	2300      	movs	r3, #0
 8004250:	930b      	str	r3, [sp, #44]	; 0x2c
 8004252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004254:	445b      	add	r3, fp
 8004256:	9306      	str	r3, [sp, #24]
 8004258:	3301      	adds	r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	9308      	str	r3, [sp, #32]
 800425e:	bfb8      	it	lt
 8004260:	2301      	movlt	r3, #1
 8004262:	2100      	movs	r1, #0
 8004264:	2204      	movs	r2, #4
 8004266:	69e8      	ldr	r0, [r5, #28]
 8004268:	f102 0614 	add.w	r6, r2, #20
 800426c:	429e      	cmp	r6, r3
 800426e:	d940      	bls.n	80042f2 <_dtoa_r+0x30a>
 8004270:	6041      	str	r1, [r0, #4]
 8004272:	4628      	mov	r0, r5
 8004274:	f000 ff52 	bl	800511c <_Balloc>
 8004278:	9003      	str	r0, [sp, #12]
 800427a:	2800      	cmp	r0, #0
 800427c:	d13c      	bne.n	80042f8 <_dtoa_r+0x310>
 800427e:	4602      	mov	r2, r0
 8004280:	f240 11af 	movw	r1, #431	; 0x1af
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <_dtoa_r+0x2f8>)
 8004286:	e6c3      	b.n	8004010 <_dtoa_r+0x28>
 8004288:	2301      	movs	r3, #1
 800428a:	e7e1      	b.n	8004250 <_dtoa_r+0x268>
 800428c:	2401      	movs	r4, #1
 800428e:	2300      	movs	r3, #0
 8004290:	940b      	str	r4, [sp, #44]	; 0x2c
 8004292:	9322      	str	r3, [sp, #136]	; 0x88
 8004294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004298:	2200      	movs	r2, #0
 800429a:	9306      	str	r3, [sp, #24]
 800429c:	9308      	str	r3, [sp, #32]
 800429e:	2312      	movs	r3, #18
 80042a0:	e7d1      	b.n	8004246 <_dtoa_r+0x25e>
 80042a2:	bf00      	nop
 80042a4:	f3af 8000 	nop.w
 80042a8:	636f4361 	.word	0x636f4361
 80042ac:	3fd287a7 	.word	0x3fd287a7
 80042b0:	8b60c8b3 	.word	0x8b60c8b3
 80042b4:	3fc68a28 	.word	0x3fc68a28
 80042b8:	509f79fb 	.word	0x509f79fb
 80042bc:	3fd34413 	.word	0x3fd34413
 80042c0:	0800613f 	.word	0x0800613f
 80042c4:	08006156 	.word	0x08006156
 80042c8:	7ff00000 	.word	0x7ff00000
 80042cc:	0800613b 	.word	0x0800613b
 80042d0:	08006132 	.word	0x08006132
 80042d4:	0800610f 	.word	0x0800610f
 80042d8:	3ff80000 	.word	0x3ff80000
 80042dc:	08006258 	.word	0x08006258
 80042e0:	080061ae 	.word	0x080061ae
 80042e4:	2301      	movs	r3, #1
 80042e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042e8:	e7d4      	b.n	8004294 <_dtoa_r+0x2ac>
 80042ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042ec:	9306      	str	r3, [sp, #24]
 80042ee:	9308      	str	r3, [sp, #32]
 80042f0:	e7b7      	b.n	8004262 <_dtoa_r+0x27a>
 80042f2:	3101      	adds	r1, #1
 80042f4:	0052      	lsls	r2, r2, #1
 80042f6:	e7b7      	b.n	8004268 <_dtoa_r+0x280>
 80042f8:	69eb      	ldr	r3, [r5, #28]
 80042fa:	9a03      	ldr	r2, [sp, #12]
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	9b08      	ldr	r3, [sp, #32]
 8004300:	2b0e      	cmp	r3, #14
 8004302:	f200 80a8 	bhi.w	8004456 <_dtoa_r+0x46e>
 8004306:	2c00      	cmp	r4, #0
 8004308:	f000 80a5 	beq.w	8004456 <_dtoa_r+0x46e>
 800430c:	f1bb 0f00 	cmp.w	fp, #0
 8004310:	dd34      	ble.n	800437c <_dtoa_r+0x394>
 8004312:	4b9a      	ldr	r3, [pc, #616]	; (800457c <_dtoa_r+0x594>)
 8004314:	f00b 020f 	and.w	r2, fp, #15
 8004318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800431c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004320:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004324:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004328:	ea4f 142b 	mov.w	r4, fp, asr #4
 800432c:	d016      	beq.n	800435c <_dtoa_r+0x374>
 800432e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004332:	4b93      	ldr	r3, [pc, #588]	; (8004580 <_dtoa_r+0x598>)
 8004334:	2703      	movs	r7, #3
 8004336:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800433a:	f7fc f9f7 	bl	800072c <__aeabi_ddiv>
 800433e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004342:	f004 040f 	and.w	r4, r4, #15
 8004346:	4e8e      	ldr	r6, [pc, #568]	; (8004580 <_dtoa_r+0x598>)
 8004348:	b954      	cbnz	r4, 8004360 <_dtoa_r+0x378>
 800434a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800434e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004352:	f7fc f9eb 	bl	800072c <__aeabi_ddiv>
 8004356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800435a:	e029      	b.n	80043b0 <_dtoa_r+0x3c8>
 800435c:	2702      	movs	r7, #2
 800435e:	e7f2      	b.n	8004346 <_dtoa_r+0x35e>
 8004360:	07e1      	lsls	r1, r4, #31
 8004362:	d508      	bpl.n	8004376 <_dtoa_r+0x38e>
 8004364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004368:	e9d6 2300 	ldrd	r2, r3, [r6]
 800436c:	f7fc f8b4 	bl	80004d8 <__aeabi_dmul>
 8004370:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004374:	3701      	adds	r7, #1
 8004376:	1064      	asrs	r4, r4, #1
 8004378:	3608      	adds	r6, #8
 800437a:	e7e5      	b.n	8004348 <_dtoa_r+0x360>
 800437c:	f000 80a5 	beq.w	80044ca <_dtoa_r+0x4e2>
 8004380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004384:	f1cb 0400 	rsb	r4, fp, #0
 8004388:	4b7c      	ldr	r3, [pc, #496]	; (800457c <_dtoa_r+0x594>)
 800438a:	f004 020f 	and.w	r2, r4, #15
 800438e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f89f 	bl	80004d8 <__aeabi_dmul>
 800439a:	2702      	movs	r7, #2
 800439c:	2300      	movs	r3, #0
 800439e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043a2:	4e77      	ldr	r6, [pc, #476]	; (8004580 <_dtoa_r+0x598>)
 80043a4:	1124      	asrs	r4, r4, #4
 80043a6:	2c00      	cmp	r4, #0
 80043a8:	f040 8084 	bne.w	80044b4 <_dtoa_r+0x4cc>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1d2      	bne.n	8004356 <_dtoa_r+0x36e>
 80043b0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8087 	beq.w	80044ce <_dtoa_r+0x4e6>
 80043c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043c4:	2200      	movs	r2, #0
 80043c6:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <_dtoa_r+0x59c>)
 80043c8:	f7fc faf8 	bl	80009bc <__aeabi_dcmplt>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d07e      	beq.n	80044ce <_dtoa_r+0x4e6>
 80043d0:	9b08      	ldr	r3, [sp, #32]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d07b      	beq.n	80044ce <_dtoa_r+0x4e6>
 80043d6:	9b06      	ldr	r3, [sp, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dd38      	ble.n	800444e <_dtoa_r+0x466>
 80043dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043e0:	2200      	movs	r2, #0
 80043e2:	4b69      	ldr	r3, [pc, #420]	; (8004588 <_dtoa_r+0x5a0>)
 80043e4:	f7fc f878 	bl	80004d8 <__aeabi_dmul>
 80043e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043ec:	9c06      	ldr	r4, [sp, #24]
 80043ee:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 80043f2:	3701      	adds	r7, #1
 80043f4:	4638      	mov	r0, r7
 80043f6:	f7fc f805 	bl	8000404 <__aeabi_i2d>
 80043fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043fe:	f7fc f86b 	bl	80004d8 <__aeabi_dmul>
 8004402:	2200      	movs	r2, #0
 8004404:	4b61      	ldr	r3, [pc, #388]	; (800458c <_dtoa_r+0x5a4>)
 8004406:	f7fb feb1 	bl	800016c <__adddf3>
 800440a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800440e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004412:	9611      	str	r6, [sp, #68]	; 0x44
 8004414:	2c00      	cmp	r4, #0
 8004416:	d15d      	bne.n	80044d4 <_dtoa_r+0x4ec>
 8004418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800441c:	2200      	movs	r2, #0
 800441e:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <_dtoa_r+0x5a8>)
 8004420:	f7fb fea2 	bl	8000168 <__aeabi_dsub>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800442c:	4633      	mov	r3, r6
 800442e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004430:	f7fc fae2 	bl	80009f8 <__aeabi_dcmpgt>
 8004434:	2800      	cmp	r0, #0
 8004436:	f040 8295 	bne.w	8004964 <_dtoa_r+0x97c>
 800443a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800443e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004440:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004444:	f7fc faba 	bl	80009bc <__aeabi_dcmplt>
 8004448:	2800      	cmp	r0, #0
 800444a:	f040 8289 	bne.w	8004960 <_dtoa_r+0x978>
 800444e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004452:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004456:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004458:	2b00      	cmp	r3, #0
 800445a:	f2c0 8151 	blt.w	8004700 <_dtoa_r+0x718>
 800445e:	f1bb 0f0e 	cmp.w	fp, #14
 8004462:	f300 814d 	bgt.w	8004700 <_dtoa_r+0x718>
 8004466:	4b45      	ldr	r3, [pc, #276]	; (800457c <_dtoa_r+0x594>)
 8004468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800446c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004470:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004474:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004476:	2b00      	cmp	r3, #0
 8004478:	f280 80da 	bge.w	8004630 <_dtoa_r+0x648>
 800447c:	9b08      	ldr	r3, [sp, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f300 80d6 	bgt.w	8004630 <_dtoa_r+0x648>
 8004484:	f040 826b 	bne.w	800495e <_dtoa_r+0x976>
 8004488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800448c:	2200      	movs	r2, #0
 800448e:	4b40      	ldr	r3, [pc, #256]	; (8004590 <_dtoa_r+0x5a8>)
 8004490:	f7fc f822 	bl	80004d8 <__aeabi_dmul>
 8004494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004498:	f7fc faa4 	bl	80009e4 <__aeabi_dcmpge>
 800449c:	9c08      	ldr	r4, [sp, #32]
 800449e:	4626      	mov	r6, r4
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f040 8241 	bne.w	8004928 <_dtoa_r+0x940>
 80044a6:	2331      	movs	r3, #49	; 0x31
 80044a8:	9f03      	ldr	r7, [sp, #12]
 80044aa:	f10b 0b01 	add.w	fp, fp, #1
 80044ae:	f807 3b01 	strb.w	r3, [r7], #1
 80044b2:	e23d      	b.n	8004930 <_dtoa_r+0x948>
 80044b4:	07e2      	lsls	r2, r4, #31
 80044b6:	d505      	bpl.n	80044c4 <_dtoa_r+0x4dc>
 80044b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044bc:	f7fc f80c 	bl	80004d8 <__aeabi_dmul>
 80044c0:	2301      	movs	r3, #1
 80044c2:	3701      	adds	r7, #1
 80044c4:	1064      	asrs	r4, r4, #1
 80044c6:	3608      	adds	r6, #8
 80044c8:	e76d      	b.n	80043a6 <_dtoa_r+0x3be>
 80044ca:	2702      	movs	r7, #2
 80044cc:	e770      	b.n	80043b0 <_dtoa_r+0x3c8>
 80044ce:	46d8      	mov	r8, fp
 80044d0:	9c08      	ldr	r4, [sp, #32]
 80044d2:	e78f      	b.n	80043f4 <_dtoa_r+0x40c>
 80044d4:	9903      	ldr	r1, [sp, #12]
 80044d6:	4b29      	ldr	r3, [pc, #164]	; (800457c <_dtoa_r+0x594>)
 80044d8:	4421      	add	r1, r4
 80044da:	9112      	str	r1, [sp, #72]	; 0x48
 80044dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044e2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80044e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044ea:	2900      	cmp	r1, #0
 80044ec:	d054      	beq.n	8004598 <_dtoa_r+0x5b0>
 80044ee:	2000      	movs	r0, #0
 80044f0:	4928      	ldr	r1, [pc, #160]	; (8004594 <_dtoa_r+0x5ac>)
 80044f2:	f7fc f91b 	bl	800072c <__aeabi_ddiv>
 80044f6:	463b      	mov	r3, r7
 80044f8:	4632      	mov	r2, r6
 80044fa:	f7fb fe35 	bl	8000168 <__aeabi_dsub>
 80044fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004502:	9f03      	ldr	r7, [sp, #12]
 8004504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004508:	f7fc fa96 	bl	8000a38 <__aeabi_d2iz>
 800450c:	4604      	mov	r4, r0
 800450e:	f7fb ff79 	bl	8000404 <__aeabi_i2d>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800451a:	f7fb fe25 	bl	8000168 <__aeabi_dsub>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	3430      	adds	r4, #48	; 0x30
 8004524:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800452c:	f807 4b01 	strb.w	r4, [r7], #1
 8004530:	f7fc fa44 	bl	80009bc <__aeabi_dcmplt>
 8004534:	2800      	cmp	r0, #0
 8004536:	d173      	bne.n	8004620 <_dtoa_r+0x638>
 8004538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800453c:	2000      	movs	r0, #0
 800453e:	4911      	ldr	r1, [pc, #68]	; (8004584 <_dtoa_r+0x59c>)
 8004540:	f7fb fe12 	bl	8000168 <__aeabi_dsub>
 8004544:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004548:	f7fc fa38 	bl	80009bc <__aeabi_dcmplt>
 800454c:	2800      	cmp	r0, #0
 800454e:	f040 80b6 	bne.w	80046be <_dtoa_r+0x6d6>
 8004552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004554:	429f      	cmp	r7, r3
 8004556:	f43f af7a 	beq.w	800444e <_dtoa_r+0x466>
 800455a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800455e:	2200      	movs	r2, #0
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <_dtoa_r+0x5a0>)
 8004562:	f7fb ffb9 	bl	80004d8 <__aeabi_dmul>
 8004566:	2200      	movs	r2, #0
 8004568:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800456c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <_dtoa_r+0x5a0>)
 8004572:	f7fb ffb1 	bl	80004d8 <__aeabi_dmul>
 8004576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800457a:	e7c3      	b.n	8004504 <_dtoa_r+0x51c>
 800457c:	08006258 	.word	0x08006258
 8004580:	08006230 	.word	0x08006230
 8004584:	3ff00000 	.word	0x3ff00000
 8004588:	40240000 	.word	0x40240000
 800458c:	401c0000 	.word	0x401c0000
 8004590:	40140000 	.word	0x40140000
 8004594:	3fe00000 	.word	0x3fe00000
 8004598:	4630      	mov	r0, r6
 800459a:	4639      	mov	r1, r7
 800459c:	f7fb ff9c 	bl	80004d8 <__aeabi_dmul>
 80045a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045a6:	9c03      	ldr	r4, [sp, #12]
 80045a8:	9314      	str	r3, [sp, #80]	; 0x50
 80045aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ae:	f7fc fa43 	bl	8000a38 <__aeabi_d2iz>
 80045b2:	9015      	str	r0, [sp, #84]	; 0x54
 80045b4:	f7fb ff26 	bl	8000404 <__aeabi_i2d>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c0:	f7fb fdd2 	bl	8000168 <__aeabi_dsub>
 80045c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045c6:	4606      	mov	r6, r0
 80045c8:	3330      	adds	r3, #48	; 0x30
 80045ca:	f804 3b01 	strb.w	r3, [r4], #1
 80045ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045d0:	460f      	mov	r7, r1
 80045d2:	429c      	cmp	r4, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	d124      	bne.n	8004624 <_dtoa_r+0x63c>
 80045da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045de:	4baf      	ldr	r3, [pc, #700]	; (800489c <_dtoa_r+0x8b4>)
 80045e0:	f7fb fdc4 	bl	800016c <__adddf3>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fc fa04 	bl	80009f8 <__aeabi_dcmpgt>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d163      	bne.n	80046bc <_dtoa_r+0x6d4>
 80045f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045f8:	2000      	movs	r0, #0
 80045fa:	49a8      	ldr	r1, [pc, #672]	; (800489c <_dtoa_r+0x8b4>)
 80045fc:	f7fb fdb4 	bl	8000168 <__aeabi_dsub>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4630      	mov	r0, r6
 8004606:	4639      	mov	r1, r7
 8004608:	f7fc f9d8 	bl	80009bc <__aeabi_dcmplt>
 800460c:	2800      	cmp	r0, #0
 800460e:	f43f af1e 	beq.w	800444e <_dtoa_r+0x466>
 8004612:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004614:	1e7b      	subs	r3, r7, #1
 8004616:	9314      	str	r3, [sp, #80]	; 0x50
 8004618:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800461c:	2b30      	cmp	r3, #48	; 0x30
 800461e:	d0f8      	beq.n	8004612 <_dtoa_r+0x62a>
 8004620:	46c3      	mov	fp, r8
 8004622:	e03b      	b.n	800469c <_dtoa_r+0x6b4>
 8004624:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <_dtoa_r+0x8b8>)
 8004626:	f7fb ff57 	bl	80004d8 <__aeabi_dmul>
 800462a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800462e:	e7bc      	b.n	80045aa <_dtoa_r+0x5c2>
 8004630:	9f03      	ldr	r7, [sp, #12]
 8004632:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f7fc f875 	bl	800072c <__aeabi_ddiv>
 8004642:	f7fc f9f9 	bl	8000a38 <__aeabi_d2iz>
 8004646:	4604      	mov	r4, r0
 8004648:	f7fb fedc 	bl	8000404 <__aeabi_i2d>
 800464c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004650:	f7fb ff42 	bl	80004d8 <__aeabi_dmul>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fb fd84 	bl	8000168 <__aeabi_dsub>
 8004660:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004664:	f807 6b01 	strb.w	r6, [r7], #1
 8004668:	9e03      	ldr	r6, [sp, #12]
 800466a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800466e:	1bbe      	subs	r6, r7, r6
 8004670:	45b4      	cmp	ip, r6
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	d136      	bne.n	80046e6 <_dtoa_r+0x6fe>
 8004678:	f7fb fd78 	bl	800016c <__adddf3>
 800467c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004680:	4680      	mov	r8, r0
 8004682:	4689      	mov	r9, r1
 8004684:	f7fc f9b8 	bl	80009f8 <__aeabi_dcmpgt>
 8004688:	bb58      	cbnz	r0, 80046e2 <_dtoa_r+0x6fa>
 800468a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f7fc f989 	bl	80009a8 <__aeabi_dcmpeq>
 8004696:	b108      	cbz	r0, 800469c <_dtoa_r+0x6b4>
 8004698:	07e3      	lsls	r3, r4, #31
 800469a:	d422      	bmi.n	80046e2 <_dtoa_r+0x6fa>
 800469c:	4651      	mov	r1, sl
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 fd7c 	bl	800519c <_Bfree>
 80046a4:	2300      	movs	r3, #0
 80046a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80046a8:	703b      	strb	r3, [r7, #0]
 80046aa:	f10b 0301 	add.w	r3, fp, #1
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f43f ace6 	beq.w	8004084 <_dtoa_r+0x9c>
 80046b8:	601f      	str	r7, [r3, #0]
 80046ba:	e4e3      	b.n	8004084 <_dtoa_r+0x9c>
 80046bc:	4627      	mov	r7, r4
 80046be:	463b      	mov	r3, r7
 80046c0:	461f      	mov	r7, r3
 80046c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046c6:	2a39      	cmp	r2, #57	; 0x39
 80046c8:	d107      	bne.n	80046da <_dtoa_r+0x6f2>
 80046ca:	9a03      	ldr	r2, [sp, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1f7      	bne.n	80046c0 <_dtoa_r+0x6d8>
 80046d0:	2230      	movs	r2, #48	; 0x30
 80046d2:	9903      	ldr	r1, [sp, #12]
 80046d4:	f108 0801 	add.w	r8, r8, #1
 80046d8:	700a      	strb	r2, [r1, #0]
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	3201      	adds	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e79e      	b.n	8004620 <_dtoa_r+0x638>
 80046e2:	46d8      	mov	r8, fp
 80046e4:	e7eb      	b.n	80046be <_dtoa_r+0x6d6>
 80046e6:	2200      	movs	r2, #0
 80046e8:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <_dtoa_r+0x8b8>)
 80046ea:	f7fb fef5 	bl	80004d8 <__aeabi_dmul>
 80046ee:	2200      	movs	r2, #0
 80046f0:	2300      	movs	r3, #0
 80046f2:	4680      	mov	r8, r0
 80046f4:	4689      	mov	r9, r1
 80046f6:	f7fc f957 	bl	80009a8 <__aeabi_dcmpeq>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d09b      	beq.n	8004636 <_dtoa_r+0x64e>
 80046fe:	e7cd      	b.n	800469c <_dtoa_r+0x6b4>
 8004700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004702:	2a00      	cmp	r2, #0
 8004704:	f000 80c4 	beq.w	8004890 <_dtoa_r+0x8a8>
 8004708:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800470a:	2a01      	cmp	r2, #1
 800470c:	f300 80a8 	bgt.w	8004860 <_dtoa_r+0x878>
 8004710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004712:	2a00      	cmp	r2, #0
 8004714:	f000 80a0 	beq.w	8004858 <_dtoa_r+0x870>
 8004718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800471c:	464f      	mov	r7, r9
 800471e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004722:	2101      	movs	r1, #1
 8004724:	441a      	add	r2, r3
 8004726:	4628      	mov	r0, r5
 8004728:	4499      	add	r9, r3
 800472a:	9209      	str	r2, [sp, #36]	; 0x24
 800472c:	f000 fdec 	bl	8005308 <__i2b>
 8004730:	4606      	mov	r6, r0
 8004732:	b15f      	cbz	r7, 800474c <_dtoa_r+0x764>
 8004734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	dd08      	ble.n	800474c <_dtoa_r+0x764>
 800473a:	42bb      	cmp	r3, r7
 800473c:	bfa8      	it	ge
 800473e:	463b      	movge	r3, r7
 8004740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004742:	eba9 0903 	sub.w	r9, r9, r3
 8004746:	1aff      	subs	r7, r7, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	9309      	str	r3, [sp, #36]	; 0x24
 800474c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474e:	b1f3      	cbz	r3, 800478e <_dtoa_r+0x7a6>
 8004750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a0 	beq.w	8004898 <_dtoa_r+0x8b0>
 8004758:	2c00      	cmp	r4, #0
 800475a:	dd10      	ble.n	800477e <_dtoa_r+0x796>
 800475c:	4631      	mov	r1, r6
 800475e:	4622      	mov	r2, r4
 8004760:	4628      	mov	r0, r5
 8004762:	f000 fe8f 	bl	8005484 <__pow5mult>
 8004766:	4652      	mov	r2, sl
 8004768:	4601      	mov	r1, r0
 800476a:	4606      	mov	r6, r0
 800476c:	4628      	mov	r0, r5
 800476e:	f000 fde1 	bl	8005334 <__multiply>
 8004772:	4680      	mov	r8, r0
 8004774:	4651      	mov	r1, sl
 8004776:	4628      	mov	r0, r5
 8004778:	f000 fd10 	bl	800519c <_Bfree>
 800477c:	46c2      	mov	sl, r8
 800477e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004780:	1b1a      	subs	r2, r3, r4
 8004782:	d004      	beq.n	800478e <_dtoa_r+0x7a6>
 8004784:	4651      	mov	r1, sl
 8004786:	4628      	mov	r0, r5
 8004788:	f000 fe7c 	bl	8005484 <__pow5mult>
 800478c:	4682      	mov	sl, r0
 800478e:	2101      	movs	r1, #1
 8004790:	4628      	mov	r0, r5
 8004792:	f000 fdb9 	bl	8005308 <__i2b>
 8004796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004798:	4604      	mov	r4, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	f340 8082 	ble.w	80048a4 <_dtoa_r+0x8bc>
 80047a0:	461a      	mov	r2, r3
 80047a2:	4601      	mov	r1, r0
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 fe6d 	bl	8005484 <__pow5mult>
 80047aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ac:	4604      	mov	r4, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	dd7b      	ble.n	80048aa <_dtoa_r+0x8c2>
 80047b2:	f04f 0800 	mov.w	r8, #0
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047bc:	6918      	ldr	r0, [r3, #16]
 80047be:	f000 fd55 	bl	800526c <__hi0bits>
 80047c2:	f1c0 0020 	rsb	r0, r0, #32
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	4418      	add	r0, r3
 80047ca:	f010 001f 	ands.w	r0, r0, #31
 80047ce:	f000 8092 	beq.w	80048f6 <_dtoa_r+0x90e>
 80047d2:	f1c0 0320 	rsb	r3, r0, #32
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	f340 8085 	ble.w	80048e6 <_dtoa_r+0x8fe>
 80047dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047de:	f1c0 001c 	rsb	r0, r0, #28
 80047e2:	4403      	add	r3, r0
 80047e4:	4481      	add	r9, r0
 80047e6:	4407      	add	r7, r0
 80047e8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ea:	f1b9 0f00 	cmp.w	r9, #0
 80047ee:	dd05      	ble.n	80047fc <_dtoa_r+0x814>
 80047f0:	4651      	mov	r1, sl
 80047f2:	464a      	mov	r2, r9
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 fe9f 	bl	8005538 <__lshift>
 80047fa:	4682      	mov	sl, r0
 80047fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	dd05      	ble.n	800480e <_dtoa_r+0x826>
 8004802:	4621      	mov	r1, r4
 8004804:	461a      	mov	r2, r3
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fe96 	bl	8005538 <__lshift>
 800480c:	4604      	mov	r4, r0
 800480e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d072      	beq.n	80048fa <_dtoa_r+0x912>
 8004814:	4621      	mov	r1, r4
 8004816:	4650      	mov	r0, sl
 8004818:	f000 fefa 	bl	8005610 <__mcmp>
 800481c:	2800      	cmp	r0, #0
 800481e:	da6c      	bge.n	80048fa <_dtoa_r+0x912>
 8004820:	2300      	movs	r3, #0
 8004822:	4651      	mov	r1, sl
 8004824:	220a      	movs	r2, #10
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fcda 	bl	80051e0 <__multadd>
 800482c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800482e:	4682      	mov	sl, r0
 8004830:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 81ac 	beq.w	8004b92 <_dtoa_r+0xbaa>
 800483a:	2300      	movs	r3, #0
 800483c:	4631      	mov	r1, r6
 800483e:	220a      	movs	r2, #10
 8004840:	4628      	mov	r0, r5
 8004842:	f000 fccd 	bl	80051e0 <__multadd>
 8004846:	9b06      	ldr	r3, [sp, #24]
 8004848:	4606      	mov	r6, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f300 8093 	bgt.w	8004976 <_dtoa_r+0x98e>
 8004850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004852:	2b02      	cmp	r3, #2
 8004854:	dc59      	bgt.n	800490a <_dtoa_r+0x922>
 8004856:	e08e      	b.n	8004976 <_dtoa_r+0x98e>
 8004858:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800485a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800485e:	e75d      	b.n	800471c <_dtoa_r+0x734>
 8004860:	9b08      	ldr	r3, [sp, #32]
 8004862:	1e5c      	subs	r4, r3, #1
 8004864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004866:	42a3      	cmp	r3, r4
 8004868:	bfbf      	itttt	lt
 800486a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800486c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800486e:	1ae3      	sublt	r3, r4, r3
 8004870:	18d2      	addlt	r2, r2, r3
 8004872:	bfa8      	it	ge
 8004874:	1b1c      	subge	r4, r3, r4
 8004876:	9b08      	ldr	r3, [sp, #32]
 8004878:	bfbe      	ittt	lt
 800487a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800487c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800487e:	2400      	movlt	r4, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	bfb5      	itete	lt
 8004884:	eba9 0703 	sublt.w	r7, r9, r3
 8004888:	464f      	movge	r7, r9
 800488a:	2300      	movlt	r3, #0
 800488c:	9b08      	ldrge	r3, [sp, #32]
 800488e:	e747      	b.n	8004720 <_dtoa_r+0x738>
 8004890:	464f      	mov	r7, r9
 8004892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004894:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004896:	e74c      	b.n	8004732 <_dtoa_r+0x74a>
 8004898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800489a:	e773      	b.n	8004784 <_dtoa_r+0x79c>
 800489c:	3fe00000 	.word	0x3fe00000
 80048a0:	40240000 	.word	0x40240000
 80048a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	dc18      	bgt.n	80048dc <_dtoa_r+0x8f4>
 80048aa:	9b04      	ldr	r3, [sp, #16]
 80048ac:	b9b3      	cbnz	r3, 80048dc <_dtoa_r+0x8f4>
 80048ae:	9b05      	ldr	r3, [sp, #20]
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	b993      	cbnz	r3, 80048dc <_dtoa_r+0x8f4>
 80048b6:	9b05      	ldr	r3, [sp, #20]
 80048b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048bc:	0d1b      	lsrs	r3, r3, #20
 80048be:	051b      	lsls	r3, r3, #20
 80048c0:	b17b      	cbz	r3, 80048e2 <_dtoa_r+0x8fa>
 80048c2:	f04f 0801 	mov.w	r8, #1
 80048c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c8:	f109 0901 	add.w	r9, r9, #1
 80048cc:	3301      	adds	r3, #1
 80048ce:	9309      	str	r3, [sp, #36]	; 0x24
 80048d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f47f af6f 	bne.w	80047b6 <_dtoa_r+0x7ce>
 80048d8:	2001      	movs	r0, #1
 80048da:	e774      	b.n	80047c6 <_dtoa_r+0x7de>
 80048dc:	f04f 0800 	mov.w	r8, #0
 80048e0:	e7f6      	b.n	80048d0 <_dtoa_r+0x8e8>
 80048e2:	4698      	mov	r8, r3
 80048e4:	e7f4      	b.n	80048d0 <_dtoa_r+0x8e8>
 80048e6:	d080      	beq.n	80047ea <_dtoa_r+0x802>
 80048e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ea:	331c      	adds	r3, #28
 80048ec:	441a      	add	r2, r3
 80048ee:	4499      	add	r9, r3
 80048f0:	441f      	add	r7, r3
 80048f2:	9209      	str	r2, [sp, #36]	; 0x24
 80048f4:	e779      	b.n	80047ea <_dtoa_r+0x802>
 80048f6:	4603      	mov	r3, r0
 80048f8:	e7f6      	b.n	80048e8 <_dtoa_r+0x900>
 80048fa:	9b08      	ldr	r3, [sp, #32]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dc34      	bgt.n	800496a <_dtoa_r+0x982>
 8004900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004902:	2b02      	cmp	r3, #2
 8004904:	dd31      	ble.n	800496a <_dtoa_r+0x982>
 8004906:	9b08      	ldr	r3, [sp, #32]
 8004908:	9306      	str	r3, [sp, #24]
 800490a:	9b06      	ldr	r3, [sp, #24]
 800490c:	b963      	cbnz	r3, 8004928 <_dtoa_r+0x940>
 800490e:	4621      	mov	r1, r4
 8004910:	2205      	movs	r2, #5
 8004912:	4628      	mov	r0, r5
 8004914:	f000 fc64 	bl	80051e0 <__multadd>
 8004918:	4601      	mov	r1, r0
 800491a:	4604      	mov	r4, r0
 800491c:	4650      	mov	r0, sl
 800491e:	f000 fe77 	bl	8005610 <__mcmp>
 8004922:	2800      	cmp	r0, #0
 8004924:	f73f adbf 	bgt.w	80044a6 <_dtoa_r+0x4be>
 8004928:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800492a:	9f03      	ldr	r7, [sp, #12]
 800492c:	ea6f 0b03 	mvn.w	fp, r3
 8004930:	f04f 0800 	mov.w	r8, #0
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 fc30 	bl	800519c <_Bfree>
 800493c:	2e00      	cmp	r6, #0
 800493e:	f43f aead 	beq.w	800469c <_dtoa_r+0x6b4>
 8004942:	f1b8 0f00 	cmp.w	r8, #0
 8004946:	d005      	beq.n	8004954 <_dtoa_r+0x96c>
 8004948:	45b0      	cmp	r8, r6
 800494a:	d003      	beq.n	8004954 <_dtoa_r+0x96c>
 800494c:	4641      	mov	r1, r8
 800494e:	4628      	mov	r0, r5
 8004950:	f000 fc24 	bl	800519c <_Bfree>
 8004954:	4631      	mov	r1, r6
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fc20 	bl	800519c <_Bfree>
 800495c:	e69e      	b.n	800469c <_dtoa_r+0x6b4>
 800495e:	2400      	movs	r4, #0
 8004960:	4626      	mov	r6, r4
 8004962:	e7e1      	b.n	8004928 <_dtoa_r+0x940>
 8004964:	46c3      	mov	fp, r8
 8004966:	4626      	mov	r6, r4
 8004968:	e59d      	b.n	80044a6 <_dtoa_r+0x4be>
 800496a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80c8 	beq.w	8004b02 <_dtoa_r+0xb1a>
 8004972:	9b08      	ldr	r3, [sp, #32]
 8004974:	9306      	str	r3, [sp, #24]
 8004976:	2f00      	cmp	r7, #0
 8004978:	dd05      	ble.n	8004986 <_dtoa_r+0x99e>
 800497a:	4631      	mov	r1, r6
 800497c:	463a      	mov	r2, r7
 800497e:	4628      	mov	r0, r5
 8004980:	f000 fdda 	bl	8005538 <__lshift>
 8004984:	4606      	mov	r6, r0
 8004986:	f1b8 0f00 	cmp.w	r8, #0
 800498a:	d05b      	beq.n	8004a44 <_dtoa_r+0xa5c>
 800498c:	4628      	mov	r0, r5
 800498e:	6871      	ldr	r1, [r6, #4]
 8004990:	f000 fbc4 	bl	800511c <_Balloc>
 8004994:	4607      	mov	r7, r0
 8004996:	b928      	cbnz	r0, 80049a4 <_dtoa_r+0x9bc>
 8004998:	4602      	mov	r2, r0
 800499a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800499e:	4b81      	ldr	r3, [pc, #516]	; (8004ba4 <_dtoa_r+0xbbc>)
 80049a0:	f7ff bb36 	b.w	8004010 <_dtoa_r+0x28>
 80049a4:	6932      	ldr	r2, [r6, #16]
 80049a6:	f106 010c 	add.w	r1, r6, #12
 80049aa:	3202      	adds	r2, #2
 80049ac:	0092      	lsls	r2, r2, #2
 80049ae:	300c      	adds	r0, #12
 80049b0:	f001 f80e 	bl	80059d0 <memcpy>
 80049b4:	2201      	movs	r2, #1
 80049b6:	4639      	mov	r1, r7
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 fdbd 	bl	8005538 <__lshift>
 80049be:	46b0      	mov	r8, r6
 80049c0:	4606      	mov	r6, r0
 80049c2:	9b03      	ldr	r3, [sp, #12]
 80049c4:	9a03      	ldr	r2, [sp, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	9308      	str	r3, [sp, #32]
 80049ca:	9b06      	ldr	r3, [sp, #24]
 80049cc:	4413      	add	r3, r2
 80049ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80049d0:	9b04      	ldr	r3, [sp, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	930a      	str	r3, [sp, #40]	; 0x28
 80049d8:	9b08      	ldr	r3, [sp, #32]
 80049da:	4621      	mov	r1, r4
 80049dc:	3b01      	subs	r3, #1
 80049de:	4650      	mov	r0, sl
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	f7ff fa78 	bl	8003ed6 <quorem>
 80049e6:	4641      	mov	r1, r8
 80049e8:	9006      	str	r0, [sp, #24]
 80049ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049ee:	4650      	mov	r0, sl
 80049f0:	f000 fe0e 	bl	8005610 <__mcmp>
 80049f4:	4632      	mov	r2, r6
 80049f6:	9009      	str	r0, [sp, #36]	; 0x24
 80049f8:	4621      	mov	r1, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fe24 	bl	8005648 <__mdiff>
 8004a00:	68c2      	ldr	r2, [r0, #12]
 8004a02:	4607      	mov	r7, r0
 8004a04:	bb02      	cbnz	r2, 8004a48 <_dtoa_r+0xa60>
 8004a06:	4601      	mov	r1, r0
 8004a08:	4650      	mov	r0, sl
 8004a0a:	f000 fe01 	bl	8005610 <__mcmp>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4639      	mov	r1, r7
 8004a12:	4628      	mov	r0, r5
 8004a14:	920c      	str	r2, [sp, #48]	; 0x30
 8004a16:	f000 fbc1 	bl	800519c <_Bfree>
 8004a1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a1e:	9f08      	ldr	r7, [sp, #32]
 8004a20:	ea43 0102 	orr.w	r1, r3, r2
 8004a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a26:	4319      	orrs	r1, r3
 8004a28:	d110      	bne.n	8004a4c <_dtoa_r+0xa64>
 8004a2a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a2e:	d029      	beq.n	8004a84 <_dtoa_r+0xa9c>
 8004a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	dd02      	ble.n	8004a3c <_dtoa_r+0xa54>
 8004a36:	9b06      	ldr	r3, [sp, #24]
 8004a38:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	f883 9000 	strb.w	r9, [r3]
 8004a42:	e777      	b.n	8004934 <_dtoa_r+0x94c>
 8004a44:	4630      	mov	r0, r6
 8004a46:	e7ba      	b.n	80049be <_dtoa_r+0x9d6>
 8004a48:	2201      	movs	r2, #1
 8004a4a:	e7e1      	b.n	8004a10 <_dtoa_r+0xa28>
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db04      	blt.n	8004a5c <_dtoa_r+0xa74>
 8004a52:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004a54:	430b      	orrs	r3, r1
 8004a56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	d120      	bne.n	8004a9e <_dtoa_r+0xab6>
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	dded      	ble.n	8004a3c <_dtoa_r+0xa54>
 8004a60:	4651      	mov	r1, sl
 8004a62:	2201      	movs	r2, #1
 8004a64:	4628      	mov	r0, r5
 8004a66:	f000 fd67 	bl	8005538 <__lshift>
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4682      	mov	sl, r0
 8004a6e:	f000 fdcf 	bl	8005610 <__mcmp>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	dc03      	bgt.n	8004a7e <_dtoa_r+0xa96>
 8004a76:	d1e1      	bne.n	8004a3c <_dtoa_r+0xa54>
 8004a78:	f019 0f01 	tst.w	r9, #1
 8004a7c:	d0de      	beq.n	8004a3c <_dtoa_r+0xa54>
 8004a7e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a82:	d1d8      	bne.n	8004a36 <_dtoa_r+0xa4e>
 8004a84:	2339      	movs	r3, #57	; 0x39
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	7013      	strb	r3, [r2, #0]
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	461f      	mov	r7, r3
 8004a8e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	2a39      	cmp	r2, #57	; 0x39
 8004a96:	d06b      	beq.n	8004b70 <_dtoa_r+0xb88>
 8004a98:	3201      	adds	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e74a      	b.n	8004934 <_dtoa_r+0x94c>
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	dd07      	ble.n	8004ab2 <_dtoa_r+0xaca>
 8004aa2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004aa6:	d0ed      	beq.n	8004a84 <_dtoa_r+0xa9c>
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	f109 0301 	add.w	r3, r9, #1
 8004aae:	7013      	strb	r3, [r2, #0]
 8004ab0:	e740      	b.n	8004934 <_dtoa_r+0x94c>
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ab6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d042      	beq.n	8004b44 <_dtoa_r+0xb5c>
 8004abe:	4651      	mov	r1, sl
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	220a      	movs	r2, #10
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f000 fb8b 	bl	80051e0 <__multadd>
 8004aca:	45b0      	cmp	r8, r6
 8004acc:	4682      	mov	sl, r0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f04f 020a 	mov.w	r2, #10
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	4628      	mov	r0, r5
 8004ada:	d107      	bne.n	8004aec <_dtoa_r+0xb04>
 8004adc:	f000 fb80 	bl	80051e0 <__multadd>
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	9b08      	ldr	r3, [sp, #32]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	9308      	str	r3, [sp, #32]
 8004aea:	e775      	b.n	80049d8 <_dtoa_r+0x9f0>
 8004aec:	f000 fb78 	bl	80051e0 <__multadd>
 8004af0:	4631      	mov	r1, r6
 8004af2:	4680      	mov	r8, r0
 8004af4:	2300      	movs	r3, #0
 8004af6:	220a      	movs	r2, #10
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fb71 	bl	80051e0 <__multadd>
 8004afe:	4606      	mov	r6, r0
 8004b00:	e7f0      	b.n	8004ae4 <_dtoa_r+0xafc>
 8004b02:	9b08      	ldr	r3, [sp, #32]
 8004b04:	9306      	str	r3, [sp, #24]
 8004b06:	9f03      	ldr	r7, [sp, #12]
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4650      	mov	r0, sl
 8004b0c:	f7ff f9e3 	bl	8003ed6 <quorem>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004b16:	f807 9b01 	strb.w	r9, [r7], #1
 8004b1a:	1afa      	subs	r2, r7, r3
 8004b1c:	9b06      	ldr	r3, [sp, #24]
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	dd07      	ble.n	8004b32 <_dtoa_r+0xb4a>
 8004b22:	4651      	mov	r1, sl
 8004b24:	2300      	movs	r3, #0
 8004b26:	220a      	movs	r2, #10
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 fb59 	bl	80051e0 <__multadd>
 8004b2e:	4682      	mov	sl, r0
 8004b30:	e7ea      	b.n	8004b08 <_dtoa_r+0xb20>
 8004b32:	9b06      	ldr	r3, [sp, #24]
 8004b34:	f04f 0800 	mov.w	r8, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bfcc      	ite	gt
 8004b3c:	461f      	movgt	r7, r3
 8004b3e:	2701      	movle	r7, #1
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	441f      	add	r7, r3
 8004b44:	4651      	mov	r1, sl
 8004b46:	2201      	movs	r2, #1
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 fcf5 	bl	8005538 <__lshift>
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4682      	mov	sl, r0
 8004b52:	f000 fd5d 	bl	8005610 <__mcmp>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	dc97      	bgt.n	8004a8a <_dtoa_r+0xaa2>
 8004b5a:	d102      	bne.n	8004b62 <_dtoa_r+0xb7a>
 8004b5c:	f019 0f01 	tst.w	r9, #1
 8004b60:	d193      	bne.n	8004a8a <_dtoa_r+0xaa2>
 8004b62:	463b      	mov	r3, r7
 8004b64:	461f      	mov	r7, r3
 8004b66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b6a:	2a30      	cmp	r2, #48	; 0x30
 8004b6c:	d0fa      	beq.n	8004b64 <_dtoa_r+0xb7c>
 8004b6e:	e6e1      	b.n	8004934 <_dtoa_r+0x94c>
 8004b70:	9a03      	ldr	r2, [sp, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d18a      	bne.n	8004a8c <_dtoa_r+0xaa4>
 8004b76:	2331      	movs	r3, #49	; 0x31
 8004b78:	f10b 0b01 	add.w	fp, fp, #1
 8004b7c:	e797      	b.n	8004aae <_dtoa_r+0xac6>
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <_dtoa_r+0xbc0>)
 8004b80:	f7ff ba9f 	b.w	80040c2 <_dtoa_r+0xda>
 8004b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f aa77 	bne.w	800407a <_dtoa_r+0x92>
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <_dtoa_r+0xbc4>)
 8004b8e:	f7ff ba98 	b.w	80040c2 <_dtoa_r+0xda>
 8004b92:	9b06      	ldr	r3, [sp, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dcb6      	bgt.n	8004b06 <_dtoa_r+0xb1e>
 8004b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	f73f aeb5 	bgt.w	800490a <_dtoa_r+0x922>
 8004ba0:	e7b1      	b.n	8004b06 <_dtoa_r+0xb1e>
 8004ba2:	bf00      	nop
 8004ba4:	080061ae 	.word	0x080061ae
 8004ba8:	0800610e 	.word	0x0800610e
 8004bac:	08006132 	.word	0x08006132

08004bb0 <__ssputs_r>:
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	461f      	mov	r7, r3
 8004bb6:	688e      	ldr	r6, [r1, #8]
 8004bb8:	4682      	mov	sl, r0
 8004bba:	42be      	cmp	r6, r7
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4690      	mov	r8, r2
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	d82c      	bhi.n	8004c1e <__ssputs_r+0x6e>
 8004bc4:	898a      	ldrh	r2, [r1, #12]
 8004bc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bca:	d026      	beq.n	8004c1a <__ssputs_r+0x6a>
 8004bcc:	6965      	ldr	r5, [r4, #20]
 8004bce:	6909      	ldr	r1, [r1, #16]
 8004bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bd4:	eba3 0901 	sub.w	r9, r3, r1
 8004bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bdc:	1c7b      	adds	r3, r7, #1
 8004bde:	444b      	add	r3, r9
 8004be0:	106d      	asrs	r5, r5, #1
 8004be2:	429d      	cmp	r5, r3
 8004be4:	bf38      	it	cc
 8004be6:	461d      	movcc	r5, r3
 8004be8:	0553      	lsls	r3, r2, #21
 8004bea:	d527      	bpl.n	8004c3c <__ssputs_r+0x8c>
 8004bec:	4629      	mov	r1, r5
 8004bee:	f000 f95f 	bl	8004eb0 <_malloc_r>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	b360      	cbz	r0, 8004c50 <__ssputs_r+0xa0>
 8004bf6:	464a      	mov	r2, r9
 8004bf8:	6921      	ldr	r1, [r4, #16]
 8004bfa:	f000 fee9 	bl	80059d0 <memcpy>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	6126      	str	r6, [r4, #16]
 8004c0c:	444e      	add	r6, r9
 8004c0e:	6026      	str	r6, [r4, #0]
 8004c10:	463e      	mov	r6, r7
 8004c12:	6165      	str	r5, [r4, #20]
 8004c14:	eba5 0509 	sub.w	r5, r5, r9
 8004c18:	60a5      	str	r5, [r4, #8]
 8004c1a:	42be      	cmp	r6, r7
 8004c1c:	d900      	bls.n	8004c20 <__ssputs_r+0x70>
 8004c1e:	463e      	mov	r6, r7
 8004c20:	4632      	mov	r2, r6
 8004c22:	4641      	mov	r1, r8
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	f000 fe63 	bl	80058f0 <memmove>
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	68a3      	ldr	r3, [r4, #8]
 8004c2e:	1b9b      	subs	r3, r3, r6
 8004c30:	60a3      	str	r3, [r4, #8]
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	4433      	add	r3, r6
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	f000 fe28 	bl	8005892 <_realloc_r>
 8004c42:	4606      	mov	r6, r0
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d1e0      	bne.n	8004c0a <__ssputs_r+0x5a>
 8004c48:	4650      	mov	r0, sl
 8004c4a:	6921      	ldr	r1, [r4, #16]
 8004c4c:	f000 ff00 	bl	8005a50 <_free_r>
 8004c50:	230c      	movs	r3, #12
 8004c52:	f8ca 3000 	str.w	r3, [sl]
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c60:	81a3      	strh	r3, [r4, #12]
 8004c62:	e7e9      	b.n	8004c38 <__ssputs_r+0x88>

08004c64 <_svfiprintf_r>:
 8004c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	4698      	mov	r8, r3
 8004c6a:	898b      	ldrh	r3, [r1, #12]
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	460d      	mov	r5, r1
 8004c72:	4614      	mov	r4, r2
 8004c74:	b09d      	sub	sp, #116	; 0x74
 8004c76:	d50e      	bpl.n	8004c96 <_svfiprintf_r+0x32>
 8004c78:	690b      	ldr	r3, [r1, #16]
 8004c7a:	b963      	cbnz	r3, 8004c96 <_svfiprintf_r+0x32>
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	f000 f917 	bl	8004eb0 <_malloc_r>
 8004c82:	6028      	str	r0, [r5, #0]
 8004c84:	6128      	str	r0, [r5, #16]
 8004c86:	b920      	cbnz	r0, 8004c92 <_svfiprintf_r+0x2e>
 8004c88:	230c      	movs	r3, #12
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c90:	e0d0      	b.n	8004e34 <_svfiprintf_r+0x1d0>
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	616b      	str	r3, [r5, #20]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9a:	2320      	movs	r3, #32
 8004c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ca0:	2330      	movs	r3, #48	; 0x30
 8004ca2:	f04f 0901 	mov.w	r9, #1
 8004ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004caa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004e4c <_svfiprintf_r+0x1e8>
 8004cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	469a      	mov	sl, r3
 8004cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cba:	b10a      	cbz	r2, 8004cc0 <_svfiprintf_r+0x5c>
 8004cbc:	2a25      	cmp	r2, #37	; 0x25
 8004cbe:	d1f9      	bne.n	8004cb4 <_svfiprintf_r+0x50>
 8004cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cc4:	d00b      	beq.n	8004cde <_svfiprintf_r+0x7a>
 8004cc6:	465b      	mov	r3, fp
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4638      	mov	r0, r7
 8004cce:	f7ff ff6f 	bl	8004bb0 <__ssputs_r>
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f000 80a9 	beq.w	8004e2a <_svfiprintf_r+0x1c6>
 8004cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cda:	445a      	add	r2, fp
 8004cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cde:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80a1 	beq.w	8004e2a <_svfiprintf_r+0x1c6>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cf2:	f10a 0a01 	add.w	sl, sl, #1
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	9307      	str	r3, [sp, #28]
 8004cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8004d00:	4654      	mov	r4, sl
 8004d02:	2205      	movs	r2, #5
 8004d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d08:	4850      	ldr	r0, [pc, #320]	; (8004e4c <_svfiprintf_r+0x1e8>)
 8004d0a:	f7ff f8d6 	bl	8003eba <memchr>
 8004d0e:	9a04      	ldr	r2, [sp, #16]
 8004d10:	b9d8      	cbnz	r0, 8004d4a <_svfiprintf_r+0xe6>
 8004d12:	06d0      	lsls	r0, r2, #27
 8004d14:	bf44      	itt	mi
 8004d16:	2320      	movmi	r3, #32
 8004d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d1c:	0711      	lsls	r1, r2, #28
 8004d1e:	bf44      	itt	mi
 8004d20:	232b      	movmi	r3, #43	; 0x2b
 8004d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d26:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2c:	d015      	beq.n	8004d5a <_svfiprintf_r+0xf6>
 8004d2e:	4654      	mov	r4, sl
 8004d30:	2000      	movs	r0, #0
 8004d32:	f04f 0c0a 	mov.w	ip, #10
 8004d36:	9a07      	ldr	r2, [sp, #28]
 8004d38:	4621      	mov	r1, r4
 8004d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d3e:	3b30      	subs	r3, #48	; 0x30
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d94d      	bls.n	8004de0 <_svfiprintf_r+0x17c>
 8004d44:	b1b0      	cbz	r0, 8004d74 <_svfiprintf_r+0x110>
 8004d46:	9207      	str	r2, [sp, #28]
 8004d48:	e014      	b.n	8004d74 <_svfiprintf_r+0x110>
 8004d4a:	eba0 0308 	sub.w	r3, r0, r8
 8004d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d52:	4313      	orrs	r3, r2
 8004d54:	46a2      	mov	sl, r4
 8004d56:	9304      	str	r3, [sp, #16]
 8004d58:	e7d2      	b.n	8004d00 <_svfiprintf_r+0x9c>
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	9103      	str	r1, [sp, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bfbb      	ittet	lt
 8004d66:	425b      	neglt	r3, r3
 8004d68:	f042 0202 	orrlt.w	r2, r2, #2
 8004d6c:	9307      	strge	r3, [sp, #28]
 8004d6e:	9307      	strlt	r3, [sp, #28]
 8004d70:	bfb8      	it	lt
 8004d72:	9204      	strlt	r2, [sp, #16]
 8004d74:	7823      	ldrb	r3, [r4, #0]
 8004d76:	2b2e      	cmp	r3, #46	; 0x2e
 8004d78:	d10c      	bne.n	8004d94 <_svfiprintf_r+0x130>
 8004d7a:	7863      	ldrb	r3, [r4, #1]
 8004d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7e:	d134      	bne.n	8004dea <_svfiprintf_r+0x186>
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	3402      	adds	r4, #2
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	9203      	str	r2, [sp, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bfb8      	it	lt
 8004d8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d92:	9305      	str	r3, [sp, #20]
 8004d94:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004e50 <_svfiprintf_r+0x1ec>
 8004d98:	2203      	movs	r2, #3
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	7821      	ldrb	r1, [r4, #0]
 8004d9e:	f7ff f88c 	bl	8003eba <memchr>
 8004da2:	b138      	cbz	r0, 8004db4 <_svfiprintf_r+0x150>
 8004da4:	2240      	movs	r2, #64	; 0x40
 8004da6:	9b04      	ldr	r3, [sp, #16]
 8004da8:	eba0 000a 	sub.w	r0, r0, sl
 8004dac:	4082      	lsls	r2, r0
 8004dae:	4313      	orrs	r3, r2
 8004db0:	3401      	adds	r4, #1
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db8:	2206      	movs	r2, #6
 8004dba:	4826      	ldr	r0, [pc, #152]	; (8004e54 <_svfiprintf_r+0x1f0>)
 8004dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dc0:	f7ff f87b 	bl	8003eba <memchr>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d038      	beq.n	8004e3a <_svfiprintf_r+0x1d6>
 8004dc8:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <_svfiprintf_r+0x1f4>)
 8004dca:	bb1b      	cbnz	r3, 8004e14 <_svfiprintf_r+0x1b0>
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	3307      	adds	r3, #7
 8004dd0:	f023 0307 	bic.w	r3, r3, #7
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dda:	4433      	add	r3, r6
 8004ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dde:	e768      	b.n	8004cb2 <_svfiprintf_r+0x4e>
 8004de0:	460c      	mov	r4, r1
 8004de2:	2001      	movs	r0, #1
 8004de4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004de8:	e7a6      	b.n	8004d38 <_svfiprintf_r+0xd4>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f04f 0c0a 	mov.w	ip, #10
 8004df0:	4619      	mov	r1, r3
 8004df2:	3401      	adds	r4, #1
 8004df4:	9305      	str	r3, [sp, #20]
 8004df6:	4620      	mov	r0, r4
 8004df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dfc:	3a30      	subs	r2, #48	; 0x30
 8004dfe:	2a09      	cmp	r2, #9
 8004e00:	d903      	bls.n	8004e0a <_svfiprintf_r+0x1a6>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0c6      	beq.n	8004d94 <_svfiprintf_r+0x130>
 8004e06:	9105      	str	r1, [sp, #20]
 8004e08:	e7c4      	b.n	8004d94 <_svfiprintf_r+0x130>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e12:	e7f0      	b.n	8004df6 <_svfiprintf_r+0x192>
 8004e14:	ab03      	add	r3, sp, #12
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	462a      	mov	r2, r5
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <_svfiprintf_r+0x1f8>)
 8004e1e:	a904      	add	r1, sp, #16
 8004e20:	f7fe fb6e 	bl	8003500 <_printf_float>
 8004e24:	1c42      	adds	r2, r0, #1
 8004e26:	4606      	mov	r6, r0
 8004e28:	d1d6      	bne.n	8004dd8 <_svfiprintf_r+0x174>
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	065b      	lsls	r3, r3, #25
 8004e2e:	f53f af2d 	bmi.w	8004c8c <_svfiprintf_r+0x28>
 8004e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e34:	b01d      	add	sp, #116	; 0x74
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	ab03      	add	r3, sp, #12
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	462a      	mov	r2, r5
 8004e40:	4638      	mov	r0, r7
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <_svfiprintf_r+0x1f8>)
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	f7fe fdfb 	bl	8003a40 <_printf_i>
 8004e4a:	e7eb      	b.n	8004e24 <_svfiprintf_r+0x1c0>
 8004e4c:	080061bf 	.word	0x080061bf
 8004e50:	080061c5 	.word	0x080061c5
 8004e54:	080061c9 	.word	0x080061c9
 8004e58:	08003501 	.word	0x08003501
 8004e5c:	08004bb1 	.word	0x08004bb1

08004e60 <malloc>:
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <malloc+0xc>)
 8004e62:	4601      	mov	r1, r0
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f000 b823 	b.w	8004eb0 <_malloc_r>
 8004e6a:	bf00      	nop
 8004e6c:	20000064 	.word	0x20000064

08004e70 <sbrk_aligned>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4e0e      	ldr	r6, [pc, #56]	; (8004eac <sbrk_aligned+0x3c>)
 8004e74:	460c      	mov	r4, r1
 8004e76:	6831      	ldr	r1, [r6, #0]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b911      	cbnz	r1, 8004e82 <sbrk_aligned+0x12>
 8004e7c:	f000 fd86 	bl	800598c <_sbrk_r>
 8004e80:	6030      	str	r0, [r6, #0]
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 fd81 	bl	800598c <_sbrk_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	d00a      	beq.n	8004ea4 <sbrk_aligned+0x34>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d007      	beq.n	8004ea8 <sbrk_aligned+0x38>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 fd76 	bl	800598c <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <sbrk_aligned+0x38>
 8004ea4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	200003d4 	.word	0x200003d4

08004eb0 <_malloc_r>:
 8004eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb4:	1ccd      	adds	r5, r1, #3
 8004eb6:	f025 0503 	bic.w	r5, r5, #3
 8004eba:	3508      	adds	r5, #8
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	bf38      	it	cc
 8004ec0:	250c      	movcc	r5, #12
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	db01      	blt.n	8004ecc <_malloc_r+0x1c>
 8004ec8:	42a9      	cmp	r1, r5
 8004eca:	d905      	bls.n	8004ed8 <_malloc_r+0x28>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	2600      	movs	r6, #0
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fac <_malloc_r+0xfc>
 8004edc:	f000 f912 	bl	8005104 <__malloc_lock>
 8004ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	bb5c      	cbnz	r4, 8004f40 <_malloc_r+0x90>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff ffc0 	bl	8004e70 <sbrk_aligned>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d155      	bne.n	8004fa2 <_malloc_r+0xf2>
 8004ef6:	f8d8 4000 	ldr.w	r4, [r8]
 8004efa:	4626      	mov	r6, r4
 8004efc:	2e00      	cmp	r6, #0
 8004efe:	d145      	bne.n	8004f8c <_malloc_r+0xdc>
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d048      	beq.n	8004f96 <_malloc_r+0xe6>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	4631      	mov	r1, r6
 8004f08:	4638      	mov	r0, r7
 8004f0a:	eb04 0903 	add.w	r9, r4, r3
 8004f0e:	f000 fd3d 	bl	800598c <_sbrk_r>
 8004f12:	4581      	cmp	r9, r0
 8004f14:	d13f      	bne.n	8004f96 <_malloc_r+0xe6>
 8004f16:	6821      	ldr	r1, [r4, #0]
 8004f18:	4638      	mov	r0, r7
 8004f1a:	1a6d      	subs	r5, r5, r1
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	f7ff ffa7 	bl	8004e70 <sbrk_aligned>
 8004f22:	3001      	adds	r0, #1
 8004f24:	d037      	beq.n	8004f96 <_malloc_r+0xe6>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	442b      	add	r3, r5
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d038      	beq.n	8004fa6 <_malloc_r+0xf6>
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	42a2      	cmp	r2, r4
 8004f38:	d12b      	bne.n	8004f92 <_malloc_r+0xe2>
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	e00f      	b.n	8004f60 <_malloc_r+0xb0>
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	1b52      	subs	r2, r2, r5
 8004f44:	d41f      	bmi.n	8004f86 <_malloc_r+0xd6>
 8004f46:	2a0b      	cmp	r2, #11
 8004f48:	d917      	bls.n	8004f7a <_malloc_r+0xca>
 8004f4a:	1961      	adds	r1, r4, r5
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	6025      	str	r5, [r4, #0]
 8004f50:	bf18      	it	ne
 8004f52:	6059      	strne	r1, [r3, #4]
 8004f54:	6863      	ldr	r3, [r4, #4]
 8004f56:	bf08      	it	eq
 8004f58:	f8c8 1000 	streq.w	r1, [r8]
 8004f5c:	5162      	str	r2, [r4, r5]
 8004f5e:	604b      	str	r3, [r1, #4]
 8004f60:	4638      	mov	r0, r7
 8004f62:	f104 060b 	add.w	r6, r4, #11
 8004f66:	f000 f8d3 	bl	8005110 <__malloc_unlock>
 8004f6a:	f026 0607 	bic.w	r6, r6, #7
 8004f6e:	1d23      	adds	r3, r4, #4
 8004f70:	1af2      	subs	r2, r6, r3
 8004f72:	d0ae      	beq.n	8004ed2 <_malloc_r+0x22>
 8004f74:	1b9b      	subs	r3, r3, r6
 8004f76:	50a3      	str	r3, [r4, r2]
 8004f78:	e7ab      	b.n	8004ed2 <_malloc_r+0x22>
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	6862      	ldr	r2, [r4, #4]
 8004f7e:	d1dd      	bne.n	8004f3c <_malloc_r+0x8c>
 8004f80:	f8c8 2000 	str.w	r2, [r8]
 8004f84:	e7ec      	b.n	8004f60 <_malloc_r+0xb0>
 8004f86:	4623      	mov	r3, r4
 8004f88:	6864      	ldr	r4, [r4, #4]
 8004f8a:	e7ac      	b.n	8004ee6 <_malloc_r+0x36>
 8004f8c:	4634      	mov	r4, r6
 8004f8e:	6876      	ldr	r6, [r6, #4]
 8004f90:	e7b4      	b.n	8004efc <_malloc_r+0x4c>
 8004f92:	4613      	mov	r3, r2
 8004f94:	e7cc      	b.n	8004f30 <_malloc_r+0x80>
 8004f96:	230c      	movs	r3, #12
 8004f98:	4638      	mov	r0, r7
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	f000 f8b8 	bl	8005110 <__malloc_unlock>
 8004fa0:	e797      	b.n	8004ed2 <_malloc_r+0x22>
 8004fa2:	6025      	str	r5, [r4, #0]
 8004fa4:	e7dc      	b.n	8004f60 <_malloc_r+0xb0>
 8004fa6:	605b      	str	r3, [r3, #4]
 8004fa8:	deff      	udf	#255	; 0xff
 8004faa:	bf00      	nop
 8004fac:	200003d0 	.word	0x200003d0

08004fb0 <__sflush_r>:
 8004fb0:	898a      	ldrh	r2, [r1, #12]
 8004fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	0710      	lsls	r0, r2, #28
 8004fb8:	460c      	mov	r4, r1
 8004fba:	d457      	bmi.n	800506c <__sflush_r+0xbc>
 8004fbc:	684b      	ldr	r3, [r1, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dc04      	bgt.n	8004fcc <__sflush_r+0x1c>
 8004fc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	dc01      	bgt.n	8004fcc <__sflush_r+0x1c>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	d0fa      	beq.n	8004fc8 <__sflush_r+0x18>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fd8:	682f      	ldr	r7, [r5, #0]
 8004fda:	6a21      	ldr	r1, [r4, #32]
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	d032      	beq.n	8005046 <__sflush_r+0x96>
 8004fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	075a      	lsls	r2, r3, #29
 8004fe6:	d505      	bpl.n	8004ff4 <__sflush_r+0x44>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	1ac0      	subs	r0, r0, r3
 8004fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fee:	b10b      	cbz	r3, 8004ff4 <__sflush_r+0x44>
 8004ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff2:	1ac0      	subs	r0, r0, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	6a21      	ldr	r1, [r4, #32]
 8004ffe:	47b0      	blx	r6
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	d106      	bne.n	8005014 <__sflush_r+0x64>
 8005006:	6829      	ldr	r1, [r5, #0]
 8005008:	291d      	cmp	r1, #29
 800500a:	d82b      	bhi.n	8005064 <__sflush_r+0xb4>
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <__sflush_r+0x100>)
 800500e:	410a      	asrs	r2, r1
 8005010:	07d6      	lsls	r6, r2, #31
 8005012:	d427      	bmi.n	8005064 <__sflush_r+0xb4>
 8005014:	2200      	movs	r2, #0
 8005016:	6062      	str	r2, [r4, #4]
 8005018:	6922      	ldr	r2, [r4, #16]
 800501a:	04d9      	lsls	r1, r3, #19
 800501c:	6022      	str	r2, [r4, #0]
 800501e:	d504      	bpl.n	800502a <__sflush_r+0x7a>
 8005020:	1c42      	adds	r2, r0, #1
 8005022:	d101      	bne.n	8005028 <__sflush_r+0x78>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	b903      	cbnz	r3, 800502a <__sflush_r+0x7a>
 8005028:	6560      	str	r0, [r4, #84]	; 0x54
 800502a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800502c:	602f      	str	r7, [r5, #0]
 800502e:	2900      	cmp	r1, #0
 8005030:	d0ca      	beq.n	8004fc8 <__sflush_r+0x18>
 8005032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005036:	4299      	cmp	r1, r3
 8005038:	d002      	beq.n	8005040 <__sflush_r+0x90>
 800503a:	4628      	mov	r0, r5
 800503c:	f000 fd08 	bl	8005a50 <_free_r>
 8005040:	2000      	movs	r0, #0
 8005042:	6360      	str	r0, [r4, #52]	; 0x34
 8005044:	e7c1      	b.n	8004fca <__sflush_r+0x1a>
 8005046:	2301      	movs	r3, #1
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	1c41      	adds	r1, r0, #1
 800504e:	d1c8      	bne.n	8004fe2 <__sflush_r+0x32>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0c5      	beq.n	8004fe2 <__sflush_r+0x32>
 8005056:	2b1d      	cmp	r3, #29
 8005058:	d001      	beq.n	800505e <__sflush_r+0xae>
 800505a:	2b16      	cmp	r3, #22
 800505c:	d101      	bne.n	8005062 <__sflush_r+0xb2>
 800505e:	602f      	str	r7, [r5, #0]
 8005060:	e7b2      	b.n	8004fc8 <__sflush_r+0x18>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	e7ae      	b.n	8004fca <__sflush_r+0x1a>
 800506c:	690f      	ldr	r7, [r1, #16]
 800506e:	2f00      	cmp	r7, #0
 8005070:	d0aa      	beq.n	8004fc8 <__sflush_r+0x18>
 8005072:	0793      	lsls	r3, r2, #30
 8005074:	bf18      	it	ne
 8005076:	2300      	movne	r3, #0
 8005078:	680e      	ldr	r6, [r1, #0]
 800507a:	bf08      	it	eq
 800507c:	694b      	ldreq	r3, [r1, #20]
 800507e:	1bf6      	subs	r6, r6, r7
 8005080:	600f      	str	r7, [r1, #0]
 8005082:	608b      	str	r3, [r1, #8]
 8005084:	2e00      	cmp	r6, #0
 8005086:	dd9f      	ble.n	8004fc8 <__sflush_r+0x18>
 8005088:	4633      	mov	r3, r6
 800508a:	463a      	mov	r2, r7
 800508c:	4628      	mov	r0, r5
 800508e:	6a21      	ldr	r1, [r4, #32]
 8005090:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005094:	47e0      	blx	ip
 8005096:	2800      	cmp	r0, #0
 8005098:	dc06      	bgt.n	80050a8 <__sflush_r+0xf8>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a4:	81a3      	strh	r3, [r4, #12]
 80050a6:	e790      	b.n	8004fca <__sflush_r+0x1a>
 80050a8:	4407      	add	r7, r0
 80050aa:	1a36      	subs	r6, r6, r0
 80050ac:	e7ea      	b.n	8005084 <__sflush_r+0xd4>
 80050ae:	bf00      	nop
 80050b0:	dfbffffe 	.word	0xdfbffffe

080050b4 <_fflush_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	4605      	mov	r5, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	b913      	cbnz	r3, 80050c4 <_fflush_r+0x10>
 80050be:	2500      	movs	r5, #0
 80050c0:	4628      	mov	r0, r5
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	b118      	cbz	r0, 80050ce <_fflush_r+0x1a>
 80050c6:	6a03      	ldr	r3, [r0, #32]
 80050c8:	b90b      	cbnz	r3, 80050ce <_fflush_r+0x1a>
 80050ca:	f7fe fe87 	bl	8003ddc <__sinit>
 80050ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f3      	beq.n	80050be <_fflush_r+0xa>
 80050d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050d8:	07d0      	lsls	r0, r2, #31
 80050da:	d404      	bmi.n	80050e6 <_fflush_r+0x32>
 80050dc:	0599      	lsls	r1, r3, #22
 80050de:	d402      	bmi.n	80050e6 <_fflush_r+0x32>
 80050e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050e2:	f7fe fee8 	bl	8003eb6 <__retarget_lock_acquire_recursive>
 80050e6:	4628      	mov	r0, r5
 80050e8:	4621      	mov	r1, r4
 80050ea:	f7ff ff61 	bl	8004fb0 <__sflush_r>
 80050ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050f0:	4605      	mov	r5, r0
 80050f2:	07da      	lsls	r2, r3, #31
 80050f4:	d4e4      	bmi.n	80050c0 <_fflush_r+0xc>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	059b      	lsls	r3, r3, #22
 80050fa:	d4e1      	bmi.n	80050c0 <_fflush_r+0xc>
 80050fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050fe:	f7fe fedb 	bl	8003eb8 <__retarget_lock_release_recursive>
 8005102:	e7dd      	b.n	80050c0 <_fflush_r+0xc>

08005104 <__malloc_lock>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__malloc_lock+0x8>)
 8005106:	f7fe bed6 	b.w	8003eb6 <__retarget_lock_acquire_recursive>
 800510a:	bf00      	nop
 800510c:	200003cc 	.word	0x200003cc

08005110 <__malloc_unlock>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__malloc_unlock+0x8>)
 8005112:	f7fe bed1 	b.w	8003eb8 <__retarget_lock_release_recursive>
 8005116:	bf00      	nop
 8005118:	200003cc 	.word	0x200003cc

0800511c <_Balloc>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	69c6      	ldr	r6, [r0, #28]
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1
 8005124:	b976      	cbnz	r6, 8005144 <_Balloc+0x28>
 8005126:	2010      	movs	r0, #16
 8005128:	f7ff fe9a 	bl	8004e60 <malloc>
 800512c:	4602      	mov	r2, r0
 800512e:	61e0      	str	r0, [r4, #28]
 8005130:	b920      	cbnz	r0, 800513c <_Balloc+0x20>
 8005132:	216b      	movs	r1, #107	; 0x6b
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <_Balloc+0x78>)
 8005136:	4818      	ldr	r0, [pc, #96]	; (8005198 <_Balloc+0x7c>)
 8005138:	f000 fc58 	bl	80059ec <__assert_func>
 800513c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005140:	6006      	str	r6, [r0, #0]
 8005142:	60c6      	str	r6, [r0, #12]
 8005144:	69e6      	ldr	r6, [r4, #28]
 8005146:	68f3      	ldr	r3, [r6, #12]
 8005148:	b183      	cbz	r3, 800516c <_Balloc+0x50>
 800514a:	69e3      	ldr	r3, [r4, #28]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005152:	b9b8      	cbnz	r0, 8005184 <_Balloc+0x68>
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f605 	lsl.w	r6, r1, r5
 800515a:	1d72      	adds	r2, r6, #5
 800515c:	4620      	mov	r0, r4
 800515e:	0092      	lsls	r2, r2, #2
 8005160:	f000 fc62 	bl	8005a28 <_calloc_r>
 8005164:	b160      	cbz	r0, 8005180 <_Balloc+0x64>
 8005166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800516a:	e00e      	b.n	800518a <_Balloc+0x6e>
 800516c:	2221      	movs	r2, #33	; 0x21
 800516e:	2104      	movs	r1, #4
 8005170:	4620      	mov	r0, r4
 8005172:	f000 fc59 	bl	8005a28 <_calloc_r>
 8005176:	69e3      	ldr	r3, [r4, #28]
 8005178:	60f0      	str	r0, [r6, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e4      	bne.n	800514a <_Balloc+0x2e>
 8005180:	2000      	movs	r0, #0
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	6802      	ldr	r2, [r0, #0]
 8005186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800518a:	2300      	movs	r3, #0
 800518c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005190:	e7f7      	b.n	8005182 <_Balloc+0x66>
 8005192:	bf00      	nop
 8005194:	0800613f 	.word	0x0800613f
 8005198:	080061d0 	.word	0x080061d0

0800519c <_Bfree>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	69c6      	ldr	r6, [r0, #28]
 80051a0:	4605      	mov	r5, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b976      	cbnz	r6, 80051c4 <_Bfree+0x28>
 80051a6:	2010      	movs	r0, #16
 80051a8:	f7ff fe5a 	bl	8004e60 <malloc>
 80051ac:	4602      	mov	r2, r0
 80051ae:	61e8      	str	r0, [r5, #28]
 80051b0:	b920      	cbnz	r0, 80051bc <_Bfree+0x20>
 80051b2:	218f      	movs	r1, #143	; 0x8f
 80051b4:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <_Bfree+0x3c>)
 80051b6:	4809      	ldr	r0, [pc, #36]	; (80051dc <_Bfree+0x40>)
 80051b8:	f000 fc18 	bl	80059ec <__assert_func>
 80051bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c0:	6006      	str	r6, [r0, #0]
 80051c2:	60c6      	str	r6, [r0, #12]
 80051c4:	b13c      	cbz	r4, 80051d6 <_Bfree+0x3a>
 80051c6:	69eb      	ldr	r3, [r5, #28]
 80051c8:	6862      	ldr	r2, [r4, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	0800613f 	.word	0x0800613f
 80051dc:	080061d0 	.word	0x080061d0

080051e0 <__multadd>:
 80051e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e4:	4607      	mov	r7, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	461e      	mov	r6, r3
 80051ea:	2000      	movs	r0, #0
 80051ec:	690d      	ldr	r5, [r1, #16]
 80051ee:	f101 0c14 	add.w	ip, r1, #20
 80051f2:	f8dc 3000 	ldr.w	r3, [ip]
 80051f6:	3001      	adds	r0, #1
 80051f8:	b299      	uxth	r1, r3
 80051fa:	fb02 6101 	mla	r1, r2, r1, r6
 80051fe:	0c1e      	lsrs	r6, r3, #16
 8005200:	0c0b      	lsrs	r3, r1, #16
 8005202:	fb02 3306 	mla	r3, r2, r6, r3
 8005206:	b289      	uxth	r1, r1
 8005208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800520c:	4285      	cmp	r5, r0
 800520e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005212:	f84c 1b04 	str.w	r1, [ip], #4
 8005216:	dcec      	bgt.n	80051f2 <__multadd+0x12>
 8005218:	b30e      	cbz	r6, 800525e <__multadd+0x7e>
 800521a:	68a3      	ldr	r3, [r4, #8]
 800521c:	42ab      	cmp	r3, r5
 800521e:	dc19      	bgt.n	8005254 <__multadd+0x74>
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	4638      	mov	r0, r7
 8005224:	3101      	adds	r1, #1
 8005226:	f7ff ff79 	bl	800511c <_Balloc>
 800522a:	4680      	mov	r8, r0
 800522c:	b928      	cbnz	r0, 800523a <__multadd+0x5a>
 800522e:	4602      	mov	r2, r0
 8005230:	21ba      	movs	r1, #186	; 0xba
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <__multadd+0x84>)
 8005234:	480c      	ldr	r0, [pc, #48]	; (8005268 <__multadd+0x88>)
 8005236:	f000 fbd9 	bl	80059ec <__assert_func>
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	f104 010c 	add.w	r1, r4, #12
 8005240:	3202      	adds	r2, #2
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	300c      	adds	r0, #12
 8005246:	f000 fbc3 	bl	80059d0 <memcpy>
 800524a:	4621      	mov	r1, r4
 800524c:	4638      	mov	r0, r7
 800524e:	f7ff ffa5 	bl	800519c <_Bfree>
 8005252:	4644      	mov	r4, r8
 8005254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005258:	3501      	adds	r5, #1
 800525a:	615e      	str	r6, [r3, #20]
 800525c:	6125      	str	r5, [r4, #16]
 800525e:	4620      	mov	r0, r4
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	080061ae 	.word	0x080061ae
 8005268:	080061d0 	.word	0x080061d0

0800526c <__hi0bits>:
 800526c:	0c02      	lsrs	r2, r0, #16
 800526e:	0412      	lsls	r2, r2, #16
 8005270:	4603      	mov	r3, r0
 8005272:	b9ca      	cbnz	r2, 80052a8 <__hi0bits+0x3c>
 8005274:	0403      	lsls	r3, r0, #16
 8005276:	2010      	movs	r0, #16
 8005278:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800527c:	bf04      	itt	eq
 800527e:	021b      	lsleq	r3, r3, #8
 8005280:	3008      	addeq	r0, #8
 8005282:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005286:	bf04      	itt	eq
 8005288:	011b      	lsleq	r3, r3, #4
 800528a:	3004      	addeq	r0, #4
 800528c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005290:	bf04      	itt	eq
 8005292:	009b      	lsleq	r3, r3, #2
 8005294:	3002      	addeq	r0, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	db05      	blt.n	80052a6 <__hi0bits+0x3a>
 800529a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800529e:	f100 0001 	add.w	r0, r0, #1
 80052a2:	bf08      	it	eq
 80052a4:	2020      	moveq	r0, #32
 80052a6:	4770      	bx	lr
 80052a8:	2000      	movs	r0, #0
 80052aa:	e7e5      	b.n	8005278 <__hi0bits+0xc>

080052ac <__lo0bits>:
 80052ac:	6803      	ldr	r3, [r0, #0]
 80052ae:	4602      	mov	r2, r0
 80052b0:	f013 0007 	ands.w	r0, r3, #7
 80052b4:	d00b      	beq.n	80052ce <__lo0bits+0x22>
 80052b6:	07d9      	lsls	r1, r3, #31
 80052b8:	d421      	bmi.n	80052fe <__lo0bits+0x52>
 80052ba:	0798      	lsls	r0, r3, #30
 80052bc:	bf49      	itett	mi
 80052be:	085b      	lsrmi	r3, r3, #1
 80052c0:	089b      	lsrpl	r3, r3, #2
 80052c2:	2001      	movmi	r0, #1
 80052c4:	6013      	strmi	r3, [r2, #0]
 80052c6:	bf5c      	itt	pl
 80052c8:	2002      	movpl	r0, #2
 80052ca:	6013      	strpl	r3, [r2, #0]
 80052cc:	4770      	bx	lr
 80052ce:	b299      	uxth	r1, r3
 80052d0:	b909      	cbnz	r1, 80052d6 <__lo0bits+0x2a>
 80052d2:	2010      	movs	r0, #16
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b2d9      	uxtb	r1, r3
 80052d8:	b909      	cbnz	r1, 80052de <__lo0bits+0x32>
 80052da:	3008      	adds	r0, #8
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	0719      	lsls	r1, r3, #28
 80052e0:	bf04      	itt	eq
 80052e2:	091b      	lsreq	r3, r3, #4
 80052e4:	3004      	addeq	r0, #4
 80052e6:	0799      	lsls	r1, r3, #30
 80052e8:	bf04      	itt	eq
 80052ea:	089b      	lsreq	r3, r3, #2
 80052ec:	3002      	addeq	r0, #2
 80052ee:	07d9      	lsls	r1, r3, #31
 80052f0:	d403      	bmi.n	80052fa <__lo0bits+0x4e>
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	f100 0001 	add.w	r0, r0, #1
 80052f8:	d003      	beq.n	8005302 <__lo0bits+0x56>
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4770      	bx	lr
 80052fe:	2000      	movs	r0, #0
 8005300:	4770      	bx	lr
 8005302:	2020      	movs	r0, #32
 8005304:	4770      	bx	lr
	...

08005308 <__i2b>:
 8005308:	b510      	push	{r4, lr}
 800530a:	460c      	mov	r4, r1
 800530c:	2101      	movs	r1, #1
 800530e:	f7ff ff05 	bl	800511c <_Balloc>
 8005312:	4602      	mov	r2, r0
 8005314:	b928      	cbnz	r0, 8005322 <__i2b+0x1a>
 8005316:	f240 1145 	movw	r1, #325	; 0x145
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <__i2b+0x24>)
 800531c:	4804      	ldr	r0, [pc, #16]	; (8005330 <__i2b+0x28>)
 800531e:	f000 fb65 	bl	80059ec <__assert_func>
 8005322:	2301      	movs	r3, #1
 8005324:	6144      	str	r4, [r0, #20]
 8005326:	6103      	str	r3, [r0, #16]
 8005328:	bd10      	pop	{r4, pc}
 800532a:	bf00      	nop
 800532c:	080061ae 	.word	0x080061ae
 8005330:	080061d0 	.word	0x080061d0

08005334 <__multiply>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4691      	mov	r9, r2
 800533a:	690a      	ldr	r2, [r1, #16]
 800533c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005340:	460c      	mov	r4, r1
 8005342:	429a      	cmp	r2, r3
 8005344:	bfbe      	ittt	lt
 8005346:	460b      	movlt	r3, r1
 8005348:	464c      	movlt	r4, r9
 800534a:	4699      	movlt	r9, r3
 800534c:	6927      	ldr	r7, [r4, #16]
 800534e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005352:	68a3      	ldr	r3, [r4, #8]
 8005354:	6861      	ldr	r1, [r4, #4]
 8005356:	eb07 060a 	add.w	r6, r7, sl
 800535a:	42b3      	cmp	r3, r6
 800535c:	b085      	sub	sp, #20
 800535e:	bfb8      	it	lt
 8005360:	3101      	addlt	r1, #1
 8005362:	f7ff fedb 	bl	800511c <_Balloc>
 8005366:	b930      	cbnz	r0, 8005376 <__multiply+0x42>
 8005368:	4602      	mov	r2, r0
 800536a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800536e:	4b43      	ldr	r3, [pc, #268]	; (800547c <__multiply+0x148>)
 8005370:	4843      	ldr	r0, [pc, #268]	; (8005480 <__multiply+0x14c>)
 8005372:	f000 fb3b 	bl	80059ec <__assert_func>
 8005376:	f100 0514 	add.w	r5, r0, #20
 800537a:	462b      	mov	r3, r5
 800537c:	2200      	movs	r2, #0
 800537e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005382:	4543      	cmp	r3, r8
 8005384:	d321      	bcc.n	80053ca <__multiply+0x96>
 8005386:	f104 0314 	add.w	r3, r4, #20
 800538a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800538e:	f109 0314 	add.w	r3, r9, #20
 8005392:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005396:	9202      	str	r2, [sp, #8]
 8005398:	1b3a      	subs	r2, r7, r4
 800539a:	3a15      	subs	r2, #21
 800539c:	f022 0203 	bic.w	r2, r2, #3
 80053a0:	3204      	adds	r2, #4
 80053a2:	f104 0115 	add.w	r1, r4, #21
 80053a6:	428f      	cmp	r7, r1
 80053a8:	bf38      	it	cc
 80053aa:	2204      	movcc	r2, #4
 80053ac:	9201      	str	r2, [sp, #4]
 80053ae:	9a02      	ldr	r2, [sp, #8]
 80053b0:	9303      	str	r3, [sp, #12]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d80c      	bhi.n	80053d0 <__multiply+0x9c>
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	dd03      	ble.n	80053c2 <__multiply+0x8e>
 80053ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d05a      	beq.n	8005478 <__multiply+0x144>
 80053c2:	6106      	str	r6, [r0, #16]
 80053c4:	b005      	add	sp, #20
 80053c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ca:	f843 2b04 	str.w	r2, [r3], #4
 80053ce:	e7d8      	b.n	8005382 <__multiply+0x4e>
 80053d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80053d4:	f1ba 0f00 	cmp.w	sl, #0
 80053d8:	d023      	beq.n	8005422 <__multiply+0xee>
 80053da:	46a9      	mov	r9, r5
 80053dc:	f04f 0c00 	mov.w	ip, #0
 80053e0:	f104 0e14 	add.w	lr, r4, #20
 80053e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053e8:	f8d9 1000 	ldr.w	r1, [r9]
 80053ec:	fa1f fb82 	uxth.w	fp, r2
 80053f0:	b289      	uxth	r1, r1
 80053f2:	fb0a 110b 	mla	r1, sl, fp, r1
 80053f6:	4461      	add	r1, ip
 80053f8:	f8d9 c000 	ldr.w	ip, [r9]
 80053fc:	0c12      	lsrs	r2, r2, #16
 80053fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005402:	fb0a c202 	mla	r2, sl, r2, ip
 8005406:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800540a:	b289      	uxth	r1, r1
 800540c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005410:	4577      	cmp	r7, lr
 8005412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005416:	f849 1b04 	str.w	r1, [r9], #4
 800541a:	d8e3      	bhi.n	80053e4 <__multiply+0xb0>
 800541c:	9a01      	ldr	r2, [sp, #4]
 800541e:	f845 c002 	str.w	ip, [r5, r2]
 8005422:	9a03      	ldr	r2, [sp, #12]
 8005424:	3304      	adds	r3, #4
 8005426:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800542a:	f1b9 0f00 	cmp.w	r9, #0
 800542e:	d021      	beq.n	8005474 <__multiply+0x140>
 8005430:	46ae      	mov	lr, r5
 8005432:	f04f 0a00 	mov.w	sl, #0
 8005436:	6829      	ldr	r1, [r5, #0]
 8005438:	f104 0c14 	add.w	ip, r4, #20
 800543c:	f8bc b000 	ldrh.w	fp, [ip]
 8005440:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005444:	b289      	uxth	r1, r1
 8005446:	fb09 220b 	mla	r2, r9, fp, r2
 800544a:	4452      	add	r2, sl
 800544c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005450:	f84e 1b04 	str.w	r1, [lr], #4
 8005454:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005458:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800545c:	f8be 1000 	ldrh.w	r1, [lr]
 8005460:	4567      	cmp	r7, ip
 8005462:	fb09 110a 	mla	r1, r9, sl, r1
 8005466:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800546a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800546e:	d8e5      	bhi.n	800543c <__multiply+0x108>
 8005470:	9a01      	ldr	r2, [sp, #4]
 8005472:	50a9      	str	r1, [r5, r2]
 8005474:	3504      	adds	r5, #4
 8005476:	e79a      	b.n	80053ae <__multiply+0x7a>
 8005478:	3e01      	subs	r6, #1
 800547a:	e79c      	b.n	80053b6 <__multiply+0x82>
 800547c:	080061ae 	.word	0x080061ae
 8005480:	080061d0 	.word	0x080061d0

08005484 <__pow5mult>:
 8005484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005488:	4615      	mov	r5, r2
 800548a:	f012 0203 	ands.w	r2, r2, #3
 800548e:	4606      	mov	r6, r0
 8005490:	460f      	mov	r7, r1
 8005492:	d007      	beq.n	80054a4 <__pow5mult+0x20>
 8005494:	4c25      	ldr	r4, [pc, #148]	; (800552c <__pow5mult+0xa8>)
 8005496:	3a01      	subs	r2, #1
 8005498:	2300      	movs	r3, #0
 800549a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800549e:	f7ff fe9f 	bl	80051e0 <__multadd>
 80054a2:	4607      	mov	r7, r0
 80054a4:	10ad      	asrs	r5, r5, #2
 80054a6:	d03d      	beq.n	8005524 <__pow5mult+0xa0>
 80054a8:	69f4      	ldr	r4, [r6, #28]
 80054aa:	b97c      	cbnz	r4, 80054cc <__pow5mult+0x48>
 80054ac:	2010      	movs	r0, #16
 80054ae:	f7ff fcd7 	bl	8004e60 <malloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	61f0      	str	r0, [r6, #28]
 80054b6:	b928      	cbnz	r0, 80054c4 <__pow5mult+0x40>
 80054b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80054bc:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <__pow5mult+0xac>)
 80054be:	481d      	ldr	r0, [pc, #116]	; (8005534 <__pow5mult+0xb0>)
 80054c0:	f000 fa94 	bl	80059ec <__assert_func>
 80054c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054c8:	6004      	str	r4, [r0, #0]
 80054ca:	60c4      	str	r4, [r0, #12]
 80054cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80054d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054d4:	b94c      	cbnz	r4, 80054ea <__pow5mult+0x66>
 80054d6:	f240 2171 	movw	r1, #625	; 0x271
 80054da:	4630      	mov	r0, r6
 80054dc:	f7ff ff14 	bl	8005308 <__i2b>
 80054e0:	2300      	movs	r3, #0
 80054e2:	4604      	mov	r4, r0
 80054e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80054e8:	6003      	str	r3, [r0, #0]
 80054ea:	f04f 0900 	mov.w	r9, #0
 80054ee:	07eb      	lsls	r3, r5, #31
 80054f0:	d50a      	bpl.n	8005508 <__pow5mult+0x84>
 80054f2:	4639      	mov	r1, r7
 80054f4:	4622      	mov	r2, r4
 80054f6:	4630      	mov	r0, r6
 80054f8:	f7ff ff1c 	bl	8005334 <__multiply>
 80054fc:	4680      	mov	r8, r0
 80054fe:	4639      	mov	r1, r7
 8005500:	4630      	mov	r0, r6
 8005502:	f7ff fe4b 	bl	800519c <_Bfree>
 8005506:	4647      	mov	r7, r8
 8005508:	106d      	asrs	r5, r5, #1
 800550a:	d00b      	beq.n	8005524 <__pow5mult+0xa0>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	b938      	cbnz	r0, 8005520 <__pow5mult+0x9c>
 8005510:	4622      	mov	r2, r4
 8005512:	4621      	mov	r1, r4
 8005514:	4630      	mov	r0, r6
 8005516:	f7ff ff0d 	bl	8005334 <__multiply>
 800551a:	6020      	str	r0, [r4, #0]
 800551c:	f8c0 9000 	str.w	r9, [r0]
 8005520:	4604      	mov	r4, r0
 8005522:	e7e4      	b.n	80054ee <__pow5mult+0x6a>
 8005524:	4638      	mov	r0, r7
 8005526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800552a:	bf00      	nop
 800552c:	08006320 	.word	0x08006320
 8005530:	0800613f 	.word	0x0800613f
 8005534:	080061d0 	.word	0x080061d0

08005538 <__lshift>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	460c      	mov	r4, r1
 800553e:	4607      	mov	r7, r0
 8005540:	4691      	mov	r9, r2
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	6849      	ldr	r1, [r1, #4]
 8005546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005550:	f108 0601 	add.w	r6, r8, #1
 8005554:	42b3      	cmp	r3, r6
 8005556:	db0b      	blt.n	8005570 <__lshift+0x38>
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff fddf 	bl	800511c <_Balloc>
 800555e:	4605      	mov	r5, r0
 8005560:	b948      	cbnz	r0, 8005576 <__lshift+0x3e>
 8005562:	4602      	mov	r2, r0
 8005564:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <__lshift+0xd0>)
 800556a:	4828      	ldr	r0, [pc, #160]	; (800560c <__lshift+0xd4>)
 800556c:	f000 fa3e 	bl	80059ec <__assert_func>
 8005570:	3101      	adds	r1, #1
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	e7ee      	b.n	8005554 <__lshift+0x1c>
 8005576:	2300      	movs	r3, #0
 8005578:	f100 0114 	add.w	r1, r0, #20
 800557c:	f100 0210 	add.w	r2, r0, #16
 8005580:	4618      	mov	r0, r3
 8005582:	4553      	cmp	r3, sl
 8005584:	db33      	blt.n	80055ee <__lshift+0xb6>
 8005586:	6920      	ldr	r0, [r4, #16]
 8005588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800558c:	f104 0314 	add.w	r3, r4, #20
 8005590:	f019 091f 	ands.w	r9, r9, #31
 8005594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005598:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800559c:	d02b      	beq.n	80055f6 <__lshift+0xbe>
 800559e:	468a      	mov	sl, r1
 80055a0:	2200      	movs	r2, #0
 80055a2:	f1c9 0e20 	rsb	lr, r9, #32
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	fa00 f009 	lsl.w	r0, r0, r9
 80055ac:	4310      	orrs	r0, r2
 80055ae:	f84a 0b04 	str.w	r0, [sl], #4
 80055b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b6:	459c      	cmp	ip, r3
 80055b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80055bc:	d8f3      	bhi.n	80055a6 <__lshift+0x6e>
 80055be:	ebac 0304 	sub.w	r3, ip, r4
 80055c2:	3b15      	subs	r3, #21
 80055c4:	f023 0303 	bic.w	r3, r3, #3
 80055c8:	3304      	adds	r3, #4
 80055ca:	f104 0015 	add.w	r0, r4, #21
 80055ce:	4584      	cmp	ip, r0
 80055d0:	bf38      	it	cc
 80055d2:	2304      	movcc	r3, #4
 80055d4:	50ca      	str	r2, [r1, r3]
 80055d6:	b10a      	cbz	r2, 80055dc <__lshift+0xa4>
 80055d8:	f108 0602 	add.w	r6, r8, #2
 80055dc:	3e01      	subs	r6, #1
 80055de:	4638      	mov	r0, r7
 80055e0:	4621      	mov	r1, r4
 80055e2:	612e      	str	r6, [r5, #16]
 80055e4:	f7ff fdda 	bl	800519c <_Bfree>
 80055e8:	4628      	mov	r0, r5
 80055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80055f2:	3301      	adds	r3, #1
 80055f4:	e7c5      	b.n	8005582 <__lshift+0x4a>
 80055f6:	3904      	subs	r1, #4
 80055f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055fc:	459c      	cmp	ip, r3
 80055fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005602:	d8f9      	bhi.n	80055f8 <__lshift+0xc0>
 8005604:	e7ea      	b.n	80055dc <__lshift+0xa4>
 8005606:	bf00      	nop
 8005608:	080061ae 	.word	0x080061ae
 800560c:	080061d0 	.word	0x080061d0

08005610 <__mcmp>:
 8005610:	4603      	mov	r3, r0
 8005612:	690a      	ldr	r2, [r1, #16]
 8005614:	6900      	ldr	r0, [r0, #16]
 8005616:	b530      	push	{r4, r5, lr}
 8005618:	1a80      	subs	r0, r0, r2
 800561a:	d10d      	bne.n	8005638 <__mcmp+0x28>
 800561c:	3314      	adds	r3, #20
 800561e:	3114      	adds	r1, #20
 8005620:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005624:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005628:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800562c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005630:	4295      	cmp	r5, r2
 8005632:	d002      	beq.n	800563a <__mcmp+0x2a>
 8005634:	d304      	bcc.n	8005640 <__mcmp+0x30>
 8005636:	2001      	movs	r0, #1
 8005638:	bd30      	pop	{r4, r5, pc}
 800563a:	42a3      	cmp	r3, r4
 800563c:	d3f4      	bcc.n	8005628 <__mcmp+0x18>
 800563e:	e7fb      	b.n	8005638 <__mcmp+0x28>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005644:	e7f8      	b.n	8005638 <__mcmp+0x28>
	...

08005648 <__mdiff>:
 8005648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	460d      	mov	r5, r1
 800564e:	4607      	mov	r7, r0
 8005650:	4611      	mov	r1, r2
 8005652:	4628      	mov	r0, r5
 8005654:	4614      	mov	r4, r2
 8005656:	f7ff ffdb 	bl	8005610 <__mcmp>
 800565a:	1e06      	subs	r6, r0, #0
 800565c:	d111      	bne.n	8005682 <__mdiff+0x3a>
 800565e:	4631      	mov	r1, r6
 8005660:	4638      	mov	r0, r7
 8005662:	f7ff fd5b 	bl	800511c <_Balloc>
 8005666:	4602      	mov	r2, r0
 8005668:	b928      	cbnz	r0, 8005676 <__mdiff+0x2e>
 800566a:	f240 2137 	movw	r1, #567	; 0x237
 800566e:	4b3a      	ldr	r3, [pc, #232]	; (8005758 <__mdiff+0x110>)
 8005670:	483a      	ldr	r0, [pc, #232]	; (800575c <__mdiff+0x114>)
 8005672:	f000 f9bb 	bl	80059ec <__assert_func>
 8005676:	2301      	movs	r3, #1
 8005678:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800567c:	4610      	mov	r0, r2
 800567e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	bfa4      	itt	ge
 8005684:	4623      	movge	r3, r4
 8005686:	462c      	movge	r4, r5
 8005688:	4638      	mov	r0, r7
 800568a:	6861      	ldr	r1, [r4, #4]
 800568c:	bfa6      	itte	ge
 800568e:	461d      	movge	r5, r3
 8005690:	2600      	movge	r6, #0
 8005692:	2601      	movlt	r6, #1
 8005694:	f7ff fd42 	bl	800511c <_Balloc>
 8005698:	4602      	mov	r2, r0
 800569a:	b918      	cbnz	r0, 80056a4 <__mdiff+0x5c>
 800569c:	f240 2145 	movw	r1, #581	; 0x245
 80056a0:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <__mdiff+0x110>)
 80056a2:	e7e5      	b.n	8005670 <__mdiff+0x28>
 80056a4:	f102 0814 	add.w	r8, r2, #20
 80056a8:	46c2      	mov	sl, r8
 80056aa:	f04f 0c00 	mov.w	ip, #0
 80056ae:	6927      	ldr	r7, [r4, #16]
 80056b0:	60c6      	str	r6, [r0, #12]
 80056b2:	692e      	ldr	r6, [r5, #16]
 80056b4:	f104 0014 	add.w	r0, r4, #20
 80056b8:	f105 0914 	add.w	r9, r5, #20
 80056bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80056c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056c4:	3410      	adds	r4, #16
 80056c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80056ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80056ce:	fa1f f18b 	uxth.w	r1, fp
 80056d2:	4461      	add	r1, ip
 80056d4:	fa1f fc83 	uxth.w	ip, r3
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	eba1 010c 	sub.w	r1, r1, ip
 80056de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056e6:	b289      	uxth	r1, r1
 80056e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80056ec:	454e      	cmp	r6, r9
 80056ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056f2:	f84a 1b04 	str.w	r1, [sl], #4
 80056f6:	d8e6      	bhi.n	80056c6 <__mdiff+0x7e>
 80056f8:	1b73      	subs	r3, r6, r5
 80056fa:	3b15      	subs	r3, #21
 80056fc:	f023 0303 	bic.w	r3, r3, #3
 8005700:	3515      	adds	r5, #21
 8005702:	3304      	adds	r3, #4
 8005704:	42ae      	cmp	r6, r5
 8005706:	bf38      	it	cc
 8005708:	2304      	movcc	r3, #4
 800570a:	4418      	add	r0, r3
 800570c:	4443      	add	r3, r8
 800570e:	461e      	mov	r6, r3
 8005710:	4605      	mov	r5, r0
 8005712:	4575      	cmp	r5, lr
 8005714:	d30e      	bcc.n	8005734 <__mdiff+0xec>
 8005716:	f10e 0103 	add.w	r1, lr, #3
 800571a:	1a09      	subs	r1, r1, r0
 800571c:	f021 0103 	bic.w	r1, r1, #3
 8005720:	3803      	subs	r0, #3
 8005722:	4586      	cmp	lr, r0
 8005724:	bf38      	it	cc
 8005726:	2100      	movcc	r1, #0
 8005728:	440b      	add	r3, r1
 800572a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800572e:	b189      	cbz	r1, 8005754 <__mdiff+0x10c>
 8005730:	6117      	str	r7, [r2, #16]
 8005732:	e7a3      	b.n	800567c <__mdiff+0x34>
 8005734:	f855 8b04 	ldr.w	r8, [r5], #4
 8005738:	fa1f f188 	uxth.w	r1, r8
 800573c:	4461      	add	r1, ip
 800573e:	140c      	asrs	r4, r1, #16
 8005740:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005744:	b289      	uxth	r1, r1
 8005746:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800574a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800574e:	f846 1b04 	str.w	r1, [r6], #4
 8005752:	e7de      	b.n	8005712 <__mdiff+0xca>
 8005754:	3f01      	subs	r7, #1
 8005756:	e7e8      	b.n	800572a <__mdiff+0xe2>
 8005758:	080061ae 	.word	0x080061ae
 800575c:	080061d0 	.word	0x080061d0

08005760 <__d2b>:
 8005760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005762:	2101      	movs	r1, #1
 8005764:	4617      	mov	r7, r2
 8005766:	461c      	mov	r4, r3
 8005768:	9e08      	ldr	r6, [sp, #32]
 800576a:	f7ff fcd7 	bl	800511c <_Balloc>
 800576e:	4605      	mov	r5, r0
 8005770:	b930      	cbnz	r0, 8005780 <__d2b+0x20>
 8005772:	4602      	mov	r2, r0
 8005774:	f240 310f 	movw	r1, #783	; 0x30f
 8005778:	4b22      	ldr	r3, [pc, #136]	; (8005804 <__d2b+0xa4>)
 800577a:	4823      	ldr	r0, [pc, #140]	; (8005808 <__d2b+0xa8>)
 800577c:	f000 f936 	bl	80059ec <__assert_func>
 8005780:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005784:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005788:	bb24      	cbnz	r4, 80057d4 <__d2b+0x74>
 800578a:	2f00      	cmp	r7, #0
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	d026      	beq.n	80057de <__d2b+0x7e>
 8005790:	4668      	mov	r0, sp
 8005792:	9700      	str	r7, [sp, #0]
 8005794:	f7ff fd8a 	bl	80052ac <__lo0bits>
 8005798:	e9dd 1200 	ldrd	r1, r2, [sp]
 800579c:	b1e8      	cbz	r0, 80057da <__d2b+0x7a>
 800579e:	f1c0 0320 	rsb	r3, r0, #32
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	430b      	orrs	r3, r1
 80057a8:	40c2      	lsrs	r2, r0
 80057aa:	616b      	str	r3, [r5, #20]
 80057ac:	9201      	str	r2, [sp, #4]
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf14      	ite	ne
 80057b4:	2102      	movne	r1, #2
 80057b6:	2101      	moveq	r1, #1
 80057b8:	61ab      	str	r3, [r5, #24]
 80057ba:	6129      	str	r1, [r5, #16]
 80057bc:	b1bc      	cbz	r4, 80057ee <__d2b+0x8e>
 80057be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80057c2:	4404      	add	r4, r0
 80057c4:	6034      	str	r4, [r6, #0]
 80057c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057cc:	6018      	str	r0, [r3, #0]
 80057ce:	4628      	mov	r0, r5
 80057d0:	b003      	add	sp, #12
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d8:	e7d7      	b.n	800578a <__d2b+0x2a>
 80057da:	6169      	str	r1, [r5, #20]
 80057dc:	e7e7      	b.n	80057ae <__d2b+0x4e>
 80057de:	a801      	add	r0, sp, #4
 80057e0:	f7ff fd64 	bl	80052ac <__lo0bits>
 80057e4:	9b01      	ldr	r3, [sp, #4]
 80057e6:	2101      	movs	r1, #1
 80057e8:	616b      	str	r3, [r5, #20]
 80057ea:	3020      	adds	r0, #32
 80057ec:	e7e5      	b.n	80057ba <__d2b+0x5a>
 80057ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057f2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80057f6:	6030      	str	r0, [r6, #0]
 80057f8:	6918      	ldr	r0, [r3, #16]
 80057fa:	f7ff fd37 	bl	800526c <__hi0bits>
 80057fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005802:	e7e2      	b.n	80057ca <__d2b+0x6a>
 8005804:	080061ae 	.word	0x080061ae
 8005808:	080061d0 	.word	0x080061d0

0800580c <__sread>:
 800580c:	b510      	push	{r4, lr}
 800580e:	460c      	mov	r4, r1
 8005810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005814:	f000 f8a8 	bl	8005968 <_read_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	bfab      	itete	ge
 800581c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800581e:	89a3      	ldrhlt	r3, [r4, #12]
 8005820:	181b      	addge	r3, r3, r0
 8005822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005826:	bfac      	ite	ge
 8005828:	6563      	strge	r3, [r4, #84]	; 0x54
 800582a:	81a3      	strhlt	r3, [r4, #12]
 800582c:	bd10      	pop	{r4, pc}

0800582e <__swrite>:
 800582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005832:	461f      	mov	r7, r3
 8005834:	898b      	ldrh	r3, [r1, #12]
 8005836:	4605      	mov	r5, r0
 8005838:	05db      	lsls	r3, r3, #23
 800583a:	460c      	mov	r4, r1
 800583c:	4616      	mov	r6, r2
 800583e:	d505      	bpl.n	800584c <__swrite+0x1e>
 8005840:	2302      	movs	r3, #2
 8005842:	2200      	movs	r2, #0
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	f000 f87c 	bl	8005944 <_lseek_r>
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	4632      	mov	r2, r6
 8005850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	4628      	mov	r0, r5
 8005858:	463b      	mov	r3, r7
 800585a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800585e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005862:	f000 b8a3 	b.w	80059ac <_write_r>

08005866 <__sseek>:
 8005866:	b510      	push	{r4, lr}
 8005868:	460c      	mov	r4, r1
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 f869 	bl	8005944 <_lseek_r>
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	bf15      	itete	ne
 8005878:	6560      	strne	r0, [r4, #84]	; 0x54
 800587a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800587e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005882:	81a3      	strheq	r3, [r4, #12]
 8005884:	bf18      	it	ne
 8005886:	81a3      	strhne	r3, [r4, #12]
 8005888:	bd10      	pop	{r4, pc}

0800588a <__sclose>:
 800588a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588e:	f000 b849 	b.w	8005924 <_close_r>

08005892 <_realloc_r>:
 8005892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005896:	4680      	mov	r8, r0
 8005898:	4614      	mov	r4, r2
 800589a:	460e      	mov	r6, r1
 800589c:	b921      	cbnz	r1, 80058a8 <_realloc_r+0x16>
 800589e:	4611      	mov	r1, r2
 80058a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	f7ff bb04 	b.w	8004eb0 <_malloc_r>
 80058a8:	b92a      	cbnz	r2, 80058b6 <_realloc_r+0x24>
 80058aa:	f000 f8d1 	bl	8005a50 <_free_r>
 80058ae:	4625      	mov	r5, r4
 80058b0:	4628      	mov	r0, r5
 80058b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b6:	f000 f925 	bl	8005b04 <_malloc_usable_size_r>
 80058ba:	4284      	cmp	r4, r0
 80058bc:	4607      	mov	r7, r0
 80058be:	d802      	bhi.n	80058c6 <_realloc_r+0x34>
 80058c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058c4:	d812      	bhi.n	80058ec <_realloc_r+0x5a>
 80058c6:	4621      	mov	r1, r4
 80058c8:	4640      	mov	r0, r8
 80058ca:	f7ff faf1 	bl	8004eb0 <_malloc_r>
 80058ce:	4605      	mov	r5, r0
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0ed      	beq.n	80058b0 <_realloc_r+0x1e>
 80058d4:	42bc      	cmp	r4, r7
 80058d6:	4622      	mov	r2, r4
 80058d8:	4631      	mov	r1, r6
 80058da:	bf28      	it	cs
 80058dc:	463a      	movcs	r2, r7
 80058de:	f000 f877 	bl	80059d0 <memcpy>
 80058e2:	4631      	mov	r1, r6
 80058e4:	4640      	mov	r0, r8
 80058e6:	f000 f8b3 	bl	8005a50 <_free_r>
 80058ea:	e7e1      	b.n	80058b0 <_realloc_r+0x1e>
 80058ec:	4635      	mov	r5, r6
 80058ee:	e7df      	b.n	80058b0 <_realloc_r+0x1e>

080058f0 <memmove>:
 80058f0:	4288      	cmp	r0, r1
 80058f2:	b510      	push	{r4, lr}
 80058f4:	eb01 0402 	add.w	r4, r1, r2
 80058f8:	d902      	bls.n	8005900 <memmove+0x10>
 80058fa:	4284      	cmp	r4, r0
 80058fc:	4623      	mov	r3, r4
 80058fe:	d807      	bhi.n	8005910 <memmove+0x20>
 8005900:	1e43      	subs	r3, r0, #1
 8005902:	42a1      	cmp	r1, r4
 8005904:	d008      	beq.n	8005918 <memmove+0x28>
 8005906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800590a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800590e:	e7f8      	b.n	8005902 <memmove+0x12>
 8005910:	4601      	mov	r1, r0
 8005912:	4402      	add	r2, r0
 8005914:	428a      	cmp	r2, r1
 8005916:	d100      	bne.n	800591a <memmove+0x2a>
 8005918:	bd10      	pop	{r4, pc}
 800591a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800591e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005922:	e7f7      	b.n	8005914 <memmove+0x24>

08005924 <_close_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	2300      	movs	r3, #0
 8005928:	4d05      	ldr	r5, [pc, #20]	; (8005940 <_close_r+0x1c>)
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fb fd3d 	bl	80013ae <_close>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_close_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_close_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	200003d8 	.word	0x200003d8

08005944 <_lseek_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	2200      	movs	r2, #0
 800594e:	4d05      	ldr	r5, [pc, #20]	; (8005964 <_lseek_r+0x20>)
 8005950:	602a      	str	r2, [r5, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f7fb fd4f 	bl	80013f6 <_lseek>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_lseek_r+0x1e>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_lseek_r+0x1e>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	200003d8 	.word	0x200003d8

08005968 <_read_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	4611      	mov	r1, r2
 8005970:	2200      	movs	r2, #0
 8005972:	4d05      	ldr	r5, [pc, #20]	; (8005988 <_read_r+0x20>)
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f7fb fce0 	bl	800133c <_read>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_read_r+0x1e>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_read_r+0x1e>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	200003d8 	.word	0x200003d8

0800598c <_sbrk_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	2300      	movs	r3, #0
 8005990:	4d05      	ldr	r5, [pc, #20]	; (80059a8 <_sbrk_r+0x1c>)
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fb fd3a 	bl	8001410 <_sbrk>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_sbrk_r+0x1a>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_sbrk_r+0x1a>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	200003d8 	.word	0x200003d8

080059ac <_write_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	2200      	movs	r2, #0
 80059b6:	4d05      	ldr	r5, [pc, #20]	; (80059cc <_write_r+0x20>)
 80059b8:	602a      	str	r2, [r5, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f7fb fcdb 	bl	8001376 <_write>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_write_r+0x1e>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_write_r+0x1e>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	200003d8 	.word	0x200003d8

080059d0 <memcpy>:
 80059d0:	440a      	add	r2, r1
 80059d2:	4291      	cmp	r1, r2
 80059d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059d8:	d100      	bne.n	80059dc <memcpy+0xc>
 80059da:	4770      	bx	lr
 80059dc:	b510      	push	{r4, lr}
 80059de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059e2:	4291      	cmp	r1, r2
 80059e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059e8:	d1f9      	bne.n	80059de <memcpy+0xe>
 80059ea:	bd10      	pop	{r4, pc}

080059ec <__assert_func>:
 80059ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ee:	4614      	mov	r4, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <__assert_func+0x2c>)
 80059f4:	4605      	mov	r5, r0
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68d8      	ldr	r0, [r3, #12]
 80059fa:	b14c      	cbz	r4, 8005a10 <__assert_func+0x24>
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <__assert_func+0x30>)
 80059fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a02:	9100      	str	r1, [sp, #0]
 8005a04:	462b      	mov	r3, r5
 8005a06:	4906      	ldr	r1, [pc, #24]	; (8005a20 <__assert_func+0x34>)
 8005a08:	f000 f884 	bl	8005b14 <fiprintf>
 8005a0c:	f000 f8a1 	bl	8005b52 <abort>
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <__assert_func+0x38>)
 8005a12:	461c      	mov	r4, r3
 8005a14:	e7f3      	b.n	80059fe <__assert_func+0x12>
 8005a16:	bf00      	nop
 8005a18:	20000064 	.word	0x20000064
 8005a1c:	08006437 	.word	0x08006437
 8005a20:	08006444 	.word	0x08006444
 8005a24:	08006472 	.word	0x08006472

08005a28 <_calloc_r>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	fba1 5402 	umull	r5, r4, r1, r2
 8005a2e:	b934      	cbnz	r4, 8005a3e <_calloc_r+0x16>
 8005a30:	4629      	mov	r1, r5
 8005a32:	f7ff fa3d 	bl	8004eb0 <_malloc_r>
 8005a36:	4606      	mov	r6, r0
 8005a38:	b928      	cbnz	r0, 8005a46 <_calloc_r+0x1e>
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
 8005a3e:	220c      	movs	r2, #12
 8005a40:	2600      	movs	r6, #0
 8005a42:	6002      	str	r2, [r0, #0]
 8005a44:	e7f9      	b.n	8005a3a <_calloc_r+0x12>
 8005a46:	462a      	mov	r2, r5
 8005a48:	4621      	mov	r1, r4
 8005a4a:	f7fe f9fd 	bl	8003e48 <memset>
 8005a4e:	e7f4      	b.n	8005a3a <_calloc_r+0x12>

08005a50 <_free_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4605      	mov	r5, r0
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d040      	beq.n	8005ada <_free_r+0x8a>
 8005a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a5c:	1f0c      	subs	r4, r1, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bfb8      	it	lt
 8005a62:	18e4      	addlt	r4, r4, r3
 8005a64:	f7ff fb4e 	bl	8005104 <__malloc_lock>
 8005a68:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <_free_r+0x8c>)
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	b933      	cbnz	r3, 8005a7c <_free_r+0x2c>
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	6014      	str	r4, [r2, #0]
 8005a72:	4628      	mov	r0, r5
 8005a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a78:	f7ff bb4a 	b.w	8005110 <__malloc_unlock>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d908      	bls.n	8005a92 <_free_r+0x42>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1809      	addeq	r1, r1, r0
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	e7ed      	b.n	8005a6e <_free_r+0x1e>
 8005a92:	461a      	mov	r2, r3
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	b10b      	cbz	r3, 8005a9c <_free_r+0x4c>
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	d9fa      	bls.n	8005a92 <_free_r+0x42>
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	1850      	adds	r0, r2, r1
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d10b      	bne.n	8005abc <_free_r+0x6c>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	1850      	adds	r0, r2, r1
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	d1e0      	bne.n	8005a72 <_free_r+0x22>
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4408      	add	r0, r1
 8005ab6:	6010      	str	r0, [r2, #0]
 8005ab8:	6053      	str	r3, [r2, #4]
 8005aba:	e7da      	b.n	8005a72 <_free_r+0x22>
 8005abc:	d902      	bls.n	8005ac4 <_free_r+0x74>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	e7d6      	b.n	8005a72 <_free_r+0x22>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	1821      	adds	r1, r4, r0
 8005ac8:	428b      	cmp	r3, r1
 8005aca:	bf01      	itttt	eq
 8005acc:	6819      	ldreq	r1, [r3, #0]
 8005ace:	685b      	ldreq	r3, [r3, #4]
 8005ad0:	1809      	addeq	r1, r1, r0
 8005ad2:	6021      	streq	r1, [r4, #0]
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	6054      	str	r4, [r2, #4]
 8005ad8:	e7cb      	b.n	8005a72 <_free_r+0x22>
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	200003d0 	.word	0x200003d0

08005ae0 <__ascii_mbtowc>:
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	b901      	cbnz	r1, 8005ae6 <__ascii_mbtowc+0x6>
 8005ae4:	a901      	add	r1, sp, #4
 8005ae6:	b142      	cbz	r2, 8005afa <__ascii_mbtowc+0x1a>
 8005ae8:	b14b      	cbz	r3, 8005afe <__ascii_mbtowc+0x1e>
 8005aea:	7813      	ldrb	r3, [r2, #0]
 8005aec:	600b      	str	r3, [r1, #0]
 8005aee:	7812      	ldrb	r2, [r2, #0]
 8005af0:	1e10      	subs	r0, r2, #0
 8005af2:	bf18      	it	ne
 8005af4:	2001      	movne	r0, #1
 8005af6:	b002      	add	sp, #8
 8005af8:	4770      	bx	lr
 8005afa:	4610      	mov	r0, r2
 8005afc:	e7fb      	b.n	8005af6 <__ascii_mbtowc+0x16>
 8005afe:	f06f 0001 	mvn.w	r0, #1
 8005b02:	e7f8      	b.n	8005af6 <__ascii_mbtowc+0x16>

08005b04 <_malloc_usable_size_r>:
 8005b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b08:	1f18      	subs	r0, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfbc      	itt	lt
 8005b0e:	580b      	ldrlt	r3, [r1, r0]
 8005b10:	18c0      	addlt	r0, r0, r3
 8005b12:	4770      	bx	lr

08005b14 <fiprintf>:
 8005b14:	b40e      	push	{r1, r2, r3}
 8005b16:	b503      	push	{r0, r1, lr}
 8005b18:	4601      	mov	r1, r0
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	4805      	ldr	r0, [pc, #20]	; (8005b34 <fiprintf+0x20>)
 8005b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b22:	6800      	ldr	r0, [r0, #0]
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	f000 f843 	bl	8005bb0 <_vfiprintf_r>
 8005b2a:	b002      	add	sp, #8
 8005b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b30:	b003      	add	sp, #12
 8005b32:	4770      	bx	lr
 8005b34:	20000064 	.word	0x20000064

08005b38 <__ascii_wctomb>:
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	b141      	cbz	r1, 8005b50 <__ascii_wctomb+0x18>
 8005b3e:	2aff      	cmp	r2, #255	; 0xff
 8005b40:	d904      	bls.n	8005b4c <__ascii_wctomb+0x14>
 8005b42:	228a      	movs	r2, #138	; 0x8a
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	4770      	bx	lr
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	700a      	strb	r2, [r1, #0]
 8005b50:	4770      	bx	lr

08005b52 <abort>:
 8005b52:	2006      	movs	r0, #6
 8005b54:	b508      	push	{r3, lr}
 8005b56:	f000 fa87 	bl	8006068 <raise>
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f7fb fbe4 	bl	8001328 <_exit>

08005b60 <__sfputc_r>:
 8005b60:	6893      	ldr	r3, [r2, #8]
 8005b62:	b410      	push	{r4}
 8005b64:	3b01      	subs	r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	da07      	bge.n	8005b7c <__sfputc_r+0x1c>
 8005b6c:	6994      	ldr	r4, [r2, #24]
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	db01      	blt.n	8005b76 <__sfputc_r+0x16>
 8005b72:	290a      	cmp	r1, #10
 8005b74:	d102      	bne.n	8005b7c <__sfputc_r+0x1c>
 8005b76:	bc10      	pop	{r4}
 8005b78:	f000 b934 	b.w	8005de4 <__swbuf_r>
 8005b7c:	6813      	ldr	r3, [r2, #0]
 8005b7e:	1c58      	adds	r0, r3, #1
 8005b80:	6010      	str	r0, [r2, #0]
 8005b82:	7019      	strb	r1, [r3, #0]
 8005b84:	4608      	mov	r0, r1
 8005b86:	bc10      	pop	{r4}
 8005b88:	4770      	bx	lr

08005b8a <__sfputs_r>:
 8005b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	460f      	mov	r7, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	18d5      	adds	r5, r2, r3
 8005b94:	42ac      	cmp	r4, r5
 8005b96:	d101      	bne.n	8005b9c <__sfputs_r+0x12>
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e007      	b.n	8005bac <__sfputs_r+0x22>
 8005b9c:	463a      	mov	r2, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba4:	f7ff ffdc 	bl	8005b60 <__sfputc_r>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d1f3      	bne.n	8005b94 <__sfputs_r+0xa>
 8005bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bb0 <_vfiprintf_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	460d      	mov	r5, r1
 8005bb6:	4614      	mov	r4, r2
 8005bb8:	4698      	mov	r8, r3
 8005bba:	4606      	mov	r6, r0
 8005bbc:	b09d      	sub	sp, #116	; 0x74
 8005bbe:	b118      	cbz	r0, 8005bc8 <_vfiprintf_r+0x18>
 8005bc0:	6a03      	ldr	r3, [r0, #32]
 8005bc2:	b90b      	cbnz	r3, 8005bc8 <_vfiprintf_r+0x18>
 8005bc4:	f7fe f90a 	bl	8003ddc <__sinit>
 8005bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	d405      	bmi.n	8005bda <_vfiprintf_r+0x2a>
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	059a      	lsls	r2, r3, #22
 8005bd2:	d402      	bmi.n	8005bda <_vfiprintf_r+0x2a>
 8005bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bd6:	f7fe f96e 	bl	8003eb6 <__retarget_lock_acquire_recursive>
 8005bda:	89ab      	ldrh	r3, [r5, #12]
 8005bdc:	071b      	lsls	r3, r3, #28
 8005bde:	d501      	bpl.n	8005be4 <_vfiprintf_r+0x34>
 8005be0:	692b      	ldr	r3, [r5, #16]
 8005be2:	b99b      	cbnz	r3, 8005c0c <_vfiprintf_r+0x5c>
 8005be4:	4629      	mov	r1, r5
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 f93a 	bl	8005e60 <__swsetup_r>
 8005bec:	b170      	cbz	r0, 8005c0c <_vfiprintf_r+0x5c>
 8005bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf0:	07dc      	lsls	r4, r3, #31
 8005bf2:	d504      	bpl.n	8005bfe <_vfiprintf_r+0x4e>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf8:	b01d      	add	sp, #116	; 0x74
 8005bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfe:	89ab      	ldrh	r3, [r5, #12]
 8005c00:	0598      	lsls	r0, r3, #22
 8005c02:	d4f7      	bmi.n	8005bf4 <_vfiprintf_r+0x44>
 8005c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c06:	f7fe f957 	bl	8003eb8 <__retarget_lock_release_recursive>
 8005c0a:	e7f3      	b.n	8005bf4 <_vfiprintf_r+0x44>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c10:	2320      	movs	r3, #32
 8005c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c16:	2330      	movs	r3, #48	; 0x30
 8005c18:	f04f 0901 	mov.w	r9, #1
 8005c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005dd0 <_vfiprintf_r+0x220>
 8005c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c28:	4623      	mov	r3, r4
 8005c2a:	469a      	mov	sl, r3
 8005c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c30:	b10a      	cbz	r2, 8005c36 <_vfiprintf_r+0x86>
 8005c32:	2a25      	cmp	r2, #37	; 0x25
 8005c34:	d1f9      	bne.n	8005c2a <_vfiprintf_r+0x7a>
 8005c36:	ebba 0b04 	subs.w	fp, sl, r4
 8005c3a:	d00b      	beq.n	8005c54 <_vfiprintf_r+0xa4>
 8005c3c:	465b      	mov	r3, fp
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ffa1 	bl	8005b8a <__sfputs_r>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f000 80a9 	beq.w	8005da0 <_vfiprintf_r+0x1f0>
 8005c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c50:	445a      	add	r2, fp
 8005c52:	9209      	str	r2, [sp, #36]	; 0x24
 8005c54:	f89a 3000 	ldrb.w	r3, [sl]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80a1 	beq.w	8005da0 <_vfiprintf_r+0x1f0>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c68:	f10a 0a01 	add.w	sl, sl, #1
 8005c6c:	9304      	str	r3, [sp, #16]
 8005c6e:	9307      	str	r3, [sp, #28]
 8005c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c74:	931a      	str	r3, [sp, #104]	; 0x68
 8005c76:	4654      	mov	r4, sl
 8005c78:	2205      	movs	r2, #5
 8005c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7e:	4854      	ldr	r0, [pc, #336]	; (8005dd0 <_vfiprintf_r+0x220>)
 8005c80:	f7fe f91b 	bl	8003eba <memchr>
 8005c84:	9a04      	ldr	r2, [sp, #16]
 8005c86:	b9d8      	cbnz	r0, 8005cc0 <_vfiprintf_r+0x110>
 8005c88:	06d1      	lsls	r1, r2, #27
 8005c8a:	bf44      	itt	mi
 8005c8c:	2320      	movmi	r3, #32
 8005c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c92:	0713      	lsls	r3, r2, #28
 8005c94:	bf44      	itt	mi
 8005c96:	232b      	movmi	r3, #43	; 0x2b
 8005c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca2:	d015      	beq.n	8005cd0 <_vfiprintf_r+0x120>
 8005ca4:	4654      	mov	r4, sl
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f04f 0c0a 	mov.w	ip, #10
 8005cac:	9a07      	ldr	r2, [sp, #28]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb4:	3b30      	subs	r3, #48	; 0x30
 8005cb6:	2b09      	cmp	r3, #9
 8005cb8:	d94d      	bls.n	8005d56 <_vfiprintf_r+0x1a6>
 8005cba:	b1b0      	cbz	r0, 8005cea <_vfiprintf_r+0x13a>
 8005cbc:	9207      	str	r2, [sp, #28]
 8005cbe:	e014      	b.n	8005cea <_vfiprintf_r+0x13a>
 8005cc0:	eba0 0308 	sub.w	r3, r0, r8
 8005cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	46a2      	mov	sl, r4
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	e7d2      	b.n	8005c76 <_vfiprintf_r+0xc6>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	1d19      	adds	r1, r3, #4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	9103      	str	r1, [sp, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bfbb      	ittet	lt
 8005cdc:	425b      	neglt	r3, r3
 8005cde:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce2:	9307      	strge	r3, [sp, #28]
 8005ce4:	9307      	strlt	r3, [sp, #28]
 8005ce6:	bfb8      	it	lt
 8005ce8:	9204      	strlt	r2, [sp, #16]
 8005cea:	7823      	ldrb	r3, [r4, #0]
 8005cec:	2b2e      	cmp	r3, #46	; 0x2e
 8005cee:	d10c      	bne.n	8005d0a <_vfiprintf_r+0x15a>
 8005cf0:	7863      	ldrb	r3, [r4, #1]
 8005cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf4:	d134      	bne.n	8005d60 <_vfiprintf_r+0x1b0>
 8005cf6:	9b03      	ldr	r3, [sp, #12]
 8005cf8:	3402      	adds	r4, #2
 8005cfa:	1d1a      	adds	r2, r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	9203      	str	r2, [sp, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bfb8      	it	lt
 8005d04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d08:	9305      	str	r3, [sp, #20]
 8005d0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005dd4 <_vfiprintf_r+0x224>
 8005d0e:	2203      	movs	r2, #3
 8005d10:	4650      	mov	r0, sl
 8005d12:	7821      	ldrb	r1, [r4, #0]
 8005d14:	f7fe f8d1 	bl	8003eba <memchr>
 8005d18:	b138      	cbz	r0, 8005d2a <_vfiprintf_r+0x17a>
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	eba0 000a 	sub.w	r0, r0, sl
 8005d22:	4082      	lsls	r2, r0
 8005d24:	4313      	orrs	r3, r2
 8005d26:	3401      	adds	r4, #1
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2e:	2206      	movs	r2, #6
 8005d30:	4829      	ldr	r0, [pc, #164]	; (8005dd8 <_vfiprintf_r+0x228>)
 8005d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d36:	f7fe f8c0 	bl	8003eba <memchr>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d03f      	beq.n	8005dbe <_vfiprintf_r+0x20e>
 8005d3e:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <_vfiprintf_r+0x22c>)
 8005d40:	bb1b      	cbnz	r3, 8005d8a <_vfiprintf_r+0x1da>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	3307      	adds	r3, #7
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d50:	443b      	add	r3, r7
 8005d52:	9309      	str	r3, [sp, #36]	; 0x24
 8005d54:	e768      	b.n	8005c28 <_vfiprintf_r+0x78>
 8005d56:	460c      	mov	r4, r1
 8005d58:	2001      	movs	r0, #1
 8005d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d5e:	e7a6      	b.n	8005cae <_vfiprintf_r+0xfe>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f04f 0c0a 	mov.w	ip, #10
 8005d66:	4619      	mov	r1, r3
 8005d68:	3401      	adds	r4, #1
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d72:	3a30      	subs	r2, #48	; 0x30
 8005d74:	2a09      	cmp	r2, #9
 8005d76:	d903      	bls.n	8005d80 <_vfiprintf_r+0x1d0>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0c6      	beq.n	8005d0a <_vfiprintf_r+0x15a>
 8005d7c:	9105      	str	r1, [sp, #20]
 8005d7e:	e7c4      	b.n	8005d0a <_vfiprintf_r+0x15a>
 8005d80:	4604      	mov	r4, r0
 8005d82:	2301      	movs	r3, #1
 8005d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d88:	e7f0      	b.n	8005d6c <_vfiprintf_r+0x1bc>
 8005d8a:	ab03      	add	r3, sp, #12
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <_vfiprintf_r+0x230>)
 8005d94:	a904      	add	r1, sp, #16
 8005d96:	f7fd fbb3 	bl	8003500 <_printf_float>
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	1c78      	adds	r0, r7, #1
 8005d9e:	d1d6      	bne.n	8005d4e <_vfiprintf_r+0x19e>
 8005da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	d405      	bmi.n	8005db2 <_vfiprintf_r+0x202>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	059a      	lsls	r2, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_vfiprintf_r+0x202>
 8005dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dae:	f7fe f883 	bl	8003eb8 <__retarget_lock_release_recursive>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	065b      	lsls	r3, r3, #25
 8005db6:	f53f af1d 	bmi.w	8005bf4 <_vfiprintf_r+0x44>
 8005dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dbc:	e71c      	b.n	8005bf8 <_vfiprintf_r+0x48>
 8005dbe:	ab03      	add	r3, sp, #12
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <_vfiprintf_r+0x230>)
 8005dc8:	a904      	add	r1, sp, #16
 8005dca:	f7fd fe39 	bl	8003a40 <_printf_i>
 8005dce:	e7e4      	b.n	8005d9a <_vfiprintf_r+0x1ea>
 8005dd0:	080061bf 	.word	0x080061bf
 8005dd4:	080061c5 	.word	0x080061c5
 8005dd8:	080061c9 	.word	0x080061c9
 8005ddc:	08003501 	.word	0x08003501
 8005de0:	08005b8b 	.word	0x08005b8b

08005de4 <__swbuf_r>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	460e      	mov	r6, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	4605      	mov	r5, r0
 8005dec:	b118      	cbz	r0, 8005df6 <__swbuf_r+0x12>
 8005dee:	6a03      	ldr	r3, [r0, #32]
 8005df0:	b90b      	cbnz	r3, 8005df6 <__swbuf_r+0x12>
 8005df2:	f7fd fff3 	bl	8003ddc <__sinit>
 8005df6:	69a3      	ldr	r3, [r4, #24]
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	071a      	lsls	r2, r3, #28
 8005dfe:	d525      	bpl.n	8005e4c <__swbuf_r+0x68>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	b31b      	cbz	r3, 8005e4c <__swbuf_r+0x68>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	6922      	ldr	r2, [r4, #16]
 8005e08:	b2f6      	uxtb	r6, r6
 8005e0a:	1a98      	subs	r0, r3, r2
 8005e0c:	6963      	ldr	r3, [r4, #20]
 8005e0e:	4637      	mov	r7, r6
 8005e10:	4283      	cmp	r3, r0
 8005e12:	dc04      	bgt.n	8005e1e <__swbuf_r+0x3a>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff f94c 	bl	80050b4 <_fflush_r>
 8005e1c:	b9e0      	cbnz	r0, 8005e58 <__swbuf_r+0x74>
 8005e1e:	68a3      	ldr	r3, [r4, #8]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	60a3      	str	r3, [r4, #8]
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	701e      	strb	r6, [r3, #0]
 8005e2c:	6962      	ldr	r2, [r4, #20]
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d004      	beq.n	8005e3e <__swbuf_r+0x5a>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	07db      	lsls	r3, r3, #31
 8005e38:	d506      	bpl.n	8005e48 <__swbuf_r+0x64>
 8005e3a:	2e0a      	cmp	r6, #10
 8005e3c:	d104      	bne.n	8005e48 <__swbuf_r+0x64>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f7ff f937 	bl	80050b4 <_fflush_r>
 8005e46:	b938      	cbnz	r0, 8005e58 <__swbuf_r+0x74>
 8005e48:	4638      	mov	r0, r7
 8005e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 f806 	bl	8005e60 <__swsetup_r>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d0d5      	beq.n	8005e04 <__swbuf_r+0x20>
 8005e58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e5c:	e7f4      	b.n	8005e48 <__swbuf_r+0x64>
	...

08005e60 <__swsetup_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <__swsetup_r+0xac>)
 8005e64:	4605      	mov	r5, r0
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	460c      	mov	r4, r1
 8005e6a:	b118      	cbz	r0, 8005e74 <__swsetup_r+0x14>
 8005e6c:	6a03      	ldr	r3, [r0, #32]
 8005e6e:	b90b      	cbnz	r3, 8005e74 <__swsetup_r+0x14>
 8005e70:	f7fd ffb4 	bl	8003ddc <__sinit>
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e7a:	0718      	lsls	r0, r3, #28
 8005e7c:	d422      	bmi.n	8005ec4 <__swsetup_r+0x64>
 8005e7e:	06d9      	lsls	r1, r3, #27
 8005e80:	d407      	bmi.n	8005e92 <__swsetup_r+0x32>
 8005e82:	2309      	movs	r3, #9
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	e034      	b.n	8005efc <__swsetup_r+0x9c>
 8005e92:	0758      	lsls	r0, r3, #29
 8005e94:	d512      	bpl.n	8005ebc <__swsetup_r+0x5c>
 8005e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e98:	b141      	cbz	r1, 8005eac <__swsetup_r+0x4c>
 8005e9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d002      	beq.n	8005ea8 <__swsetup_r+0x48>
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f7ff fdd4 	bl	8005a50 <_free_r>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6363      	str	r3, [r4, #52]	; 0x34
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f043 0308 	orr.w	r3, r3, #8
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b94b      	cbnz	r3, 8005edc <__swsetup_r+0x7c>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed2:	d003      	beq.n	8005edc <__swsetup_r+0x7c>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f83f 	bl	8005f5a <__smakebuf_r>
 8005edc:	89a0      	ldrh	r0, [r4, #12]
 8005ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee2:	f010 0301 	ands.w	r3, r0, #1
 8005ee6:	d00a      	beq.n	8005efe <__swsetup_r+0x9e>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60a3      	str	r3, [r4, #8]
 8005eec:	6963      	ldr	r3, [r4, #20]
 8005eee:	425b      	negs	r3, r3
 8005ef0:	61a3      	str	r3, [r4, #24]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	b943      	cbnz	r3, 8005f08 <__swsetup_r+0xa8>
 8005ef6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005efa:	d1c4      	bne.n	8005e86 <__swsetup_r+0x26>
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	0781      	lsls	r1, r0, #30
 8005f00:	bf58      	it	pl
 8005f02:	6963      	ldrpl	r3, [r4, #20]
 8005f04:	60a3      	str	r3, [r4, #8]
 8005f06:	e7f4      	b.n	8005ef2 <__swsetup_r+0x92>
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7f7      	b.n	8005efc <__swsetup_r+0x9c>
 8005f0c:	20000064 	.word	0x20000064

08005f10 <__swhatbuf_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	4615      	mov	r5, r2
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	461e      	mov	r6, r3
 8005f1e:	b096      	sub	sp, #88	; 0x58
 8005f20:	da0c      	bge.n	8005f3c <__swhatbuf_r+0x2c>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	2100      	movs	r1, #0
 8005f26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f2a:	bf0c      	ite	eq
 8005f2c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f30:	2340      	movne	r3, #64	; 0x40
 8005f32:	2000      	movs	r0, #0
 8005f34:	6031      	str	r1, [r6, #0]
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	b016      	add	sp, #88	; 0x58
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	466a      	mov	r2, sp
 8005f3e:	f000 f849 	bl	8005fd4 <_fstat_r>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	dbed      	blt.n	8005f22 <__swhatbuf_r+0x12>
 8005f46:	9901      	ldr	r1, [sp, #4]
 8005f48:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f4c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f50:	4259      	negs	r1, r3
 8005f52:	4159      	adcs	r1, r3
 8005f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f58:	e7eb      	b.n	8005f32 <__swhatbuf_r+0x22>

08005f5a <__smakebuf_r>:
 8005f5a:	898b      	ldrh	r3, [r1, #12]
 8005f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f5e:	079d      	lsls	r5, r3, #30
 8005f60:	4606      	mov	r6, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	d507      	bpl.n	8005f76 <__smakebuf_r+0x1c>
 8005f66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	6123      	str	r3, [r4, #16]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	6163      	str	r3, [r4, #20]
 8005f72:	b002      	add	sp, #8
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	466a      	mov	r2, sp
 8005f78:	ab01      	add	r3, sp, #4
 8005f7a:	f7ff ffc9 	bl	8005f10 <__swhatbuf_r>
 8005f7e:	9900      	ldr	r1, [sp, #0]
 8005f80:	4605      	mov	r5, r0
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7fe ff94 	bl	8004eb0 <_malloc_r>
 8005f88:	b948      	cbnz	r0, 8005f9e <__smakebuf_r+0x44>
 8005f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8e:	059a      	lsls	r2, r3, #22
 8005f90:	d4ef      	bmi.n	8005f72 <__smakebuf_r+0x18>
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0302 	orr.w	r3, r3, #2
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	e7e3      	b.n	8005f66 <__smakebuf_r+0xc>
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	6020      	str	r0, [r4, #0]
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	9b00      	ldr	r3, [sp, #0]
 8005faa:	6120      	str	r0, [r4, #16]
 8005fac:	6163      	str	r3, [r4, #20]
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	b15b      	cbz	r3, 8005fca <__smakebuf_r+0x70>
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fb8:	f000 f81e 	bl	8005ff8 <_isatty_r>
 8005fbc:	b128      	cbz	r0, 8005fca <__smakebuf_r+0x70>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f023 0303 	bic.w	r3, r3, #3
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	431d      	orrs	r5, r3
 8005fce:	81a5      	strh	r5, [r4, #12]
 8005fd0:	e7cf      	b.n	8005f72 <__smakebuf_r+0x18>
	...

08005fd4 <_fstat_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4d06      	ldr	r5, [pc, #24]	; (8005ff4 <_fstat_r+0x20>)
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f7fb f9ef 	bl	80013c4 <_fstat>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	d102      	bne.n	8005ff0 <_fstat_r+0x1c>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b103      	cbz	r3, 8005ff0 <_fstat_r+0x1c>
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200003d8 	.word	0x200003d8

08005ff8 <_isatty_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4d05      	ldr	r5, [pc, #20]	; (8006014 <_isatty_r+0x1c>)
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fb f9ed 	bl	80013e2 <_isatty>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_isatty_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_isatty_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	200003d8 	.word	0x200003d8

08006018 <_raise_r>:
 8006018:	291f      	cmp	r1, #31
 800601a:	b538      	push	{r3, r4, r5, lr}
 800601c:	4604      	mov	r4, r0
 800601e:	460d      	mov	r5, r1
 8006020:	d904      	bls.n	800602c <_raise_r+0x14>
 8006022:	2316      	movs	r3, #22
 8006024:	6003      	str	r3, [r0, #0]
 8006026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800602e:	b112      	cbz	r2, 8006036 <_raise_r+0x1e>
 8006030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006034:	b94b      	cbnz	r3, 800604a <_raise_r+0x32>
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f830 	bl	800609c <_getpid_r>
 800603c:	462a      	mov	r2, r5
 800603e:	4601      	mov	r1, r0
 8006040:	4620      	mov	r0, r4
 8006042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006046:	f000 b817 	b.w	8006078 <_kill_r>
 800604a:	2b01      	cmp	r3, #1
 800604c:	d00a      	beq.n	8006064 <_raise_r+0x4c>
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	d103      	bne.n	800605a <_raise_r+0x42>
 8006052:	2316      	movs	r3, #22
 8006054:	6003      	str	r3, [r0, #0]
 8006056:	2001      	movs	r0, #1
 8006058:	e7e7      	b.n	800602a <_raise_r+0x12>
 800605a:	2400      	movs	r4, #0
 800605c:	4628      	mov	r0, r5
 800605e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006062:	4798      	blx	r3
 8006064:	2000      	movs	r0, #0
 8006066:	e7e0      	b.n	800602a <_raise_r+0x12>

08006068 <raise>:
 8006068:	4b02      	ldr	r3, [pc, #8]	; (8006074 <raise+0xc>)
 800606a:	4601      	mov	r1, r0
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	f7ff bfd3 	b.w	8006018 <_raise_r>
 8006072:	bf00      	nop
 8006074:	20000064 	.word	0x20000064

08006078 <_kill_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	2300      	movs	r3, #0
 800607c:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_kill_r+0x20>)
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	4611      	mov	r1, r2
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	f7fb f93f 	bl	8001308 <_kill>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d102      	bne.n	8006094 <_kill_r+0x1c>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	b103      	cbz	r3, 8006094 <_kill_r+0x1c>
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	bf00      	nop
 8006098:	200003d8 	.word	0x200003d8

0800609c <_getpid_r>:
 800609c:	f7fb b92d 	b.w	80012fa <_getpid>

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
