
ADC_Mult.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af0  08003af0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003af0  08003af0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af0  08003af0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08003b54  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003b54  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009790  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d6  00000000  00000000  00029858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077a  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181aa  00000000  00000000  0002cc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e131  00000000  00000000  00044e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008772d  00000000  00000000  00052f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b08  00000000  00000000  000da694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dd19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a60 	.word	0x08003a60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003a60 	.word	0x08003a60

0800014c <LCD_I2C_WriteCommand>:
/* Exported macros -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
static void LCD_I2C_WriteCommand(uint8_t command){//Enviar un byte de comando al controlador hitachi HD44780
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t highnibble,lownibble,datos[4];

    highnibble = (command & 0xF0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
    lownibble  = (uint8_t)((command & 0x0F)<<4);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]

    datos[0] = highnibble | BACKLIGHT | PIN_EN; //backlight ON,    habilito EN (EN=1, RS=0)
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
    datos[1] = highnibble | BACKLIGHT;          //backlight ON, deshabilito EN (EN=0, RS=0)
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
    datos[2] = lownibble  | BACKLIGHT | PIN_EN; //backlight ON,    habilito EN (EN=1, RS=0)
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
    datos[3] = lownibble  | BACKLIGHT;		    //backlight ON, deshabilito EN (EN=0, RS=0)
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, (uint8_t *)datos, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <LCD_I2C_WriteCommand+0x5c>)
 800019a:	f001 ffa5 	bl	80020e8 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000ec 	.word	0x200000ec

080001ac <LCD_I2C_WriteData>:


static void LCD_I2C_WriteData(uint8_t data){//Enviar un byte de datos al controlador hitachi HD44780
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	uint8_t highnibble,lownibble,datos[4];

    highnibble = (data & 0xF0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
    lownibble  = (uint8_t)((data & 0x0F)<<4);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]

    datos[0] = highnibble | BACKLIGHT | PIN_EN | PIN_RS; //backlight ON,    habilito EN (EN=1, RS=1)
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
    datos[1] = highnibble | BACKLIGHT | PIN_RS;          //backlight ON, deshabilito EN (EN=0, RS=1)
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
    datos[2] = lownibble  | BACKLIGHT | PIN_EN | PIN_RS; //backlight ON,    habilito EN (EN=1, RS=1)
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
    datos[3] = lownibble  | BACKLIGHT | PIN_RS;          //backlight ON, deshabilito EN (EN=0, RS=1)
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, (uint8_t *)datos, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <LCD_I2C_WriteData+0x5c>)
 80001fa:	f001 ff75 	bl	80020e8 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000ec 	.word	0x200000ec

0800020c <LCD_I2C_Init>:

/* Exported functions --------------------------------------------------------*/
void LCD_I2C_Init(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af02      	add	r7, sp, #8
	HAL_Delay(1000);                     //tiempo necesario para no obtener caracteres erroneos al energizar el lcd
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 fc37 	bl	8000a88 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, 0, 1, 100); //mando un "0" (backlight apagado)
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	2301      	movs	r3, #1
 8000220:	2200      	movs	r2, #0
 8000222:	214e      	movs	r1, #78	; 0x4e
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <LCD_I2C_Init+0x9c>)
 8000226:	f001 ff5f 	bl	80020e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);                      // esperar un tiempo mayor  a 100ms para VDD estable
 800022a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022e:	f000 fc2b 	bl	8000a88 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode
 8000232:	202c      	movs	r0, #44	; 0x2c
 8000234:	f7ff ff8a 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fc25 	bl	8000a88 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 800023e:	202c      	movs	r0, #44	; 0x2c
 8000240:	f7ff ff84 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fc1f 	bl	8000a88 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 800024a:	202c      	movs	r0, #44	; 0x2c
 800024c:	f7ff ff7e 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fc19 	bl	8000a88 <HAL_Delay>

    LCD_I2C_WriteCommand(0b00100000);    // mando el valor que me indica en la incializacion
 8000256:	2020      	movs	r0, #32
 8000258:	f7ff ff78 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fc13 	bl	8000a88 <HAL_Delay>

    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 8000262:	202c      	movs	r0, #44	; 0x2c
 8000264:	f7ff ff72 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000268:	2001      	movs	r0, #1
 800026a:	f000 fc0d 	bl	8000a88 <HAL_Delay>

    LCD_I2C_WriteCommand(DISPLAY_ON);    // display control on, cursor off, blink off
 800026e:	200c      	movs	r0, #12
 8000270:	f7ff ff6c 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fc07 	bl	8000a88 <HAL_Delay>

    LCD_I2C_WriteCommand(DISPLAY_CLEAR); // display control on, cursor off, blink off
 800027a:	2001      	movs	r0, #1
 800027c:	f7ff ff66 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >3mS
 8000280:	2001      	movs	r0, #1
 8000282:	f000 fc01 	bl	8000a88 <HAL_Delay>

    LCD_I2C_WriteCommand(ENTRY_MODE_SET);// cursor se mueve hacia la derecha, el contador de direcciones DDRAM (AC) más 1
 8000286:	2006      	movs	r0, #6
 8000288:	f7ff ff60 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS, fin de la inicializacion
 800028c:	2001      	movs	r0, #1
 800028e:	f000 fbfb 	bl	8000a88 <HAL_Delay>

    LCD_I2C_WriteCommand(0b00001100);    // mando el valor que me indica en la incializacion
 8000292:	200c      	movs	r0, #12
 8000294:	f7ff ff5a 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000298:	2001      	movs	r0, #1
 800029a:	f000 fbf5 	bl	8000a88 <HAL_Delay>

    LCD_I2C_ClearText();
 800029e:	f000 f805 	bl	80002ac <LCD_I2C_ClearText>
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	200000ec 	.word	0x200000ec

080002ac <LCD_I2C_ClearText>:

void LCD_I2C_ClearText(){// Limpiar el texto de la pantalla
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  LCD_I2C_WriteCommand(DISPLAY_CLEAR);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f7ff ff4b 	bl	800014c <LCD_I2C_WriteCommand>
  HAL_Delay(5);
 80002b6:	2005      	movs	r0, #5
 80002b8:	f000 fbe6 	bl	8000a88 <HAL_Delay>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <LCD_I2C_WriteText>:
		case 0: LCD_I2C_NoBlink();break;
		case 1: LCD_I2C_Blink()  ;break;
    }
}

void LCD_I2C_WriteText(uint8_t row, uint8_t col, char* string){//Escribir en la pantalla
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	603a      	str	r2, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	460b      	mov	r3, r1
 80002ce:	71bb      	strb	r3, [r7, #6]
	row = row - 1;//para empezar desde la fila    1 y no desde la fila    0
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	71fb      	strb	r3, [r7, #7]
	col = col - 1;//para empezar desde la columna 1 y no desde la columna 0
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	3b01      	subs	r3, #1
 80002da:	71bb      	strb	r3, [r7, #6]
	//row -> 1,2,3,4        col -> 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
    switch (row) {
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d81a      	bhi.n	8000318 <LCD_I2C_WriteText+0x58>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <LCD_I2C_WriteText+0x28>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	08000301 	.word	0x08000301
 80002f0:	08000309 	.word	0x08000309
 80002f4:	08000311 	.word	0x08000311
        case 0: col = col + 0x80;break; // operacion para agregar ala fila 0 su columna "x"
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	3b80      	subs	r3, #128	; 0x80
 80002fc:	71bb      	strb	r3, [r7, #6]
 80002fe:	e00f      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        case 1: col = col + 0xC0;break; // operacion para agregar ala fila 1 su columna "x"
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	3b40      	subs	r3, #64	; 0x40
 8000304:	71bb      	strb	r3, [r7, #6]
 8000306:	e00b      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        case 2: col = col + 0x94;break; // operacion para agregar ala fila 2 su columna "x"
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	3b6c      	subs	r3, #108	; 0x6c
 800030c:	71bb      	strb	r3, [r7, #6]
 800030e:	e007      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        case 3: col = col + 0xD4;break; // operacion para agregar ala fila 3 su columna "x"
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	3b2c      	subs	r3, #44	; 0x2c
 8000314:	71bb      	strb	r3, [r7, #6]
 8000316:	e003      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        default:col = col + 0x80;break; // fila 0 si ingresa un valor que no es del 0 al 3
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	3b80      	subs	r3, #128	; 0x80
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	bf00      	nop
    }

    LCD_I2C_WriteCommand(col);
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff12 	bl	800014c <LCD_I2C_WriteCommand>
    //Funcion para mandar strings sin saber el tamaño de la cadena
    //while(*string != '\0')
    while (*string)
 8000328:	e006      	b.n	8000338 <LCD_I2C_WriteText+0x78>
        LCD_I2C_WriteData(*string++);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	1c5a      	adds	r2, r3, #1
 800032e:	603a      	str	r2, [r7, #0]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff3a 	bl	80001ac <LCD_I2C_WriteData>
    while (*string)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f4      	bne.n	800032a <LCD_I2C_WriteText+0x6a>
}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop

0800034c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800035c:	4b27      	ldr	r3, [pc, #156]	; (80003fc <MX_ADC1_Init+0xb0>)
 800035e:	4a28      	ldr	r2, [pc, #160]	; (8000400 <MX_ADC1_Init+0xb4>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000362:	4b26      	ldr	r3, [pc, #152]	; (80003fc <MX_ADC1_Init+0xb0>)
 8000364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000368:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <MX_ADC1_Init+0xb0>)
 800036c:	2200      	movs	r2, #0
 800036e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000370:	4b22      	ldr	r3, [pc, #136]	; (80003fc <MX_ADC1_Init+0xb0>)
 8000372:	2200      	movs	r2, #0
 8000374:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <MX_ADC1_Init+0xb0>)
 8000378:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800037c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_ADC1_Init+0xb0>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_ADC1_Init+0xb0>)
 8000386:	2203      	movs	r2, #3
 8000388:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038a:	481c      	ldr	r0, [pc, #112]	; (80003fc <MX_ADC1_Init+0xb0>)
 800038c:	f000 fba0 	bl	8000ad0 <HAL_ADC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000396:	f000 fa40 	bl	800081a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4814      	ldr	r0, [pc, #80]	; (80003fc <MX_ADC1_Init+0xb0>)
 80003ac:	f000 fed6 	bl	800115c <HAL_ADC_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 fa30 	bl	800081a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003be:	2302      	movs	r3, #2
 80003c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_ADC1_Init+0xb0>)
 80003c8:	f000 fec8 	bl	800115c <HAL_ADC_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003d2:	f000 fa22 	bl	800081a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003da:	2303      	movs	r3, #3
 80003dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <MX_ADC1_Init+0xb0>)
 80003e4:	f000 feba 	bl	800115c <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ee:	f000 fa14 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000078 	.word	0x20000078
 8000400:	40012400 	.word	0x40012400

08000404 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <HAL_ADC_MspInit+0xcc>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d151      	bne.n	80004c8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000424:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <HAL_ADC_MspInit+0xd0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a2a      	ldr	r2, [pc, #168]	; (80004d4 <HAL_ADC_MspInit+0xd0>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <HAL_ADC_MspInit+0xd0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <HAL_ADC_MspInit+0xd0>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a24      	ldr	r2, [pc, #144]	; (80004d4 <HAL_ADC_MspInit+0xd0>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <HAL_ADC_MspInit+0xd0>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000454:	2307      	movs	r3, #7
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000458:	2303      	movs	r3, #3
 800045a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	481d      	ldr	r0, [pc, #116]	; (80004d8 <HAL_ADC_MspInit+0xd4>)
 8000464:	f001 fb78 	bl	8001b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 800046a:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <HAL_ADC_MspInit+0xdc>)
 800046c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 8000482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000486:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 800048a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800048e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 8000492:	2220      	movs	r2, #32
 8000494:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800049c:	480f      	ldr	r0, [pc, #60]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 800049e:	f001 f96d 	bl	800177c <HAL_DMA_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004a8:	f000 f9b7 	bl	800081a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 80004b0:	621a      	str	r2, [r3, #32]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <HAL_ADC_MspInit+0xd8>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	2012      	movs	r0, #18
 80004be:	f001 f926 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004c2:	2012      	movs	r0, #18
 80004c4:	f001 f93f 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40012400 	.word	0x40012400
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	200000a8 	.word	0x200000a8
 80004e0:	40020008 	.word	0x40020008

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <MX_DMA_Init+0x38>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_DMA_Init+0x38>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200b      	movs	r0, #11
 8000508:	f001 f901 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800050c:	200b      	movs	r0, #11
 800050e:	f001 f91a 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_GPIO_Init+0x58>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <MX_GPIO_Init+0x58>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_GPIO_Init+0x58>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0320 	and.w	r3, r3, #32
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_GPIO_Init+0x58>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <MX_GPIO_Init+0x58>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_GPIO_Init+0x58>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_GPIO_Init+0x58>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <MX_GPIO_Init+0x58>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6193      	str	r3, [r2, #24]
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_GPIO_Init+0x58>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x50>)
 8000582:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_I2C1_Init+0x54>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x50>)
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_I2C1_Init+0x58>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C1_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_I2C1_Init+0x50>)
 800059a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800059e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_I2C1_Init+0x50>)
 80005ba:	f001 fc51 	bl	8001e60 <HAL_I2C_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c4:	f000 f929 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000ec 	.word	0x200000ec
 80005d0:	40005400 	.word	0x40005400
 80005d4:	000186a0 	.word	0x000186a0

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <HAL_I2C_MspInit+0x90>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d132      	bne.n	800065e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <HAL_I2C_MspInit+0x94>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <HAL_I2C_MspInit+0x94>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_I2C_MspInit+0x94>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000616:	2312      	movs	r3, #18
 8000618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <HAL_I2C_MspInit+0x98>)
 8000626:	f001 fa97 	bl	8001b58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_I2C_MspInit+0x9c>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
 8000640:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <HAL_I2C_MspInit+0x9c>)
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_I2C_MspInit+0x94>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_I2C_MspInit+0x94>)
 800064c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_I2C_MspInit+0x94>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40005400 	.word	0x40005400
 800066c:	40021000 	.word	0x40021000
 8000670:	40010c00 	.word	0x40010c00
 8000674:	40010000 	.word	0x40010000

08000678 <main>:


void SystemClock_Config(void);

int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  HAL_Init();
 800067c:	f000 f9a2 	bl	80009c4 <HAL_Init>
  SystemClock_Config();
 8000680:	f000 f870 	bl	8000764 <SystemClock_Config>

  MX_GPIO_Init();
 8000684:	f7ff ff4c 	bl	8000520 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f7ff ff2c 	bl	80004e4 <MX_DMA_Init>
  MX_ADC1_Init();
 800068c:	f7ff fe5e 	bl	800034c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000690:	f7ff ff74 	bl	800057c <MX_I2C1_Init>
  LCD_I2C_Init();
 8000694:	f7ff fdba 	bl	800020c <LCD_I2C_Init>
  HAL_ADC_Start_DMA(&hadc1,adc_buf,3);//inicia el módulo DMA, con los parametros del adc, el bufer de 32 bits y la cantidad de puertos.
 8000698:	2203      	movs	r2, #3
 800069a:	4919      	ldr	r1, [pc, #100]	; (8000700 <main+0x88>)
 800069c:	4819      	ldr	r0, [pc, #100]	; (8000704 <main+0x8c>)
 800069e:	f000 fba5 	bl	8000dec <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);//Inicia la interrupcion del ADC
 80006a2:	4818      	ldr	r0, [pc, #96]	; (8000704 <main+0x8c>)
 80006a4:	f000 faec 	bl	8000c80 <HAL_ADC_Start_IT>


  while (1)
  {
	  HAL_ADC_Start_IT(&hadc1);
 80006a8:	4816      	ldr	r0, [pc, #88]	; (8000704 <main+0x8c>)
 80006aa:	f000 fae9 	bl	8000c80 <HAL_ADC_Start_IT>

	  //LCD_I2C_ClearText();
	  sprintf(buff_lcd,"c1: %u ",valor_adc[0]);
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <main+0x90>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4915      	ldr	r1, [pc, #84]	; (800070c <main+0x94>)
 80006b6:	4816      	ldr	r0, [pc, #88]	; (8000710 <main+0x98>)
 80006b8:	f002 fd20 	bl	80030fc <siprintf>
	  LCD_I2C_WriteText(1,1,buff_lcd);
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <main+0x98>)
 80006be:	2101      	movs	r1, #1
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff fdfd 	bl	80002c0 <LCD_I2C_WriteText>
	  sprintf(buff_lcd,"c2: %u ",valor_adc[1]);
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <main+0x90>)
 80006c8:	885b      	ldrh	r3, [r3, #2]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4911      	ldr	r1, [pc, #68]	; (8000714 <main+0x9c>)
 80006ce:	4810      	ldr	r0, [pc, #64]	; (8000710 <main+0x98>)
 80006d0:	f002 fd14 	bl	80030fc <siprintf>
	  LCD_I2C_WriteText(1,9,buff_lcd);
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <main+0x98>)
 80006d6:	2109      	movs	r1, #9
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff fdf1 	bl	80002c0 <LCD_I2C_WriteText>
	  sprintf(buff_lcd,"c3: %u ",valor_adc[2]);
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <main+0x90>)
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	461a      	mov	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <main+0xa0>)
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <main+0x98>)
 80006e8:	f002 fd08 	bl	80030fc <siprintf>
	  LCD_I2C_WriteText(2,1,buff_lcd);
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <main+0x98>)
 80006ee:	2101      	movs	r1, #1
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff fde5 	bl	80002c0 <LCD_I2C_WriteText>
	  HAL_Delay(150);
 80006f6:	2096      	movs	r0, #150	; 0x96
 80006f8:	f000 f9c6 	bl	8000a88 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 80006fc:	e7d4      	b.n	80006a8 <main+0x30>
 80006fe:	bf00      	nop
 8000700:	20000140 	.word	0x20000140
 8000704:	20000078 	.word	0x20000078
 8000708:	2000014c 	.word	0x2000014c
 800070c:	08003a78 	.word	0x08003a78
 8000710:	20000154 	.word	0x20000154
 8000714:	08003a80 	.word	0x08003a80
 8000718:	08003a88 	.word	0x08003a88

0800071c <HAL_ADC_ConvCpltCallback>:
  }

}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <HAL_ADC_ConvCpltCallback+0x3c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d10e      	bne.n	800074c <HAL_ADC_ConvCpltCallback+0x30>
		valor_adc[0] = (uint16_t)adc_buf[0];
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_ADC_ConvCpltCallback+0x40>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_ADC_ConvCpltCallback+0x44>)
 8000736:	801a      	strh	r2, [r3, #0]
		valor_adc[1] = (uint16_t)adc_buf[1];
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_ADC_ConvCpltCallback+0x40>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_ADC_ConvCpltCallback+0x44>)
 8000740:	805a      	strh	r2, [r3, #2]
		valor_adc[2] = (uint16_t)adc_buf[2];
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_ADC_ConvCpltCallback+0x40>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_ADC_ConvCpltCallback+0x44>)
 800074a:	809a      	strh	r2, [r3, #4]
	}
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40012400 	.word	0x40012400
 800075c:	20000140 	.word	0x20000140
 8000760:	2000014c 	.word	0x2000014c

08000764 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	2228      	movs	r2, #40	; 0x28
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fce2 	bl	800313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 ffec 	bl	8002798 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007c6:	f000 f828 	bl	800081a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fa58 	bl	8002c9c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007f2:	f000 f812 	bl	800081a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007f6:	2302      	movs	r3, #2
 80007f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fbc4 	bl	8002f90 <HAL_RCCEx_PeriphCLKConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800080e:	f000 f804 	bl	800081a <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	; 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081e:	b672      	cpsid	i
}
 8000820:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000822:	e7fe      	b.n	8000822 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_MspInit+0x5c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x5c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x60>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_MspInit+0x60>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f8bf 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <DMA1_Channel1_IRQHandler+0x10>)
 80008de:	f001 f807 	bl	80018f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000a8 	.word	0x200000a8

080008ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <ADC1_2_IRQHandler+0x10>)
 80008f2:	f000 fb59 	bl	8000fa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000078 	.word	0x20000078

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f002 fc0c 	bl	800314c <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20005000 	.word	0x20005000
 8000960:	00000400 	.word	0x00000400
 8000964:	20000168 	.word	0x20000168
 8000968:	200002b8 	.word	0x200002b8

0800096c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff fff8 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800097e:	490c      	ldr	r1, [pc, #48]	; (80009b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000994:	4c09      	ldr	r4, [pc, #36]	; (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f002 fbd9 	bl	8003158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fe67 	bl	8000678 <main>
  bx lr
 80009aa:	4770      	bx	lr
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009b4:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 80009b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009bc:	200002b8 	.word	0x200002b8

080009c0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <CAN1_RX1_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x28>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x28>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 fe8f 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff ff20 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fea7 	bl	8001762 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	f000 fe6f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	2000016c 	.word	0x2000016c

08000a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	2000016c 	.word	0x2000016c

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008

08000ad0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e0be      	b.n	8000c70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fc78 	bl	8000404 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 fc73 	bl	8001400 <ADC_ConversionStop_Disable>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8099 	bne.w	8000c5e <HAL_ADC_Init+0x18e>
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8095 	bne.w	8000c5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b3c:	f023 0302 	bic.w	r3, r3, #2
 8000b40:	f043 0202 	orr.w	r2, r3, #2
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7b1b      	ldrb	r3, [r3, #12]
 8000b56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b68:	d003      	beq.n	8000b72 <HAL_ADC_Init+0xa2>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d102      	bne.n	8000b78 <HAL_ADC_Init+0xa8>
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	e000      	b.n	8000b7a <HAL_ADC_Init+0xaa>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7d1b      	ldrb	r3, [r3, #20]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d119      	bne.n	8000bbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7b1b      	ldrb	r3, [r3, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d109      	bne.n	8000ba4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	035a      	lsls	r2, r3, #13
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	e00b      	b.n	8000bbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	f043 0220 	orr.w	r2, r3, #32
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	f043 0201 	orr.w	r2, r3, #1
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <HAL_ADC_Init+0x1a8>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bec:	d003      	beq.n	8000bf6 <HAL_ADC_Init+0x126>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d104      	bne.n	8000c00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	051b      	lsls	r3, r3, #20
 8000bfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_ADC_Init+0x1ac>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d10b      	bne.n	8000c3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f023 0303 	bic.w	r3, r3, #3
 8000c32:	f043 0201 	orr.w	r2, r3, #1
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c3a:	e018      	b.n	8000c6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	f023 0312 	bic.w	r3, r3, #18
 8000c44:	f043 0210 	orr.w	r2, r3, #16
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	f043 0201 	orr.w	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c5c:	e007      	b.n	8000c6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c62:	f043 0210 	orr.w	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	ffe1f7fd 	.word	0xffe1f7fd
 8000c7c:	ff1f0efe 	.word	0xff1f0efe

08000c80 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_ADC_Start_IT+0x1a>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e0a0      	b.n	8000ddc <HAL_ADC_Start_IT+0x15c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fb52 	bl	800134c <ADC_Enable>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 808f 	bne.w	8000dd2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a45      	ldr	r2, [pc, #276]	; (8000de4 <HAL_ADC_Start_IT+0x164>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d105      	bne.n	8000cde <HAL_ADC_Start_IT+0x5e>
 8000cd2:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <HAL_ADC_Start_IT+0x168>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d115      	bne.n	8000d0a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d026      	beq.n	8000d46 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d08:	e01d      	b.n	8000d46 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <HAL_ADC_Start_IT+0x168>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d004      	beq.n	8000d2a <HAL_ADC_Start_IT+0xaa>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_ADC_Start_IT+0x164>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10d      	bne.n	8000d46 <HAL_ADC_Start_IT+0xc6>
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <HAL_ADC_Start_IT+0x168>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	f023 0206 	bic.w	r2, r3, #6
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5e:	e002      	b.n	8000d66 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f06f 0202 	mvn.w	r2, #2
 8000d76:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0220 	orr.w	r2, r2, #32
 8000d86:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d96:	d113      	bne.n	8000dc0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_ADC_Start_IT+0x164>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d105      	bne.n	8000dae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_ADC_Start_IT+0x168>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	e00c      	b.n	8000dda <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	e003      	b.n	8000dda <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40012800 	.word	0x40012800
 8000de8:	40012400 	.word	0x40012400

08000dec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a64      	ldr	r2, [pc, #400]	; (8000f94 <HAL_ADC_Start_DMA+0x1a8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d004      	beq.n	8000e10 <HAL_ADC_Start_DMA+0x24>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a63      	ldr	r2, [pc, #396]	; (8000f98 <HAL_ADC_Start_DMA+0x1ac>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d106      	bne.n	8000e1e <HAL_ADC_Start_DMA+0x32>
 8000e10:	4b60      	ldr	r3, [pc, #384]	; (8000f94 <HAL_ADC_Start_DMA+0x1a8>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f040 80b3 	bne.w	8000f84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <HAL_ADC_Start_DMA+0x40>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e0ae      	b.n	8000f8a <HAL_ADC_Start_DMA+0x19e>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 fa89 	bl	800134c <ADC_Enable>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f040 809a 	bne.w	8000f7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a4e      	ldr	r2, [pc, #312]	; (8000f98 <HAL_ADC_Start_DMA+0x1ac>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d105      	bne.n	8000e70 <HAL_ADC_Start_DMA+0x84>
 8000e64:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <HAL_ADC_Start_DMA+0x1a8>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d115      	bne.n	8000e9c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d026      	beq.n	8000ed8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e9a:	e01d      	b.n	8000ed8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a39      	ldr	r2, [pc, #228]	; (8000f94 <HAL_ADC_Start_DMA+0x1a8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d004      	beq.n	8000ebc <HAL_ADC_Start_DMA+0xd0>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a38      	ldr	r2, [pc, #224]	; (8000f98 <HAL_ADC_Start_DMA+0x1ac>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d10d      	bne.n	8000ed8 <HAL_ADC_Start_DMA+0xec>
 8000ebc:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <HAL_ADC_Start_DMA+0x1a8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ed0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	f023 0206 	bic.w	r2, r3, #6
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef0:	e002      	b.n	8000ef8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <HAL_ADC_Start_DMA+0x1b0>)
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <HAL_ADC_Start_DMA+0x1b4>)
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <HAL_ADC_Start_DMA+0x1b8>)
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f06f 0202 	mvn.w	r2, #2
 8000f20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a18      	ldr	r0, [r3, #32]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	334c      	adds	r3, #76	; 0x4c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f000 fc75 	bl	8001830 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f50:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f54:	d108      	bne.n	8000f68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f66:	e00f      	b.n	8000f88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f78:	e006      	b.n	8000f88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000f82:	e001      	b.n	8000f88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40012400 	.word	0x40012400
 8000f98:	40012800 	.word	0x40012800
 8000f9c:	08001483 	.word	0x08001483
 8000fa0:	080014ff 	.word	0x080014ff
 8000fa4:	0800151b 	.word	0x0800151b

08000fa8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03e      	beq.n	8001048 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d039      	beq.n	8001048 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d105      	bne.n	8000fec <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ff6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ffa:	d11d      	bne.n	8001038 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001000:	2b00      	cmp	r3, #0
 8001002:	d119      	bne.n	8001038 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0220 	bic.w	r2, r2, #32
 8001012:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fb6f 	bl	800071c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f06f 0212 	mvn.w	r2, #18
 8001046:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	2b00      	cmp	r3, #0
 8001050:	d04d      	beq.n	80010ee <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d048      	beq.n	80010ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800107e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001082:	d012      	beq.n	80010aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800108e:	2b00      	cmp	r3, #0
 8001090:	d125      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800109c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010a0:	d11d      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d119      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fa35 	bl	800154e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 020c 	mvn.w	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d012      	beq.n	800111e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f812 	bl	8001138 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0201 	mvn.w	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_ADC_ConfigChannel+0x20>
 8001178:	2302      	movs	r3, #2
 800117a:	e0dc      	b.n	8001336 <HAL_ADC_ConfigChannel+0x1da>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b06      	cmp	r3, #6
 800118a:	d81c      	bhi.n	80011c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b05      	subs	r3, #5
 800119e:	221f      	movs	r2, #31
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4019      	ands	r1, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	3b05      	subs	r3, #5
 80011b8:	fa00 f203 	lsl.w	r2, r0, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
 80011c4:	e03c      	b.n	8001240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d81c      	bhi.n	8001208 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3b23      	subs	r3, #35	; 0x23
 80011e0:	221f      	movs	r2, #31
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4019      	ands	r1, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3b23      	subs	r3, #35	; 0x23
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
 8001206:	e01b      	b.n	8001240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b41      	subs	r3, #65	; 0x41
 800121a:	221f      	movs	r2, #31
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	4019      	ands	r1, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	3b41      	subs	r3, #65	; 0x41
 8001234:	fa00 f203 	lsl.w	r2, r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b09      	cmp	r3, #9
 8001246:	d91c      	bls.n	8001282 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68d9      	ldr	r1, [r3, #12]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	3b1e      	subs	r3, #30
 800125a:	2207      	movs	r2, #7
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	4019      	ands	r1, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6898      	ldr	r0, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	3b1e      	subs	r3, #30
 8001274:	fa00 f203 	lsl.w	r2, r0, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	e019      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6919      	ldr	r1, [r3, #16]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	2207      	movs	r2, #7
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	4019      	ands	r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6898      	ldr	r0, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d003      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	d132      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_ADC_ConfigChannel+0x1e4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d125      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d126      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d11a      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_ADC_ConfigChannel+0x1e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_ADC_ConfigChannel+0x1ec>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9a      	lsrs	r2, r3, #18
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_ConfigChannel+0x1b2>
 800131a:	e007      	b.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f043 0220 	orr.w	r2, r3, #32
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40012400 	.word	0x40012400
 8001344:	20000000 	.word	0x20000000
 8001348:	431bde83 	.word	0x431bde83

0800134c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d040      	beq.n	80013ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <ADC_Enable+0xac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <ADC_Enable+0xb0>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001388:	e002      	b.n	8001390 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001396:	f7ff fb6d 	bl	8000a74 <HAL_GetTick>
 800139a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800139c:	e01f      	b.n	80013de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800139e:	f7ff fb69 	bl	8000a74 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d918      	bls.n	80013de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d011      	beq.n	80013de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f043 0210 	orr.w	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d1d8      	bne.n	800139e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	431bde83 	.word	0x431bde83

08001400 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d12e      	bne.n	8001478 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800142a:	f7ff fb23 	bl	8000a74 <HAL_GetTick>
 800142e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001430:	e01b      	b.n	800146a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001432:	f7ff fb1f 	bl	8000a74 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d914      	bls.n	800146a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d10d      	bne.n	800146a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f043 0210 	orr.w	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e007      	b.n	800147a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b01      	cmp	r3, #1
 8001476:	d0dc      	beq.n	8001432 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001498:	2b00      	cmp	r3, #0
 800149a:	d127      	bne.n	80014ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014b6:	d115      	bne.n	80014e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff f919 	bl	800071c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80014ea:	e004      	b.n	80014f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7ff fe0a 	bl	8001126 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fe02 	bl	800114a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <__NVIC_EnableIRQ+0x34>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff2d 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff42 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff35 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e043      	b.n	800181a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_DMA_Init+0xa8>)
 800179a:	4413      	add	r3, r2
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_DMA_Init+0xac>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	009a      	lsls	r2, r3, #2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_DMA_Init+0xb0>)
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	bffdfff8 	.word	0xbffdfff8
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Start_IT+0x20>
 800184c:	2302      	movs	r3, #2
 800184e:	e04b      	b.n	80018e8 <HAL_DMA_Start_IT+0xb8>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d13a      	bne.n	80018da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	68b9      	ldr	r1, [r7, #8]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f937 	bl	8001afc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 020e 	orr.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e00f      	b.n	80018c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 020a 	orr.w	r2, r2, #10
 80018c6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e005      	b.n	80018e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	2204      	movs	r2, #4
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d04f      	beq.n	80019b8 <HAL_DMA_IRQHandler+0xc8>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d04a      	beq.n	80019b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0204 	bic.w	r2, r2, #4
 800193e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a66      	ldr	r2, [pc, #408]	; (8001ae0 <HAL_DMA_IRQHandler+0x1f0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d029      	beq.n	800199e <HAL_DMA_IRQHandler+0xae>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a65      	ldr	r2, [pc, #404]	; (8001ae4 <HAL_DMA_IRQHandler+0x1f4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d022      	beq.n	800199a <HAL_DMA_IRQHandler+0xaa>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_DMA_IRQHandler+0x1f8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01a      	beq.n	8001994 <HAL_DMA_IRQHandler+0xa4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a62      	ldr	r2, [pc, #392]	; (8001aec <HAL_DMA_IRQHandler+0x1fc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d012      	beq.n	800198e <HAL_DMA_IRQHandler+0x9e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a60      	ldr	r2, [pc, #384]	; (8001af0 <HAL_DMA_IRQHandler+0x200>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00a      	beq.n	8001988 <HAL_DMA_IRQHandler+0x98>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5f      	ldr	r2, [pc, #380]	; (8001af4 <HAL_DMA_IRQHandler+0x204>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d102      	bne.n	8001982 <HAL_DMA_IRQHandler+0x92>
 800197c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001980:	e00e      	b.n	80019a0 <HAL_DMA_IRQHandler+0xb0>
 8001982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001986:	e00b      	b.n	80019a0 <HAL_DMA_IRQHandler+0xb0>
 8001988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800198c:	e008      	b.n	80019a0 <HAL_DMA_IRQHandler+0xb0>
 800198e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001992:	e005      	b.n	80019a0 <HAL_DMA_IRQHandler+0xb0>
 8001994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001998:	e002      	b.n	80019a0 <HAL_DMA_IRQHandler+0xb0>
 800199a:	2340      	movs	r3, #64	; 0x40
 800199c:	e000      	b.n	80019a0 <HAL_DMA_IRQHandler+0xb0>
 800199e:	2304      	movs	r3, #4
 80019a0:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <HAL_DMA_IRQHandler+0x208>)
 80019a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8094 	beq.w	8001ad6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019b6:	e08e      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2202      	movs	r2, #2
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d056      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x186>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d051      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 020a 	bic.w	r2, r2, #10
 80019ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a38      	ldr	r2, [pc, #224]	; (8001ae0 <HAL_DMA_IRQHandler+0x1f0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d029      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x166>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a37      	ldr	r2, [pc, #220]	; (8001ae4 <HAL_DMA_IRQHandler+0x1f4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d022      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x162>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a35      	ldr	r2, [pc, #212]	; (8001ae8 <HAL_DMA_IRQHandler+0x1f8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01a      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x15c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a34      	ldr	r2, [pc, #208]	; (8001aec <HAL_DMA_IRQHandler+0x1fc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d012      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x156>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <HAL_DMA_IRQHandler+0x200>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00a      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x150>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_DMA_IRQHandler+0x204>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d102      	bne.n	8001a3a <HAL_DMA_IRQHandler+0x14a>
 8001a34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a38:	e00e      	b.n	8001a58 <HAL_DMA_IRQHandler+0x168>
 8001a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3e:	e00b      	b.n	8001a58 <HAL_DMA_IRQHandler+0x168>
 8001a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a44:	e008      	b.n	8001a58 <HAL_DMA_IRQHandler+0x168>
 8001a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4a:	e005      	b.n	8001a58 <HAL_DMA_IRQHandler+0x168>
 8001a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a50:	e002      	b.n	8001a58 <HAL_DMA_IRQHandler+0x168>
 8001a52:	2320      	movs	r3, #32
 8001a54:	e000      	b.n	8001a58 <HAL_DMA_IRQHandler+0x168>
 8001a56:	2302      	movs	r3, #2
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_DMA_IRQHandler+0x208>)
 8001a5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d034      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a74:	e02f      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d028      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x1e8>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d023      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020e 	bic.w	r2, r2, #14
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
    }
  }
  return;
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
}
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40020008 	.word	0x40020008
 8001ae4:	4002001c 	.word	0x4002001c
 8001ae8:	40020030 	.word	0x40020030
 8001aec:	40020044 	.word	0x40020044
 8001af0:	40020058 	.word	0x40020058
 8001af4:	4002006c 	.word	0x4002006c
 8001af8:	40020000 	.word	0x40020000

08001afc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d108      	bne.n	8001b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b3a:	e007      	b.n	8001b4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	60da      	str	r2, [r3, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b08b      	sub	sp, #44	; 0x2c
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e169      	b.n	8001e40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8158 	bne.w	8001e3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a9a      	ldr	r2, [pc, #616]	; (8001df8 <HAL_GPIO_Init+0x2a0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d05e      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001b94:	4a98      	ldr	r2, [pc, #608]	; (8001df8 <HAL_GPIO_Init+0x2a0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d875      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a98      	ldr	r2, [pc, #608]	; (8001dfc <HAL_GPIO_Init+0x2a4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d058      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a96      	ldr	r2, [pc, #600]	; (8001dfc <HAL_GPIO_Init+0x2a4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d86f      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001ba6:	4a96      	ldr	r2, [pc, #600]	; (8001e00 <HAL_GPIO_Init+0x2a8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d052      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bac:	4a94      	ldr	r2, [pc, #592]	; (8001e00 <HAL_GPIO_Init+0x2a8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d869      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bb2:	4a94      	ldr	r2, [pc, #592]	; (8001e04 <HAL_GPIO_Init+0x2ac>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d04c      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a92      	ldr	r2, [pc, #584]	; (8001e04 <HAL_GPIO_Init+0x2ac>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d863      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bbe:	4a92      	ldr	r2, [pc, #584]	; (8001e08 <HAL_GPIO_Init+0x2b0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d046      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a90      	ldr	r2, [pc, #576]	; (8001e08 <HAL_GPIO_Init+0x2b0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d85d      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bca:	2b12      	cmp	r3, #18
 8001bcc:	d82a      	bhi.n	8001c24 <HAL_GPIO_Init+0xcc>
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d859      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <HAL_GPIO_Init+0x80>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c2d 	.word	0x08001c2d
 8001be0:	08001c3f 	.word	0x08001c3f
 8001be4:	08001c81 	.word	0x08001c81
 8001be8:	08001c87 	.word	0x08001c87
 8001bec:	08001c87 	.word	0x08001c87
 8001bf0:	08001c87 	.word	0x08001c87
 8001bf4:	08001c87 	.word	0x08001c87
 8001bf8:	08001c87 	.word	0x08001c87
 8001bfc:	08001c87 	.word	0x08001c87
 8001c00:	08001c87 	.word	0x08001c87
 8001c04:	08001c87 	.word	0x08001c87
 8001c08:	08001c87 	.word	0x08001c87
 8001c0c:	08001c87 	.word	0x08001c87
 8001c10:	08001c87 	.word	0x08001c87
 8001c14:	08001c87 	.word	0x08001c87
 8001c18:	08001c87 	.word	0x08001c87
 8001c1c:	08001c35 	.word	0x08001c35
 8001c20:	08001c49 	.word	0x08001c49
 8001c24:	4a79      	ldr	r2, [pc, #484]	; (8001e0c <HAL_GPIO_Init+0x2b4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2a:	e02c      	b.n	8001c86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e029      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e024      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	3308      	adds	r3, #8
 8001c44:	623b      	str	r3, [r7, #32]
          break;
 8001c46:	e01f      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e01a      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e013      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	611a      	str	r2, [r3, #16]
          break;
 8001c72:	e009      	b.n	8001c88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c74:	2308      	movs	r3, #8
 8001c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	615a      	str	r2, [r3, #20]
          break;
 8001c7e:	e003      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          break;
 8001c86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2bff      	cmp	r3, #255	; 0xff
 8001c8c:	d801      	bhi.n	8001c92 <HAL_GPIO_Init+0x13a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_Init+0x13e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_GPIO_Init+0x14c>
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	e002      	b.n	8001caa <HAL_GPIO_Init+0x152>
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3b08      	subs	r3, #8
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	401a      	ands	r2, r3
 8001cbc:	6a39      	ldr	r1, [r7, #32]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80b1 	beq.w	8001e3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf0:	4a48      	ldr	r2, [pc, #288]	; (8001e14 <HAL_GPIO_Init+0x2bc>)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a40      	ldr	r2, [pc, #256]	; (8001e18 <HAL_GPIO_Init+0x2c0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_GPIO_Init+0x1ec>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <HAL_GPIO_Init+0x2c4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1e8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3e      	ldr	r2, [pc, #248]	; (8001e20 <HAL_GPIO_Init+0x2c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1e4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_GPIO_Init+0x2cc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1e0>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e006      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d38:	2304      	movs	r3, #4
 8001d3a:	e004      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d44:	2300      	movs	r3, #0
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d56:	492f      	ldr	r1, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x2bc>)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	492c      	ldr	r1, [pc, #176]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4928      	ldr	r1, [pc, #160]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4922      	ldr	r1, [pc, #136]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	491e      	ldr	r1, [pc, #120]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4918      	ldr	r1, [pc, #96]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4914      	ldr	r1, [pc, #80]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d021      	beq.n	8001e2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e021      	b.n	8001e3a <HAL_GPIO_Init+0x2e2>
 8001df6:	bf00      	nop
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10310000 	.word	0x10310000
 8001e00:	10220000 	.word	0x10220000
 8001e04:	10210000 	.word	0x10210000
 8001e08:	10120000 	.word	0x10120000
 8001e0c:	10110000 	.word	0x10110000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40011400 	.word	0x40011400
 8001e28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_GPIO_Init+0x304>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4909      	ldr	r1, [pc, #36]	; (8001e5c <HAL_GPIO_Init+0x304>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f47f ae8e 	bne.w	8001b6c <HAL_GPIO_Init+0x14>
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	372c      	adds	r7, #44	; 0x2c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e12b      	b.n	80020ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fba6 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec4:	f001 f832 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a81      	ldr	r2, [pc, #516]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d807      	bhi.n	8001ee4 <HAL_I2C_Init+0x84>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_I2C_Init+0x278>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf94      	ite	ls
 8001edc:	2301      	movls	r3, #1
 8001ede:	2300      	movhi	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e006      	b.n	8001ef2 <HAL_I2C_Init+0x92>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	; (80020dc <HAL_I2C_Init+0x27c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0e7      	b.n	80020ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a78      	ldr	r2, [pc, #480]	; (80020e0 <HAL_I2C_Init+0x280>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a6a      	ldr	r2, [pc, #424]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d802      	bhi.n	8001f34 <HAL_I2C_Init+0xd4>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	e009      	b.n	8001f48 <HAL_I2C_Init+0xe8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a69      	ldr	r2, [pc, #420]	; (80020e4 <HAL_I2C_Init+0x284>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	3301      	adds	r3, #1
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	495c      	ldr	r1, [pc, #368]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d819      	bhi.n	8001f9c <HAL_I2C_Init+0x13c>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e59      	subs	r1, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_I2C_Init+0x138>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e59      	subs	r1, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f96:	e051      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e04f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_I2C_Init+0x168>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e012      	b.n	8001fee <HAL_I2C_Init+0x18e>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	0099      	lsls	r1, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x196>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e022      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10e      	bne.n	800201c <HAL_I2C_Init+0x1bc>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e58      	subs	r0, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	440b      	add	r3, r1
 800200c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201a:	e00f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6809      	ldr	r1, [r1, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800206a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6911      	ldr	r1, [r2, #16]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	000186a0 	.word	0x000186a0
 80020d8:	001e847f 	.word	0x001e847f
 80020dc:	003d08ff 	.word	0x003d08ff
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7fe fcba 	bl	8000a74 <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	f040 80e0 	bne.w	80022d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	4970      	ldr	r1, [pc, #448]	; (80022dc <HAL_I2C_Master_Transmit+0x1f4>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f964 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	e0d3      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x50>
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2210      	movs	r2, #16
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	893a      	ldrh	r2, [r7, #8]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f89c 	bl	80022e4 <I2C_MasterRequestWrite>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e08d      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021cc:	e066      	b.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa22 	bl	800261c <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Master_Transmit+0x188>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	6a39      	ldr	r1, [r7, #32]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fa19 	bl	80026ac <I2C_WaitOnBTFFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b04      	cmp	r3, #4
 8002286:	d107      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01a      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d194      	bne.n	80021ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d006      	beq.n	800230e <I2C_MasterRequestWrite+0x2a>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <I2C_MasterRequestWrite+0x2a>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00b      	b.n	8002338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b12      	cmp	r3, #18
 8002326:	d107      	bne.n	8002338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f84f 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235e:	d103      	bne.n	8002368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e035      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002374:	d108      	bne.n	8002388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e01b      	b.n	80023c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	11db      	asrs	r3, r3, #7
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0306 	and.w	r3, r3, #6
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f063 030f 	orn	r3, r3, #15
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <I2C_MasterRequestWrite+0xfc>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f898 	bl	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e010      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <I2C_MasterRequestWrite+0x100>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f888 	bl	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00010008 	.word	0x00010008
 80023e4:	00010002 	.word	0x00010002

080023e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f8:	e048      	b.n	800248c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002400:	d044      	beq.n	800248c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002402:	f7fe fb37 	bl	8000a74 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d139      	bne.n	800248c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10d      	bne.n	800243e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	43da      	mvns	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	e00c      	b.n	8002458 <I2C_WaitOnFlagUntilTimeout+0x70>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	43da      	mvns	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	429a      	cmp	r2, r3
 800245c:	d116      	bne.n	800248c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e023      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10d      	bne.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	e00c      	b.n	80024cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d093      	beq.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ea:	e071      	b.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fa:	d123      	bne.n	8002544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0204 	orr.w	r2, r3, #4
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e067      	b.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254a:	d041      	beq.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254c:	f7fe fa92 	bl	8000a74 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d136      	bne.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10c      	bne.n	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e00b      	b.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	43da      	mvns	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e021      	b.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10c      	bne.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e00b      	b.n	800260c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4013      	ands	r3, r2
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f af6d 	bne.w	80024ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002628:	e034      	b.n	8002694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f886 	bl	800273c <I2C_IsAcknowledgeFailed>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e034      	b.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002640:	d028      	beq.n	8002694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002642:	f7fe fa17 	bl	8000a74 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11d      	bne.n	8002694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d016      	beq.n	8002694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e007      	b.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b80      	cmp	r3, #128	; 0x80
 80026a0:	d1c3      	bne.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b8:	e034      	b.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f83e 	bl	800273c <I2C_IsAcknowledgeFailed>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e034      	b.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d0:	d028      	beq.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d2:	f7fe f9cf 	bl	8000a74 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11d      	bne.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d016      	beq.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e007      	b.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d1c3      	bne.n	80026ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d11b      	bne.n	800278c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800275c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e272      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e>
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x12c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d168      	bne.n	80028c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e24c      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x76>
 8002800:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a7f      	ldr	r2, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e02e      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a77      	ldr	r2, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xbc>
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a71      	ldr	r2, [pc, #452]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xd4>
 8002854:	4b6b      	ldr	r3, [pc, #428]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe f8fe 	bl	8000a74 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe f8fa 	bl	8000a74 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e200      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xe4>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe f8ea 	bl	8000a74 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe f8e6 	bl	8000a74 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1ec      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x10c>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d2:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x18c>
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x176>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1c0      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4939      	ldr	r1, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x270>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe f89f 	bl	8000a74 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe f89b 	bl	8000a74 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a1      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4927      	ldr	r1, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_RCC_OscConfig+0x270>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe f87e 	bl	8000a74 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe f87a 	bl	8000a74 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e180      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d03a      	beq.n	8002a1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x274>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe f85e 	bl	8000a74 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe f85a 	bl	8000a74 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e160      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029da:	2001      	movs	r0, #1
 80029dc:	f000 faba 	bl	8002f54 <RCC_Delay>
 80029e0:	e01c      	b.n	8002a1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_RCC_OscConfig+0x274>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe f844 	bl	8000a74 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe f840 	bl	8000a74 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d908      	bls.n	8002a10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e146      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	42420000 	.word	0x42420000
 8002a0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e9      	bne.n	80029f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a6 	beq.w	8002b76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a87      	ldr	r2, [pc, #540]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7e      	ldr	r2, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe f801 	bl	8000a74 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fd fffd 	bl	8000a74 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e103      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x4c8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x312>
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e02d      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x334>
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6213      	str	r3, [r2, #32]
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a66      	ldr	r2, [pc, #408]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	e01c      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x356>
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x36e>
 8002aee:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a5a      	ldr	r2, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fd ffb1 	bl	8000a74 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fd ffad 	bl	8000a74 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0b1      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCC_OscConfig+0x37e>
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7fd ff9b 	bl	8000a74 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fd ff97 	bl	8000a74 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e09b      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8087 	beq.w	8002c8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b80:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d061      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d146      	bne.n	8002c22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fd ff6b 	bl	8000a74 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fd ff67 	bl	8000a74 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e06d      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4921      	ldr	r1, [pc, #132]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a19      	ldr	r1, [r3, #32]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	430b      	orrs	r3, r1
 8002bee:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd ff3b 	bl	8000a74 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fd ff37 	bl	8000a74 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e03d      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x46a>
 8002c20:	e035      	b.n	8002c8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fd ff24 	bl	8000a74 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fd ff20 	bl	8000a74 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e026      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x498>
 8002c4e:	e01e      	b.n	8002c8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e019      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x500>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0d0      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4965      	ldr	r1, [pc, #404]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d040      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d115      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e073      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06b      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4936      	ldr	r1, [pc, #216]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d8c:	f7fd fe72 	bl	8000a74 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d94:	f7fd fe6e 	bl	8000a74 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e053      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 020c 	and.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1eb      	bne.n	8002d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d210      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4922      	ldr	r1, [pc, #136]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1cc>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fdd0 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08003a90 	.word	0x08003a90
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d002      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8002e9e:	e027      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea2:	613b      	str	r3, [r7, #16]
      break;
 8002ea4:	e027      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0c9b      	lsrs	r3, r3, #18
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0c5b      	lsrs	r3, r3, #17
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed2:	fb03 f202 	mul.w	r2, r3, r2
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e004      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	613b      	str	r3, [r7, #16]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef2:	613b      	str	r3, [r7, #16]
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	693b      	ldr	r3, [r7, #16]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	007a1200 	.word	0x007a1200
 8002f0c:	08003aa8 	.word	0x08003aa8
 8002f10:	08003ab8 	.word	0x08003ab8
 8002f14:	003d0900 	.word	0x003d0900

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f30:	f7ff fff2 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	08003aa0 	.word	0x08003aa0

08002f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <RCC_Delay+0x34>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <RCC_Delay+0x38>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0a5b      	lsrs	r3, r3, #9
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f70:	bf00      	nop
  }
  while (Delay --);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	60fa      	str	r2, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <RCC_Delay+0x1c>
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d07d      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fac:	2300      	movs	r3, #0
 8002fae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb0:	4b4f      	ldr	r3, [pc, #316]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10d      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	61d3      	str	r3, [r2, #28]
 8002fc8:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d118      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe4:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff0:	f7fd fd40 	bl	8000a74 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff8:	f7fd fd3c 	bl	8000a74 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e06d      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d02e      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	429a      	cmp	r2, r3
 8003032:	d027      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003034:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800304a:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d014      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fd fd0b 	bl	8000a74 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fd fd07 	bl	8000a74 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e036      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ee      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4917      	ldr	r1, [pc, #92]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	4313      	orrs	r3, r2
 8003094:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	490b      	ldr	r1, [pc, #44]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4904      	ldr	r1, [pc, #16]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42420440 	.word	0x42420440

080030fc <siprintf>:
 80030fc:	b40e      	push	{r1, r2, r3}
 80030fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003102:	b500      	push	{lr}
 8003104:	b09c      	sub	sp, #112	; 0x70
 8003106:	ab1d      	add	r3, sp, #116	; 0x74
 8003108:	9002      	str	r0, [sp, #8]
 800310a:	9006      	str	r0, [sp, #24]
 800310c:	9107      	str	r1, [sp, #28]
 800310e:	9104      	str	r1, [sp, #16]
 8003110:	4808      	ldr	r0, [pc, #32]	; (8003134 <siprintf+0x38>)
 8003112:	4909      	ldr	r1, [pc, #36]	; (8003138 <siprintf+0x3c>)
 8003114:	f853 2b04 	ldr.w	r2, [r3], #4
 8003118:	9105      	str	r1, [sp, #20]
 800311a:	6800      	ldr	r0, [r0, #0]
 800311c:	a902      	add	r1, sp, #8
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	f000 f89a 	bl	8003258 <_svfiprintf_r>
 8003124:	2200      	movs	r2, #0
 8003126:	9b02      	ldr	r3, [sp, #8]
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	b01c      	add	sp, #112	; 0x70
 800312c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003130:	b003      	add	sp, #12
 8003132:	4770      	bx	lr
 8003134:	20000058 	.word	0x20000058
 8003138:	ffff0208 	.word	0xffff0208

0800313c <memset>:
 800313c:	4603      	mov	r3, r0
 800313e:	4402      	add	r2, r0
 8003140:	4293      	cmp	r3, r2
 8003142:	d100      	bne.n	8003146 <memset+0xa>
 8003144:	4770      	bx	lr
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	e7f9      	b.n	8003140 <memset+0x4>

0800314c <__errno>:
 800314c:	4b01      	ldr	r3, [pc, #4]	; (8003154 <__errno+0x8>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000058 	.word	0x20000058

08003158 <__libc_init_array>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	2600      	movs	r6, #0
 800315c:	4d0c      	ldr	r5, [pc, #48]	; (8003190 <__libc_init_array+0x38>)
 800315e:	4c0d      	ldr	r4, [pc, #52]	; (8003194 <__libc_init_array+0x3c>)
 8003160:	1b64      	subs	r4, r4, r5
 8003162:	10a4      	asrs	r4, r4, #2
 8003164:	42a6      	cmp	r6, r4
 8003166:	d109      	bne.n	800317c <__libc_init_array+0x24>
 8003168:	f000 fc7a 	bl	8003a60 <_init>
 800316c:	2600      	movs	r6, #0
 800316e:	4d0a      	ldr	r5, [pc, #40]	; (8003198 <__libc_init_array+0x40>)
 8003170:	4c0a      	ldr	r4, [pc, #40]	; (800319c <__libc_init_array+0x44>)
 8003172:	1b64      	subs	r4, r4, r5
 8003174:	10a4      	asrs	r4, r4, #2
 8003176:	42a6      	cmp	r6, r4
 8003178:	d105      	bne.n	8003186 <__libc_init_array+0x2e>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003180:	4798      	blx	r3
 8003182:	3601      	adds	r6, #1
 8003184:	e7ee      	b.n	8003164 <__libc_init_array+0xc>
 8003186:	f855 3b04 	ldr.w	r3, [r5], #4
 800318a:	4798      	blx	r3
 800318c:	3601      	adds	r6, #1
 800318e:	e7f2      	b.n	8003176 <__libc_init_array+0x1e>
 8003190:	08003af0 	.word	0x08003af0
 8003194:	08003af0 	.word	0x08003af0
 8003198:	08003af0 	.word	0x08003af0
 800319c:	08003af4 	.word	0x08003af4

080031a0 <__retarget_lock_acquire_recursive>:
 80031a0:	4770      	bx	lr

080031a2 <__retarget_lock_release_recursive>:
 80031a2:	4770      	bx	lr

080031a4 <__ssputs_r>:
 80031a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a8:	461f      	mov	r7, r3
 80031aa:	688e      	ldr	r6, [r1, #8]
 80031ac:	4682      	mov	sl, r0
 80031ae:	42be      	cmp	r6, r7
 80031b0:	460c      	mov	r4, r1
 80031b2:	4690      	mov	r8, r2
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	d82c      	bhi.n	8003212 <__ssputs_r+0x6e>
 80031b8:	898a      	ldrh	r2, [r1, #12]
 80031ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031be:	d026      	beq.n	800320e <__ssputs_r+0x6a>
 80031c0:	6965      	ldr	r5, [r4, #20]
 80031c2:	6909      	ldr	r1, [r1, #16]
 80031c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031c8:	eba3 0901 	sub.w	r9, r3, r1
 80031cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031d0:	1c7b      	adds	r3, r7, #1
 80031d2:	444b      	add	r3, r9
 80031d4:	106d      	asrs	r5, r5, #1
 80031d6:	429d      	cmp	r5, r3
 80031d8:	bf38      	it	cc
 80031da:	461d      	movcc	r5, r3
 80031dc:	0553      	lsls	r3, r2, #21
 80031de:	d527      	bpl.n	8003230 <__ssputs_r+0x8c>
 80031e0:	4629      	mov	r1, r5
 80031e2:	f000 f957 	bl	8003494 <_malloc_r>
 80031e6:	4606      	mov	r6, r0
 80031e8:	b360      	cbz	r0, 8003244 <__ssputs_r+0xa0>
 80031ea:	464a      	mov	r2, r9
 80031ec:	6921      	ldr	r1, [r4, #16]
 80031ee:	f000 fbd9 	bl	80039a4 <memcpy>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	81a3      	strh	r3, [r4, #12]
 80031fe:	6126      	str	r6, [r4, #16]
 8003200:	444e      	add	r6, r9
 8003202:	6026      	str	r6, [r4, #0]
 8003204:	463e      	mov	r6, r7
 8003206:	6165      	str	r5, [r4, #20]
 8003208:	eba5 0509 	sub.w	r5, r5, r9
 800320c:	60a5      	str	r5, [r4, #8]
 800320e:	42be      	cmp	r6, r7
 8003210:	d900      	bls.n	8003214 <__ssputs_r+0x70>
 8003212:	463e      	mov	r6, r7
 8003214:	4632      	mov	r2, r6
 8003216:	4641      	mov	r1, r8
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	f000 fb8a 	bl	8003932 <memmove>
 800321e:	2000      	movs	r0, #0
 8003220:	68a3      	ldr	r3, [r4, #8]
 8003222:	1b9b      	subs	r3, r3, r6
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	4433      	add	r3, r6
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	462a      	mov	r2, r5
 8003232:	f000 fb4f 	bl	80038d4 <_realloc_r>
 8003236:	4606      	mov	r6, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	d1e0      	bne.n	80031fe <__ssputs_r+0x5a>
 800323c:	4650      	mov	r0, sl
 800323e:	6921      	ldr	r1, [r4, #16]
 8003240:	f000 fbbe 	bl	80039c0 <_free_r>
 8003244:	230c      	movs	r3, #12
 8003246:	f8ca 3000 	str.w	r3, [sl]
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	e7e9      	b.n	800322c <__ssputs_r+0x88>

08003258 <_svfiprintf_r>:
 8003258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325c:	4698      	mov	r8, r3
 800325e:	898b      	ldrh	r3, [r1, #12]
 8003260:	4607      	mov	r7, r0
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	460d      	mov	r5, r1
 8003266:	4614      	mov	r4, r2
 8003268:	b09d      	sub	sp, #116	; 0x74
 800326a:	d50e      	bpl.n	800328a <_svfiprintf_r+0x32>
 800326c:	690b      	ldr	r3, [r1, #16]
 800326e:	b963      	cbnz	r3, 800328a <_svfiprintf_r+0x32>
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	f000 f90f 	bl	8003494 <_malloc_r>
 8003276:	6028      	str	r0, [r5, #0]
 8003278:	6128      	str	r0, [r5, #16]
 800327a:	b920      	cbnz	r0, 8003286 <_svfiprintf_r+0x2e>
 800327c:	230c      	movs	r3, #12
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003284:	e0d0      	b.n	8003428 <_svfiprintf_r+0x1d0>
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	616b      	str	r3, [r5, #20]
 800328a:	2300      	movs	r3, #0
 800328c:	9309      	str	r3, [sp, #36]	; 0x24
 800328e:	2320      	movs	r3, #32
 8003290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003294:	2330      	movs	r3, #48	; 0x30
 8003296:	f04f 0901 	mov.w	r9, #1
 800329a:	f8cd 800c 	str.w	r8, [sp, #12]
 800329e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003440 <_svfiprintf_r+0x1e8>
 80032a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032a6:	4623      	mov	r3, r4
 80032a8:	469a      	mov	sl, r3
 80032aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ae:	b10a      	cbz	r2, 80032b4 <_svfiprintf_r+0x5c>
 80032b0:	2a25      	cmp	r2, #37	; 0x25
 80032b2:	d1f9      	bne.n	80032a8 <_svfiprintf_r+0x50>
 80032b4:	ebba 0b04 	subs.w	fp, sl, r4
 80032b8:	d00b      	beq.n	80032d2 <_svfiprintf_r+0x7a>
 80032ba:	465b      	mov	r3, fp
 80032bc:	4622      	mov	r2, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	4638      	mov	r0, r7
 80032c2:	f7ff ff6f 	bl	80031a4 <__ssputs_r>
 80032c6:	3001      	adds	r0, #1
 80032c8:	f000 80a9 	beq.w	800341e <_svfiprintf_r+0x1c6>
 80032cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ce:	445a      	add	r2, fp
 80032d0:	9209      	str	r2, [sp, #36]	; 0x24
 80032d2:	f89a 3000 	ldrb.w	r3, [sl]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a1 	beq.w	800341e <_svfiprintf_r+0x1c6>
 80032dc:	2300      	movs	r3, #0
 80032de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032e6:	f10a 0a01 	add.w	sl, sl, #1
 80032ea:	9304      	str	r3, [sp, #16]
 80032ec:	9307      	str	r3, [sp, #28]
 80032ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032f2:	931a      	str	r3, [sp, #104]	; 0x68
 80032f4:	4654      	mov	r4, sl
 80032f6:	2205      	movs	r2, #5
 80032f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032fc:	4850      	ldr	r0, [pc, #320]	; (8003440 <_svfiprintf_r+0x1e8>)
 80032fe:	f000 fb43 	bl	8003988 <memchr>
 8003302:	9a04      	ldr	r2, [sp, #16]
 8003304:	b9d8      	cbnz	r0, 800333e <_svfiprintf_r+0xe6>
 8003306:	06d0      	lsls	r0, r2, #27
 8003308:	bf44      	itt	mi
 800330a:	2320      	movmi	r3, #32
 800330c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003310:	0711      	lsls	r1, r2, #28
 8003312:	bf44      	itt	mi
 8003314:	232b      	movmi	r3, #43	; 0x2b
 8003316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800331a:	f89a 3000 	ldrb.w	r3, [sl]
 800331e:	2b2a      	cmp	r3, #42	; 0x2a
 8003320:	d015      	beq.n	800334e <_svfiprintf_r+0xf6>
 8003322:	4654      	mov	r4, sl
 8003324:	2000      	movs	r0, #0
 8003326:	f04f 0c0a 	mov.w	ip, #10
 800332a:	9a07      	ldr	r2, [sp, #28]
 800332c:	4621      	mov	r1, r4
 800332e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003332:	3b30      	subs	r3, #48	; 0x30
 8003334:	2b09      	cmp	r3, #9
 8003336:	d94d      	bls.n	80033d4 <_svfiprintf_r+0x17c>
 8003338:	b1b0      	cbz	r0, 8003368 <_svfiprintf_r+0x110>
 800333a:	9207      	str	r2, [sp, #28]
 800333c:	e014      	b.n	8003368 <_svfiprintf_r+0x110>
 800333e:	eba0 0308 	sub.w	r3, r0, r8
 8003342:	fa09 f303 	lsl.w	r3, r9, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	46a2      	mov	sl, r4
 800334a:	9304      	str	r3, [sp, #16]
 800334c:	e7d2      	b.n	80032f4 <_svfiprintf_r+0x9c>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	1d19      	adds	r1, r3, #4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	9103      	str	r1, [sp, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	bfbb      	ittet	lt
 800335a:	425b      	neglt	r3, r3
 800335c:	f042 0202 	orrlt.w	r2, r2, #2
 8003360:	9307      	strge	r3, [sp, #28]
 8003362:	9307      	strlt	r3, [sp, #28]
 8003364:	bfb8      	it	lt
 8003366:	9204      	strlt	r2, [sp, #16]
 8003368:	7823      	ldrb	r3, [r4, #0]
 800336a:	2b2e      	cmp	r3, #46	; 0x2e
 800336c:	d10c      	bne.n	8003388 <_svfiprintf_r+0x130>
 800336e:	7863      	ldrb	r3, [r4, #1]
 8003370:	2b2a      	cmp	r3, #42	; 0x2a
 8003372:	d134      	bne.n	80033de <_svfiprintf_r+0x186>
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	3402      	adds	r4, #2
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	9203      	str	r2, [sp, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfb8      	it	lt
 8003382:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003386:	9305      	str	r3, [sp, #20]
 8003388:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003444 <_svfiprintf_r+0x1ec>
 800338c:	2203      	movs	r2, #3
 800338e:	4650      	mov	r0, sl
 8003390:	7821      	ldrb	r1, [r4, #0]
 8003392:	f000 faf9 	bl	8003988 <memchr>
 8003396:	b138      	cbz	r0, 80033a8 <_svfiprintf_r+0x150>
 8003398:	2240      	movs	r2, #64	; 0x40
 800339a:	9b04      	ldr	r3, [sp, #16]
 800339c:	eba0 000a 	sub.w	r0, r0, sl
 80033a0:	4082      	lsls	r2, r0
 80033a2:	4313      	orrs	r3, r2
 80033a4:	3401      	adds	r4, #1
 80033a6:	9304      	str	r3, [sp, #16]
 80033a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ac:	2206      	movs	r2, #6
 80033ae:	4826      	ldr	r0, [pc, #152]	; (8003448 <_svfiprintf_r+0x1f0>)
 80033b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b4:	f000 fae8 	bl	8003988 <memchr>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d038      	beq.n	800342e <_svfiprintf_r+0x1d6>
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <_svfiprintf_r+0x1f4>)
 80033be:	bb1b      	cbnz	r3, 8003408 <_svfiprintf_r+0x1b0>
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	3307      	adds	r3, #7
 80033c4:	f023 0307 	bic.w	r3, r3, #7
 80033c8:	3308      	adds	r3, #8
 80033ca:	9303      	str	r3, [sp, #12]
 80033cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ce:	4433      	add	r3, r6
 80033d0:	9309      	str	r3, [sp, #36]	; 0x24
 80033d2:	e768      	b.n	80032a6 <_svfiprintf_r+0x4e>
 80033d4:	460c      	mov	r4, r1
 80033d6:	2001      	movs	r0, #1
 80033d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033dc:	e7a6      	b.n	800332c <_svfiprintf_r+0xd4>
 80033de:	2300      	movs	r3, #0
 80033e0:	f04f 0c0a 	mov.w	ip, #10
 80033e4:	4619      	mov	r1, r3
 80033e6:	3401      	adds	r4, #1
 80033e8:	9305      	str	r3, [sp, #20]
 80033ea:	4620      	mov	r0, r4
 80033ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f0:	3a30      	subs	r2, #48	; 0x30
 80033f2:	2a09      	cmp	r2, #9
 80033f4:	d903      	bls.n	80033fe <_svfiprintf_r+0x1a6>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0c6      	beq.n	8003388 <_svfiprintf_r+0x130>
 80033fa:	9105      	str	r1, [sp, #20]
 80033fc:	e7c4      	b.n	8003388 <_svfiprintf_r+0x130>
 80033fe:	4604      	mov	r4, r0
 8003400:	2301      	movs	r3, #1
 8003402:	fb0c 2101 	mla	r1, ip, r1, r2
 8003406:	e7f0      	b.n	80033ea <_svfiprintf_r+0x192>
 8003408:	ab03      	add	r3, sp, #12
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	462a      	mov	r2, r5
 800340e:	4638      	mov	r0, r7
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <_svfiprintf_r+0x1f8>)
 8003412:	a904      	add	r1, sp, #16
 8003414:	f3af 8000 	nop.w
 8003418:	1c42      	adds	r2, r0, #1
 800341a:	4606      	mov	r6, r0
 800341c:	d1d6      	bne.n	80033cc <_svfiprintf_r+0x174>
 800341e:	89ab      	ldrh	r3, [r5, #12]
 8003420:	065b      	lsls	r3, r3, #25
 8003422:	f53f af2d 	bmi.w	8003280 <_svfiprintf_r+0x28>
 8003426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003428:	b01d      	add	sp, #116	; 0x74
 800342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4638      	mov	r0, r7
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <_svfiprintf_r+0x1f8>)
 8003438:	a904      	add	r1, sp, #16
 800343a:	f000 f91d 	bl	8003678 <_printf_i>
 800343e:	e7eb      	b.n	8003418 <_svfiprintf_r+0x1c0>
 8003440:	08003aba 	.word	0x08003aba
 8003444:	08003ac0 	.word	0x08003ac0
 8003448:	08003ac4 	.word	0x08003ac4
 800344c:	00000000 	.word	0x00000000
 8003450:	080031a5 	.word	0x080031a5

08003454 <sbrk_aligned>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4e0e      	ldr	r6, [pc, #56]	; (8003490 <sbrk_aligned+0x3c>)
 8003458:	460c      	mov	r4, r1
 800345a:	6831      	ldr	r1, [r6, #0]
 800345c:	4605      	mov	r5, r0
 800345e:	b911      	cbnz	r1, 8003466 <sbrk_aligned+0x12>
 8003460:	f000 fa82 	bl	8003968 <_sbrk_r>
 8003464:	6030      	str	r0, [r6, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 fa7d 	bl	8003968 <_sbrk_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d00a      	beq.n	8003488 <sbrk_aligned+0x34>
 8003472:	1cc4      	adds	r4, r0, #3
 8003474:	f024 0403 	bic.w	r4, r4, #3
 8003478:	42a0      	cmp	r0, r4
 800347a:	d007      	beq.n	800348c <sbrk_aligned+0x38>
 800347c:	1a21      	subs	r1, r4, r0
 800347e:	4628      	mov	r0, r5
 8003480:	f000 fa72 	bl	8003968 <_sbrk_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d101      	bne.n	800348c <sbrk_aligned+0x38>
 8003488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800348c:	4620      	mov	r0, r4
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	200002b0 	.word	0x200002b0

08003494 <_malloc_r>:
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003498:	1ccd      	adds	r5, r1, #3
 800349a:	f025 0503 	bic.w	r5, r5, #3
 800349e:	3508      	adds	r5, #8
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	bf38      	it	cc
 80034a4:	250c      	movcc	r5, #12
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	4607      	mov	r7, r0
 80034aa:	db01      	blt.n	80034b0 <_malloc_r+0x1c>
 80034ac:	42a9      	cmp	r1, r5
 80034ae:	d905      	bls.n	80034bc <_malloc_r+0x28>
 80034b0:	230c      	movs	r3, #12
 80034b2:	2600      	movs	r6, #0
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4630      	mov	r0, r6
 80034b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003590 <_malloc_r+0xfc>
 80034c0:	f000 f9fc 	bl	80038bc <__malloc_lock>
 80034c4:	f8d8 3000 	ldr.w	r3, [r8]
 80034c8:	461c      	mov	r4, r3
 80034ca:	bb5c      	cbnz	r4, 8003524 <_malloc_r+0x90>
 80034cc:	4629      	mov	r1, r5
 80034ce:	4638      	mov	r0, r7
 80034d0:	f7ff ffc0 	bl	8003454 <sbrk_aligned>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	4604      	mov	r4, r0
 80034d8:	d155      	bne.n	8003586 <_malloc_r+0xf2>
 80034da:	f8d8 4000 	ldr.w	r4, [r8]
 80034de:	4626      	mov	r6, r4
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d145      	bne.n	8003570 <_malloc_r+0xdc>
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d048      	beq.n	800357a <_malloc_r+0xe6>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	4631      	mov	r1, r6
 80034ec:	4638      	mov	r0, r7
 80034ee:	eb04 0903 	add.w	r9, r4, r3
 80034f2:	f000 fa39 	bl	8003968 <_sbrk_r>
 80034f6:	4581      	cmp	r9, r0
 80034f8:	d13f      	bne.n	800357a <_malloc_r+0xe6>
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	4638      	mov	r0, r7
 80034fe:	1a6d      	subs	r5, r5, r1
 8003500:	4629      	mov	r1, r5
 8003502:	f7ff ffa7 	bl	8003454 <sbrk_aligned>
 8003506:	3001      	adds	r0, #1
 8003508:	d037      	beq.n	800357a <_malloc_r+0xe6>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	442b      	add	r3, r5
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	f8d8 3000 	ldr.w	r3, [r8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d038      	beq.n	800358a <_malloc_r+0xf6>
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	42a2      	cmp	r2, r4
 800351c:	d12b      	bne.n	8003576 <_malloc_r+0xe2>
 800351e:	2200      	movs	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e00f      	b.n	8003544 <_malloc_r+0xb0>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	1b52      	subs	r2, r2, r5
 8003528:	d41f      	bmi.n	800356a <_malloc_r+0xd6>
 800352a:	2a0b      	cmp	r2, #11
 800352c:	d917      	bls.n	800355e <_malloc_r+0xca>
 800352e:	1961      	adds	r1, r4, r5
 8003530:	42a3      	cmp	r3, r4
 8003532:	6025      	str	r5, [r4, #0]
 8003534:	bf18      	it	ne
 8003536:	6059      	strne	r1, [r3, #4]
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	bf08      	it	eq
 800353c:	f8c8 1000 	streq.w	r1, [r8]
 8003540:	5162      	str	r2, [r4, r5]
 8003542:	604b      	str	r3, [r1, #4]
 8003544:	4638      	mov	r0, r7
 8003546:	f104 060b 	add.w	r6, r4, #11
 800354a:	f000 f9bd 	bl	80038c8 <__malloc_unlock>
 800354e:	f026 0607 	bic.w	r6, r6, #7
 8003552:	1d23      	adds	r3, r4, #4
 8003554:	1af2      	subs	r2, r6, r3
 8003556:	d0ae      	beq.n	80034b6 <_malloc_r+0x22>
 8003558:	1b9b      	subs	r3, r3, r6
 800355a:	50a3      	str	r3, [r4, r2]
 800355c:	e7ab      	b.n	80034b6 <_malloc_r+0x22>
 800355e:	42a3      	cmp	r3, r4
 8003560:	6862      	ldr	r2, [r4, #4]
 8003562:	d1dd      	bne.n	8003520 <_malloc_r+0x8c>
 8003564:	f8c8 2000 	str.w	r2, [r8]
 8003568:	e7ec      	b.n	8003544 <_malloc_r+0xb0>
 800356a:	4623      	mov	r3, r4
 800356c:	6864      	ldr	r4, [r4, #4]
 800356e:	e7ac      	b.n	80034ca <_malloc_r+0x36>
 8003570:	4634      	mov	r4, r6
 8003572:	6876      	ldr	r6, [r6, #4]
 8003574:	e7b4      	b.n	80034e0 <_malloc_r+0x4c>
 8003576:	4613      	mov	r3, r2
 8003578:	e7cc      	b.n	8003514 <_malloc_r+0x80>
 800357a:	230c      	movs	r3, #12
 800357c:	4638      	mov	r0, r7
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	f000 f9a2 	bl	80038c8 <__malloc_unlock>
 8003584:	e797      	b.n	80034b6 <_malloc_r+0x22>
 8003586:	6025      	str	r5, [r4, #0]
 8003588:	e7dc      	b.n	8003544 <_malloc_r+0xb0>
 800358a:	605b      	str	r3, [r3, #4]
 800358c:	deff      	udf	#255	; 0xff
 800358e:	bf00      	nop
 8003590:	200002ac 	.word	0x200002ac

08003594 <_printf_common>:
 8003594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	4616      	mov	r6, r2
 800359a:	4699      	mov	r9, r3
 800359c:	688a      	ldr	r2, [r1, #8]
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	4607      	mov	r7, r0
 80035a2:	4293      	cmp	r3, r2
 80035a4:	bfb8      	it	lt
 80035a6:	4613      	movlt	r3, r2
 80035a8:	6033      	str	r3, [r6, #0]
 80035aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035ae:	460c      	mov	r4, r1
 80035b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035b4:	b10a      	cbz	r2, 80035ba <_printf_common+0x26>
 80035b6:	3301      	adds	r3, #1
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	0699      	lsls	r1, r3, #26
 80035be:	bf42      	ittt	mi
 80035c0:	6833      	ldrmi	r3, [r6, #0]
 80035c2:	3302      	addmi	r3, #2
 80035c4:	6033      	strmi	r3, [r6, #0]
 80035c6:	6825      	ldr	r5, [r4, #0]
 80035c8:	f015 0506 	ands.w	r5, r5, #6
 80035cc:	d106      	bne.n	80035dc <_printf_common+0x48>
 80035ce:	f104 0a19 	add.w	sl, r4, #25
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	6832      	ldr	r2, [r6, #0]
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	42ab      	cmp	r3, r5
 80035da:	dc2b      	bgt.n	8003634 <_printf_common+0xa0>
 80035dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035e0:	1e13      	subs	r3, r2, #0
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	bf18      	it	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	0692      	lsls	r2, r2, #26
 80035ea:	d430      	bmi.n	800364e <_printf_common+0xba>
 80035ec:	4649      	mov	r1, r9
 80035ee:	4638      	mov	r0, r7
 80035f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d023      	beq.n	8003642 <_printf_common+0xae>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	6922      	ldr	r2, [r4, #16]
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf14      	ite	ne
 8003606:	2500      	movne	r5, #0
 8003608:	6833      	ldreq	r3, [r6, #0]
 800360a:	f04f 0600 	mov.w	r6, #0
 800360e:	bf08      	it	eq
 8003610:	68e5      	ldreq	r5, [r4, #12]
 8003612:	f104 041a 	add.w	r4, r4, #26
 8003616:	bf08      	it	eq
 8003618:	1aed      	subeq	r5, r5, r3
 800361a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800361e:	bf08      	it	eq
 8003620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003624:	4293      	cmp	r3, r2
 8003626:	bfc4      	itt	gt
 8003628:	1a9b      	subgt	r3, r3, r2
 800362a:	18ed      	addgt	r5, r5, r3
 800362c:	42b5      	cmp	r5, r6
 800362e:	d11a      	bne.n	8003666 <_printf_common+0xd2>
 8003630:	2000      	movs	r0, #0
 8003632:	e008      	b.n	8003646 <_printf_common+0xb2>
 8003634:	2301      	movs	r3, #1
 8003636:	4652      	mov	r2, sl
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d103      	bne.n	800364a <_printf_common+0xb6>
 8003642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800364a:	3501      	adds	r5, #1
 800364c:	e7c1      	b.n	80035d2 <_printf_common+0x3e>
 800364e:	2030      	movs	r0, #48	; 0x30
 8003650:	18e1      	adds	r1, r4, r3
 8003652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800365c:	4422      	add	r2, r4
 800365e:	3302      	adds	r3, #2
 8003660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003664:	e7c2      	b.n	80035ec <_printf_common+0x58>
 8003666:	2301      	movs	r3, #1
 8003668:	4622      	mov	r2, r4
 800366a:	4649      	mov	r1, r9
 800366c:	4638      	mov	r0, r7
 800366e:	47c0      	blx	r8
 8003670:	3001      	adds	r0, #1
 8003672:	d0e6      	beq.n	8003642 <_printf_common+0xae>
 8003674:	3601      	adds	r6, #1
 8003676:	e7d9      	b.n	800362c <_printf_common+0x98>

08003678 <_printf_i>:
 8003678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	7e0f      	ldrb	r7, [r1, #24]
 800367e:	4691      	mov	r9, r2
 8003680:	2f78      	cmp	r7, #120	; 0x78
 8003682:	4680      	mov	r8, r0
 8003684:	460c      	mov	r4, r1
 8003686:	469a      	mov	sl, r3
 8003688:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800368a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800368e:	d807      	bhi.n	80036a0 <_printf_i+0x28>
 8003690:	2f62      	cmp	r7, #98	; 0x62
 8003692:	d80a      	bhi.n	80036aa <_printf_i+0x32>
 8003694:	2f00      	cmp	r7, #0
 8003696:	f000 80d5 	beq.w	8003844 <_printf_i+0x1cc>
 800369a:	2f58      	cmp	r7, #88	; 0x58
 800369c:	f000 80c1 	beq.w	8003822 <_printf_i+0x1aa>
 80036a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a8:	e03a      	b.n	8003720 <_printf_i+0xa8>
 80036aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ae:	2b15      	cmp	r3, #21
 80036b0:	d8f6      	bhi.n	80036a0 <_printf_i+0x28>
 80036b2:	a101      	add	r1, pc, #4	; (adr r1, 80036b8 <_printf_i+0x40>)
 80036b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b8:	08003711 	.word	0x08003711
 80036bc:	08003725 	.word	0x08003725
 80036c0:	080036a1 	.word	0x080036a1
 80036c4:	080036a1 	.word	0x080036a1
 80036c8:	080036a1 	.word	0x080036a1
 80036cc:	080036a1 	.word	0x080036a1
 80036d0:	08003725 	.word	0x08003725
 80036d4:	080036a1 	.word	0x080036a1
 80036d8:	080036a1 	.word	0x080036a1
 80036dc:	080036a1 	.word	0x080036a1
 80036e0:	080036a1 	.word	0x080036a1
 80036e4:	0800382b 	.word	0x0800382b
 80036e8:	08003751 	.word	0x08003751
 80036ec:	080037e5 	.word	0x080037e5
 80036f0:	080036a1 	.word	0x080036a1
 80036f4:	080036a1 	.word	0x080036a1
 80036f8:	0800384d 	.word	0x0800384d
 80036fc:	080036a1 	.word	0x080036a1
 8003700:	08003751 	.word	0x08003751
 8003704:	080036a1 	.word	0x080036a1
 8003708:	080036a1 	.word	0x080036a1
 800370c:	080037ed 	.word	0x080037ed
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	602a      	str	r2, [r5, #0]
 8003718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800371c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003720:	2301      	movs	r3, #1
 8003722:	e0a0      	b.n	8003866 <_printf_i+0x1ee>
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	0607      	lsls	r7, r0, #24
 800372a:	f103 0104 	add.w	r1, r3, #4
 800372e:	6029      	str	r1, [r5, #0]
 8003730:	d501      	bpl.n	8003736 <_printf_i+0xbe>
 8003732:	681e      	ldr	r6, [r3, #0]
 8003734:	e003      	b.n	800373e <_printf_i+0xc6>
 8003736:	0646      	lsls	r6, r0, #25
 8003738:	d5fb      	bpl.n	8003732 <_printf_i+0xba>
 800373a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800373e:	2e00      	cmp	r6, #0
 8003740:	da03      	bge.n	800374a <_printf_i+0xd2>
 8003742:	232d      	movs	r3, #45	; 0x2d
 8003744:	4276      	negs	r6, r6
 8003746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374a:	230a      	movs	r3, #10
 800374c:	4859      	ldr	r0, [pc, #356]	; (80038b4 <_printf_i+0x23c>)
 800374e:	e012      	b.n	8003776 <_printf_i+0xfe>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	1d19      	adds	r1, r3, #4
 8003756:	6029      	str	r1, [r5, #0]
 8003758:	0605      	lsls	r5, r0, #24
 800375a:	d501      	bpl.n	8003760 <_printf_i+0xe8>
 800375c:	681e      	ldr	r6, [r3, #0]
 800375e:	e002      	b.n	8003766 <_printf_i+0xee>
 8003760:	0641      	lsls	r1, r0, #25
 8003762:	d5fb      	bpl.n	800375c <_printf_i+0xe4>
 8003764:	881e      	ldrh	r6, [r3, #0]
 8003766:	2f6f      	cmp	r7, #111	; 0x6f
 8003768:	bf0c      	ite	eq
 800376a:	2308      	moveq	r3, #8
 800376c:	230a      	movne	r3, #10
 800376e:	4851      	ldr	r0, [pc, #324]	; (80038b4 <_printf_i+0x23c>)
 8003770:	2100      	movs	r1, #0
 8003772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003776:	6865      	ldr	r5, [r4, #4]
 8003778:	2d00      	cmp	r5, #0
 800377a:	bfa8      	it	ge
 800377c:	6821      	ldrge	r1, [r4, #0]
 800377e:	60a5      	str	r5, [r4, #8]
 8003780:	bfa4      	itt	ge
 8003782:	f021 0104 	bicge.w	r1, r1, #4
 8003786:	6021      	strge	r1, [r4, #0]
 8003788:	b90e      	cbnz	r6, 800378e <_printf_i+0x116>
 800378a:	2d00      	cmp	r5, #0
 800378c:	d04b      	beq.n	8003826 <_printf_i+0x1ae>
 800378e:	4615      	mov	r5, r2
 8003790:	fbb6 f1f3 	udiv	r1, r6, r3
 8003794:	fb03 6711 	mls	r7, r3, r1, r6
 8003798:	5dc7      	ldrb	r7, [r0, r7]
 800379a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800379e:	4637      	mov	r7, r6
 80037a0:	42bb      	cmp	r3, r7
 80037a2:	460e      	mov	r6, r1
 80037a4:	d9f4      	bls.n	8003790 <_printf_i+0x118>
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d10b      	bne.n	80037c2 <_printf_i+0x14a>
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	07de      	lsls	r6, r3, #31
 80037ae:	d508      	bpl.n	80037c2 <_printf_i+0x14a>
 80037b0:	6923      	ldr	r3, [r4, #16]
 80037b2:	6861      	ldr	r1, [r4, #4]
 80037b4:	4299      	cmp	r1, r3
 80037b6:	bfde      	ittt	le
 80037b8:	2330      	movle	r3, #48	; 0x30
 80037ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80037c2:	1b52      	subs	r2, r2, r5
 80037c4:	6122      	str	r2, [r4, #16]
 80037c6:	464b      	mov	r3, r9
 80037c8:	4621      	mov	r1, r4
 80037ca:	4640      	mov	r0, r8
 80037cc:	f8cd a000 	str.w	sl, [sp]
 80037d0:	aa03      	add	r2, sp, #12
 80037d2:	f7ff fedf 	bl	8003594 <_printf_common>
 80037d6:	3001      	adds	r0, #1
 80037d8:	d14a      	bne.n	8003870 <_printf_i+0x1f8>
 80037da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037de:	b004      	add	sp, #16
 80037e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f043 0320 	orr.w	r3, r3, #32
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	2778      	movs	r7, #120	; 0x78
 80037ee:	4832      	ldr	r0, [pc, #200]	; (80038b8 <_printf_i+0x240>)
 80037f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	6829      	ldr	r1, [r5, #0]
 80037f8:	061f      	lsls	r7, r3, #24
 80037fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80037fe:	d402      	bmi.n	8003806 <_printf_i+0x18e>
 8003800:	065f      	lsls	r7, r3, #25
 8003802:	bf48      	it	mi
 8003804:	b2b6      	uxthmi	r6, r6
 8003806:	07df      	lsls	r7, r3, #31
 8003808:	bf48      	it	mi
 800380a:	f043 0320 	orrmi.w	r3, r3, #32
 800380e:	6029      	str	r1, [r5, #0]
 8003810:	bf48      	it	mi
 8003812:	6023      	strmi	r3, [r4, #0]
 8003814:	b91e      	cbnz	r6, 800381e <_printf_i+0x1a6>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	f023 0320 	bic.w	r3, r3, #32
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	2310      	movs	r3, #16
 8003820:	e7a6      	b.n	8003770 <_printf_i+0xf8>
 8003822:	4824      	ldr	r0, [pc, #144]	; (80038b4 <_printf_i+0x23c>)
 8003824:	e7e4      	b.n	80037f0 <_printf_i+0x178>
 8003826:	4615      	mov	r5, r2
 8003828:	e7bd      	b.n	80037a6 <_printf_i+0x12e>
 800382a:	682b      	ldr	r3, [r5, #0]
 800382c:	6826      	ldr	r6, [r4, #0]
 800382e:	1d18      	adds	r0, r3, #4
 8003830:	6961      	ldr	r1, [r4, #20]
 8003832:	6028      	str	r0, [r5, #0]
 8003834:	0635      	lsls	r5, r6, #24
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	d501      	bpl.n	800383e <_printf_i+0x1c6>
 800383a:	6019      	str	r1, [r3, #0]
 800383c:	e002      	b.n	8003844 <_printf_i+0x1cc>
 800383e:	0670      	lsls	r0, r6, #25
 8003840:	d5fb      	bpl.n	800383a <_printf_i+0x1c2>
 8003842:	8019      	strh	r1, [r3, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	4615      	mov	r5, r2
 8003848:	6123      	str	r3, [r4, #16]
 800384a:	e7bc      	b.n	80037c6 <_printf_i+0x14e>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	2100      	movs	r1, #0
 8003850:	1d1a      	adds	r2, r3, #4
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	6862      	ldr	r2, [r4, #4]
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f895 	bl	8003988 <memchr>
 800385e:	b108      	cbz	r0, 8003864 <_printf_i+0x1ec>
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	6060      	str	r0, [r4, #4]
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	6123      	str	r3, [r4, #16]
 8003868:	2300      	movs	r3, #0
 800386a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386e:	e7aa      	b.n	80037c6 <_printf_i+0x14e>
 8003870:	462a      	mov	r2, r5
 8003872:	4649      	mov	r1, r9
 8003874:	4640      	mov	r0, r8
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	47d0      	blx	sl
 800387a:	3001      	adds	r0, #1
 800387c:	d0ad      	beq.n	80037da <_printf_i+0x162>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	079b      	lsls	r3, r3, #30
 8003882:	d413      	bmi.n	80038ac <_printf_i+0x234>
 8003884:	68e0      	ldr	r0, [r4, #12]
 8003886:	9b03      	ldr	r3, [sp, #12]
 8003888:	4298      	cmp	r0, r3
 800388a:	bfb8      	it	lt
 800388c:	4618      	movlt	r0, r3
 800388e:	e7a6      	b.n	80037de <_printf_i+0x166>
 8003890:	2301      	movs	r3, #1
 8003892:	4632      	mov	r2, r6
 8003894:	4649      	mov	r1, r9
 8003896:	4640      	mov	r0, r8
 8003898:	47d0      	blx	sl
 800389a:	3001      	adds	r0, #1
 800389c:	d09d      	beq.n	80037da <_printf_i+0x162>
 800389e:	3501      	adds	r5, #1
 80038a0:	68e3      	ldr	r3, [r4, #12]
 80038a2:	9903      	ldr	r1, [sp, #12]
 80038a4:	1a5b      	subs	r3, r3, r1
 80038a6:	42ab      	cmp	r3, r5
 80038a8:	dcf2      	bgt.n	8003890 <_printf_i+0x218>
 80038aa:	e7eb      	b.n	8003884 <_printf_i+0x20c>
 80038ac:	2500      	movs	r5, #0
 80038ae:	f104 0619 	add.w	r6, r4, #25
 80038b2:	e7f5      	b.n	80038a0 <_printf_i+0x228>
 80038b4:	08003acb 	.word	0x08003acb
 80038b8:	08003adc 	.word	0x08003adc

080038bc <__malloc_lock>:
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <__malloc_lock+0x8>)
 80038be:	f7ff bc6f 	b.w	80031a0 <__retarget_lock_acquire_recursive>
 80038c2:	bf00      	nop
 80038c4:	200002a8 	.word	0x200002a8

080038c8 <__malloc_unlock>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__malloc_unlock+0x8>)
 80038ca:	f7ff bc6a 	b.w	80031a2 <__retarget_lock_release_recursive>
 80038ce:	bf00      	nop
 80038d0:	200002a8 	.word	0x200002a8

080038d4 <_realloc_r>:
 80038d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d8:	4680      	mov	r8, r0
 80038da:	4614      	mov	r4, r2
 80038dc:	460e      	mov	r6, r1
 80038de:	b921      	cbnz	r1, 80038ea <_realloc_r+0x16>
 80038e0:	4611      	mov	r1, r2
 80038e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038e6:	f7ff bdd5 	b.w	8003494 <_malloc_r>
 80038ea:	b92a      	cbnz	r2, 80038f8 <_realloc_r+0x24>
 80038ec:	f000 f868 	bl	80039c0 <_free_r>
 80038f0:	4625      	mov	r5, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f8:	f000 f8aa 	bl	8003a50 <_malloc_usable_size_r>
 80038fc:	4284      	cmp	r4, r0
 80038fe:	4607      	mov	r7, r0
 8003900:	d802      	bhi.n	8003908 <_realloc_r+0x34>
 8003902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003906:	d812      	bhi.n	800392e <_realloc_r+0x5a>
 8003908:	4621      	mov	r1, r4
 800390a:	4640      	mov	r0, r8
 800390c:	f7ff fdc2 	bl	8003494 <_malloc_r>
 8003910:	4605      	mov	r5, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	d0ed      	beq.n	80038f2 <_realloc_r+0x1e>
 8003916:	42bc      	cmp	r4, r7
 8003918:	4622      	mov	r2, r4
 800391a:	4631      	mov	r1, r6
 800391c:	bf28      	it	cs
 800391e:	463a      	movcs	r2, r7
 8003920:	f000 f840 	bl	80039a4 <memcpy>
 8003924:	4631      	mov	r1, r6
 8003926:	4640      	mov	r0, r8
 8003928:	f000 f84a 	bl	80039c0 <_free_r>
 800392c:	e7e1      	b.n	80038f2 <_realloc_r+0x1e>
 800392e:	4635      	mov	r5, r6
 8003930:	e7df      	b.n	80038f2 <_realloc_r+0x1e>

08003932 <memmove>:
 8003932:	4288      	cmp	r0, r1
 8003934:	b510      	push	{r4, lr}
 8003936:	eb01 0402 	add.w	r4, r1, r2
 800393a:	d902      	bls.n	8003942 <memmove+0x10>
 800393c:	4284      	cmp	r4, r0
 800393e:	4623      	mov	r3, r4
 8003940:	d807      	bhi.n	8003952 <memmove+0x20>
 8003942:	1e43      	subs	r3, r0, #1
 8003944:	42a1      	cmp	r1, r4
 8003946:	d008      	beq.n	800395a <memmove+0x28>
 8003948:	f811 2b01 	ldrb.w	r2, [r1], #1
 800394c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003950:	e7f8      	b.n	8003944 <memmove+0x12>
 8003952:	4601      	mov	r1, r0
 8003954:	4402      	add	r2, r0
 8003956:	428a      	cmp	r2, r1
 8003958:	d100      	bne.n	800395c <memmove+0x2a>
 800395a:	bd10      	pop	{r4, pc}
 800395c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003960:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003964:	e7f7      	b.n	8003956 <memmove+0x24>
	...

08003968 <_sbrk_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	2300      	movs	r3, #0
 800396c:	4d05      	ldr	r5, [pc, #20]	; (8003984 <_sbrk_r+0x1c>)
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	602b      	str	r3, [r5, #0]
 8003974:	f7fc ffc4 	bl	8000900 <_sbrk>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d102      	bne.n	8003982 <_sbrk_r+0x1a>
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	b103      	cbz	r3, 8003982 <_sbrk_r+0x1a>
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	bd38      	pop	{r3, r4, r5, pc}
 8003984:	200002b4 	.word	0x200002b4

08003988 <memchr>:
 8003988:	4603      	mov	r3, r0
 800398a:	b510      	push	{r4, lr}
 800398c:	b2c9      	uxtb	r1, r1
 800398e:	4402      	add	r2, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	4618      	mov	r0, r3
 8003994:	d101      	bne.n	800399a <memchr+0x12>
 8003996:	2000      	movs	r0, #0
 8003998:	e003      	b.n	80039a2 <memchr+0x1a>
 800399a:	7804      	ldrb	r4, [r0, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	428c      	cmp	r4, r1
 80039a0:	d1f6      	bne.n	8003990 <memchr+0x8>
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <memcpy>:
 80039a4:	440a      	add	r2, r1
 80039a6:	4291      	cmp	r1, r2
 80039a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80039ac:	d100      	bne.n	80039b0 <memcpy+0xc>
 80039ae:	4770      	bx	lr
 80039b0:	b510      	push	{r4, lr}
 80039b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039b6:	4291      	cmp	r1, r2
 80039b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039bc:	d1f9      	bne.n	80039b2 <memcpy+0xe>
 80039be:	bd10      	pop	{r4, pc}

080039c0 <_free_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d040      	beq.n	8003a4a <_free_r+0x8a>
 80039c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039cc:	1f0c      	subs	r4, r1, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	18e4      	addlt	r4, r4, r3
 80039d4:	f7ff ff72 	bl	80038bc <__malloc_lock>
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <_free_r+0x8c>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	b933      	cbnz	r3, 80039ec <_free_r+0x2c>
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	6014      	str	r4, [r2, #0]
 80039e2:	4628      	mov	r0, r5
 80039e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e8:	f7ff bf6e 	b.w	80038c8 <__malloc_unlock>
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d908      	bls.n	8003a02 <_free_r+0x42>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	bf01      	itttt	eq
 80039f8:	6819      	ldreq	r1, [r3, #0]
 80039fa:	685b      	ldreq	r3, [r3, #4]
 80039fc:	1809      	addeq	r1, r1, r0
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	e7ed      	b.n	80039de <_free_r+0x1e>
 8003a02:	461a      	mov	r2, r3
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b10b      	cbz	r3, 8003a0c <_free_r+0x4c>
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d9fa      	bls.n	8003a02 <_free_r+0x42>
 8003a0c:	6811      	ldr	r1, [r2, #0]
 8003a0e:	1850      	adds	r0, r2, r1
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d10b      	bne.n	8003a2c <_free_r+0x6c>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	4401      	add	r1, r0
 8003a18:	1850      	adds	r0, r2, r1
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	d1e0      	bne.n	80039e2 <_free_r+0x22>
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4408      	add	r0, r1
 8003a26:	6010      	str	r0, [r2, #0]
 8003a28:	6053      	str	r3, [r2, #4]
 8003a2a:	e7da      	b.n	80039e2 <_free_r+0x22>
 8003a2c:	d902      	bls.n	8003a34 <_free_r+0x74>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	e7d6      	b.n	80039e2 <_free_r+0x22>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	1821      	adds	r1, r4, r0
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	bf01      	itttt	eq
 8003a3c:	6819      	ldreq	r1, [r3, #0]
 8003a3e:	685b      	ldreq	r3, [r3, #4]
 8003a40:	1809      	addeq	r1, r1, r0
 8003a42:	6021      	streq	r1, [r4, #0]
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	6054      	str	r4, [r2, #4]
 8003a48:	e7cb      	b.n	80039e2 <_free_r+0x22>
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	200002ac 	.word	0x200002ac

08003a50 <_malloc_usable_size_r>:
 8003a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a54:	1f18      	subs	r0, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfbc      	itt	lt
 8003a5a:	580b      	ldrlt	r3, [r1, r0]
 8003a5c:	18c0      	addlt	r0, r0, r3
 8003a5e:	4770      	bx	lr

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr
